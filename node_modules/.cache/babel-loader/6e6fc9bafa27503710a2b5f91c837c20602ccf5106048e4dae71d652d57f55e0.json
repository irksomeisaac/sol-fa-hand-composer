{"ast":null,"code":"// Kodály hand sign positions database with improved recognition based on reference images\nexport const kodalySigns = {\n  'do': {\n    description: 'Closed fist, pointing downward',\n    keyFeatures: {\n      fingersClose: true,\n      palmFacing: 'in',\n      handDirection: 'down',\n      knucklesVisible: true,\n      allFingersClosed: true\n    }\n  },\n  're': {\n    description: 'Hand at 45-degree angle, fingers together, palm facing in',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'in',\n      handRotation: 'diagonal',\n      wristAngle: 45\n    }\n  },\n  'mi': {\n    description: 'Hand horizontal, palm down, fingers extended and together',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'down',\n      handRotation: 'horizontal'\n    }\n  },\n  'fa': {\n    description: 'Fist with thumb pointing down at 45-degree angle',\n    keyFeatures: {\n      fingersClose: true,\n      thumbExtended: true,\n      thumbDirection: 'diagonal-down',\n      otherFingersClosed: true\n    }\n  },\n  'sol': {\n    description: 'Hand pointing forward, palm facing left, fingers together',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'left',\n      handDirection: 'forward'\n    }\n  },\n  'la': {\n    description: 'Hand cupped downward, fingers relaxed and curved',\n    keyFeatures: {\n      fingersRelaxed: true,\n      fingersCurved: true,\n      palmFacing: 'down',\n      handShape: 'cup'\n    }\n  },\n  'ti': {\n    description: 'Index finger pointing up at 45-degree angle, other fingers closed',\n    keyFeatures: {\n      indexExtended: true,\n      otherFingersClosed: true,\n      handDirection: 'diagonal-up',\n      palmFacing: 'in'\n    }\n  }\n};\nconst calculateFingerAngles = landmarks => {\n  const angles = {};\n  // Calculate angles between finger segments\n  const fingerBases = [5, 9, 13, 17]; // IMRP bases\n  const fingerMids = [6, 10, 14, 18]; // IMRP middle joints\n  const fingerTips = [8, 12, 16, 20]; // IMRP tips\n\n  for (let i = 0; i < 4; i++) {\n    const base = landmarks[fingerBases[i]];\n    const mid = landmarks[fingerMids[i]];\n    const tip = landmarks[fingerTips[i]];\n\n    // Calculate angles at each joint\n    angles[i] = {\n      base: calculateJointAngle(base, mid, tip),\n      mid: calculateJointAngle(mid, base, tip)\n    };\n  }\n  return angles;\n};\nconst calculateJointAngle = (p1, p2, p3) => {\n  const v1 = {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n    z: p1.z - p2.z\n  };\n  const v2 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n    z: p3.z - p2.z\n  };\n  const dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n  const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\n  const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n  return Math.acos(dot / (mag1 * mag2)) * (180 / Math.PI);\n};\nconst analyzePalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n  const palmNormal = calculatePalmNormal(wrist, indexBase, pinkyBase);\n  return categorizePalmDirection(palmNormal);\n};\nconst calculatePalmNormal = (wrist, indexBase, pinkyBase) => {\n  // Calculate vectors along palm\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n\n  // Cross product for normal vector\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  return {\n    x: normal.x / magnitude,\n    y: normal.y / magnitude,\n    z: normal.z / magnitude\n  };\n};\nconst categorizePalmDirection = normal => {\n  const angleThreshold = 0.7; // cos(45°) ≈ 0.7\n\n  if (Math.abs(normal.z) > angleThreshold) return normal.z > 0 ? 'in' : 'out';\n  if (Math.abs(normal.y) > angleThreshold) return normal.y > 0 ? 'down' : 'up';\n  if (normal.x > angleThreshold) return 'left';\n  if (normal.x < -angleThreshold) return 'right';\n\n  // If no clear direction, determine the closest\n  const maxComp = Math.max(Math.abs(normal.x), Math.abs(normal.y), Math.abs(normal.z));\n  if (Math.abs(normal.z) === maxComp) return normal.z > 0 ? 'in' : 'out';\n  if (Math.abs(normal.y) === maxComp) return normal.y > 0 ? 'down' : 'up';\n  return normal.x > 0 ? 'left' : 'right';\n};\nconst analyzeHandShape = landmarks => {\n  const fingerAngles = calculateFingerAngles(landmarks);\n  const extendedFingers = [];\n  const bentFingers = [];\n\n  // Analyze each finger's extension state\n  for (let i = 0; i < 4; i++) {\n    const angles = fingerAngles[i];\n    if (angles.base < 30 && angles.mid < 30) {\n      extendedFingers.push(i);\n    } else if (angles.base > 60 || angles.mid > 60) {\n      bentFingers.push(i);\n    }\n  }\n  return {\n    extendedFingers,\n    bentFingers,\n    indexExtended: extendedFingers.includes(0),\n    allExtended: extendedFingers.length === 4,\n    allBent: bentFingers.length === 4,\n    fingerAngles\n  };\n};\nconst calculateHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleFinger = landmarks[12];\n  const direction = {\n    x: middleFinger.x - wrist.x,\n    y: middleFinger.y - wrist.y,\n    z: middleFinger.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles with main axes\n  const angleY = Math.acos(direction.y) * (180 / Math.PI);\n  if (angleY < 30) return 'up';\n  if (angleY > 150) return 'down';\n  if (angleY > 60 && angleY < 120) {\n    if (Math.abs(direction.x) > Math.abs(direction.z)) {\n      return direction.x > 0 ? 'right' : 'left';\n    }\n    return direction.z > 0 ? 'forward' : 'backward';\n  }\n  return 'diagonal-' + (direction.y > 0 ? 'down' : 'up');\n};\nexport const recognizeKodalySign = landmarks => {\n  const handShape = analyzeHandShape(landmarks);\n  const palmDirection = analyzePalmDirection(landmarks);\n  const handDirection = calculateHandDirection(landmarks);\n  let bestMatch = null;\n  let highestScore = 0;\n  let confidence = 0;\n  for (const [sign, data] of Object.entries(kodalySigns)) {\n    let score = 0;\n    const features = data.keyFeatures;\n\n    // Basic shape matching\n    if (features.fingersExtended && handShape.allExtended) score += 2;\n    if (features.fingersClose && handShape.allBent) score += 2;\n    if (features.indexExtended && handShape.indexExtended && handShape.bentFingers.length === 3) score += 3;\n\n    // Direction matching\n    if (features.handDirection === handDirection) score += 2;\n    if (features.palmFacing === palmDirection) score += 2;\n\n    // Special cases for each sign\n    switch (sign) {\n      case 'ti':\n        if (handShape.indexExtended && handShape.bentFingers.length === 3 && handDirection.includes('up') && palmDirection === 'in') {\n          score += 3;\n        }\n        break;\n      case 'la':\n        if (handShape.bentFingers.length >= 3 && palmDirection === 'down') {\n          score += 3;\n        }\n        break;\n      case 'sol':\n        if (handShape.allExtended && palmDirection === 'left' && handDirection === 'forward') {\n          score += 3;\n        }\n        break;\n      case 'fa':\n        if (handShape.bentFingers.length === 3 && handDirection.includes('down')) {\n          score += 3;\n        }\n        break;\n      case 'mi':\n        if (handShape.allExtended && palmDirection === 'down' && handDirection.includes('forward')) {\n          score += 3;\n        }\n        break;\n      case 're':\n        if (handShape.allExtended && palmDirection === 'in' && handDirection.includes('diagonal')) {\n          score += 3;\n        }\n        break;\n      case 'do':\n        if (handShape.allBent && handDirection.includes('down')) {\n          score += 3;\n        }\n        break;\n    }\n    if (score > highestScore) {\n      highestScore = score;\n      bestMatch = sign;\n      confidence = score / 10; // Normalize confidence\n    }\n  }\n  return highestScore >= 4 ? {\n    sign: bestMatch,\n    confidence: Math.min(confidence, 1)\n  } : null;\n};\n\n// Export for debugging\nexport const analyzeHand = landmarks => ({\n  shape: analyzeHandShape(landmarks),\n  palmDirection: analyzePalmDirection(landmarks),\n  handDirection: calculateHandDirection(landmarks)\n});","map":{"version":3,"names":["kodalySigns","description","keyFeatures","fingersClose","palmFacing","handDirection","knucklesVisible","allFingersClosed","fingersExtended","fingersTogether","handRotation","wristAngle","thumbExtended","thumbDirection","otherFingersClosed","fingersRelaxed","fingersCurved","handShape","indexExtended","calculateFingerAngles","landmarks","angles","fingerBases","fingerMids","fingerTips","i","base","mid","tip","calculateJointAngle","p1","p2","p3","v1","x","y","z","v2","dot","mag1","Math","sqrt","mag2","acos","PI","analyzePalmDirection","wrist","indexBase","pinkyBase","palmNormal","calculatePalmNormal","categorizePalmDirection","normal","magnitude","angleThreshold","abs","maxComp","max","analyzeHandShape","fingerAngles","extendedFingers","bentFingers","push","includes","allExtended","length","allBent","calculateHandDirection","middleFinger","direction","angleY","recognizeKodalySign","palmDirection","bestMatch","highestScore","confidence","sign","data","Object","entries","score","features","min","analyzeHand","shape"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign positions database with improved recognition based on reference images\r\nexport const kodalySigns = {\r\n    'do': {\r\n        description: 'Closed fist, pointing downward',\r\n        keyFeatures: {\r\n            fingersClose: true,\r\n            palmFacing: 'in',\r\n            handDirection: 'down',\r\n            knucklesVisible: true,\r\n            allFingersClosed: true\r\n        }\r\n    },\r\n    're': {\r\n        description: 'Hand at 45-degree angle, fingers together, palm facing in',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'in',\r\n            handRotation: 'diagonal',\r\n            wristAngle: 45\r\n        }\r\n    },\r\n    'mi': {\r\n        description: 'Hand horizontal, palm down, fingers extended and together',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'down',\r\n            handRotation: 'horizontal'\r\n        }\r\n    },\r\n    'fa': {\r\n        description: 'Fist with thumb pointing down at 45-degree angle',\r\n        keyFeatures: {\r\n            fingersClose: true,\r\n            thumbExtended: true,\r\n            thumbDirection: 'diagonal-down',\r\n            otherFingersClosed: true\r\n        }\r\n    },\r\n    'sol': {\r\n        description: 'Hand pointing forward, palm facing left, fingers together',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'left',\r\n            handDirection: 'forward'\r\n        }\r\n    },\r\n    'la': {\r\n        description: 'Hand cupped downward, fingers relaxed and curved',\r\n        keyFeatures: {\r\n            fingersRelaxed: true,\r\n            fingersCurved: true,\r\n            palmFacing: 'down',\r\n            handShape: 'cup'\r\n        }\r\n    },\r\n    'ti': {\r\n        description: 'Index finger pointing up at 45-degree angle, other fingers closed',\r\n        keyFeatures: {\r\n            indexExtended: true,\r\n            otherFingersClosed: true,\r\n            handDirection: 'diagonal-up',\r\n            palmFacing: 'in'\r\n        }\r\n    }\r\n};\r\n\r\nconst calculateFingerAngles = (landmarks) => {\r\n    const angles = {};\r\n    // Calculate angles between finger segments\r\n    const fingerBases = [5, 9, 13, 17]; // IMRP bases\r\n    const fingerMids = [6, 10, 14, 18]; // IMRP middle joints\r\n    const fingerTips = [8, 12, 16, 20]; // IMRP tips\r\n    \r\n    for (let i = 0; i < 4; i++) {\r\n        const base = landmarks[fingerBases[i]];\r\n        const mid = landmarks[fingerMids[i]];\r\n        const tip = landmarks[fingerTips[i]];\r\n        \r\n        // Calculate angles at each joint\r\n        angles[i] = {\r\n            base: calculateJointAngle(base, mid, tip),\r\n            mid: calculateJointAngle(mid, base, tip)\r\n        };\r\n    }\r\n    \r\n    return angles;\r\n};\r\n\r\nconst calculateJointAngle = (p1, p2, p3) => {\r\n    const v1 = {\r\n        x: p1.x - p2.x,\r\n        y: p1.y - p2.y,\r\n        z: p1.z - p2.z\r\n    };\r\n    const v2 = {\r\n        x: p3.x - p2.x,\r\n        y: p3.y - p2.y,\r\n        z: p3.z - p2.z\r\n    };\r\n    \r\n    const dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n    const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\r\n    const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\r\n    \r\n    return Math.acos(dot / (mag1 * mag2)) * (180 / Math.PI);\r\n};\r\n\r\nconst analyzePalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n    \r\n    const palmNormal = calculatePalmNormal(wrist, indexBase, pinkyBase);\r\n    return categorizePalmDirection(palmNormal);\r\n};\r\n\r\nconst calculatePalmNormal = (wrist, indexBase, pinkyBase) => {\r\n    // Calculate vectors along palm\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n    \r\n    // Cross product for normal vector\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n    \r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    return {\r\n        x: normal.x / magnitude,\r\n        y: normal.y / magnitude,\r\n        z: normal.z / magnitude\r\n    };\r\n};\r\n\r\nconst categorizePalmDirection = (normal) => {\r\n    const angleThreshold = 0.7; // cos(45°) ≈ 0.7\r\n    \r\n    if (Math.abs(normal.z) > angleThreshold) return normal.z > 0 ? 'in' : 'out';\r\n    if (Math.abs(normal.y) > angleThreshold) return normal.y > 0 ? 'down' : 'up';\r\n    if (normal.x > angleThreshold) return 'left';\r\n    if (normal.x < -angleThreshold) return 'right';\r\n    \r\n    // If no clear direction, determine the closest\r\n    const maxComp = Math.max(Math.abs(normal.x), Math.abs(normal.y), Math.abs(normal.z));\r\n    if (Math.abs(normal.z) === maxComp) return normal.z > 0 ? 'in' : 'out';\r\n    if (Math.abs(normal.y) === maxComp) return normal.y > 0 ? 'down' : 'up';\r\n    return normal.x > 0 ? 'left' : 'right';\r\n};\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    const fingerAngles = calculateFingerAngles(landmarks);\r\n    const extendedFingers = [];\r\n    const bentFingers = [];\r\n    \r\n    // Analyze each finger's extension state\r\n    for (let i = 0; i < 4; i++) {\r\n        const angles = fingerAngles[i];\r\n        if (angles.base < 30 && angles.mid < 30) {\r\n            extendedFingers.push(i);\r\n        } else if (angles.base > 60 || angles.mid > 60) {\r\n            bentFingers.push(i);\r\n        }\r\n    }\r\n    \r\n    return {\r\n        extendedFingers,\r\n        bentFingers,\r\n        indexExtended: extendedFingers.includes(0),\r\n        allExtended: extendedFingers.length === 4,\r\n        allBent: bentFingers.length === 4,\r\n        fingerAngles\r\n    };\r\n};\r\n\r\nconst calculateHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleFinger = landmarks[12];\r\n    \r\n    const direction = {\r\n        x: middleFinger.x - wrist.x,\r\n        y: middleFinger.y - wrist.y,\r\n        z: middleFinger.z - wrist.z\r\n    };\r\n    \r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n    \r\n    // Calculate angles with main axes\r\n    const angleY = Math.acos(direction.y) * (180 / Math.PI);\r\n    \r\n    if (angleY < 30) return 'up';\r\n    if (angleY > 150) return 'down';\r\n    if (angleY > 60 && angleY < 120) {\r\n        if (Math.abs(direction.x) > Math.abs(direction.z)) {\r\n            return direction.x > 0 ? 'right' : 'left';\r\n        }\r\n        return direction.z > 0 ? 'forward' : 'backward';\r\n    }\r\n    return 'diagonal-' + (direction.y > 0 ? 'down' : 'up');\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    const handShape = analyzeHandShape(landmarks);\r\n    const palmDirection = analyzePalmDirection(landmarks);\r\n    const handDirection = calculateHandDirection(landmarks);\r\n    \r\n    let bestMatch = null;\r\n    let highestScore = 0;\r\n    let confidence = 0;\r\n    \r\n    for (const [sign, data] of Object.entries(kodalySigns)) {\r\n        let score = 0;\r\n        const features = data.keyFeatures;\r\n        \r\n        // Basic shape matching\r\n        if (features.fingersExtended && handShape.allExtended) score += 2;\r\n        if (features.fingersClose && handShape.allBent) score += 2;\r\n        if (features.indexExtended && handShape.indexExtended && handShape.bentFingers.length === 3) score += 3;\r\n        \r\n        // Direction matching\r\n        if (features.handDirection === handDirection) score += 2;\r\n        if (features.palmFacing === palmDirection) score += 2;\r\n        \r\n        // Special cases for each sign\r\n        switch(sign) {\r\n            case 'ti':\r\n                if (handShape.indexExtended && handShape.bentFingers.length === 3 && \r\n                    handDirection.includes('up') && palmDirection === 'in') {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 'la':\r\n                if (handShape.bentFingers.length >= 3 && palmDirection === 'down') {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 'sol':\r\n                if (handShape.allExtended && palmDirection === 'left' && \r\n                    handDirection === 'forward') {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 'fa':\r\n                if (handShape.bentFingers.length === 3 && handDirection.includes('down')) {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 'mi':\r\n                if (handShape.allExtended && palmDirection === 'down' && \r\n                    handDirection.includes('forward')) {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 're':\r\n                if (handShape.allExtended && palmDirection === 'in' && \r\n                    handDirection.includes('diagonal')) {\r\n                    score += 3;\r\n                }\r\n                break;\r\n            case 'do':\r\n                if (handShape.allBent && handDirection.includes('down')) {\r\n                    score += 3;\r\n                }\r\n                break;\r\n        }\r\n        \r\n        if (score > highestScore) {\r\n            highestScore = score;\r\n            bestMatch = sign;\r\n            confidence = score / 10; // Normalize confidence\r\n        }\r\n    }\r\n    \r\n    return highestScore >= 4 ? {\r\n        sign: bestMatch,\r\n        confidence: Math.min(confidence, 1)\r\n    } : null;\r\n};\r\n\r\n// Export for debugging\r\nexport const analyzeHand = (landmarks) => ({\r\n    shape: analyzeHandShape(landmarks),\r\n    palmDirection: analyzePalmDirection(landmarks),\r\n    handDirection: calculateHandDirection(landmarks)\r\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}