{"ast":null,"code":"// Starting with Do sign based on reference image\nconst fingerJointPairs = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20]\n};\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\n  const joints = fingerIndices.map(idx => landmarks[idx]);\n  const baseToTip = distance(joints[0], joints[joints.length - 1]);\n  const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => sum + distance(joints[i], joints[i + 1]), 0);\n  return 1 - baseToTip / totalLength; // 1 = fully curled, 0 = straight\n};\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst getHandOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const middle_base = landmarks[9];\n  const middle_tip = landmarks[12];\n\n  // Calculate primary hand direction\n  const direction = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n  return {\n    forward: Math.abs(direction.z),\n    up: -direction.y,\n    side: Math.abs(direction.x)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Calculate finger curls\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n\n  // 'Do' recognition based on reference image\n  // Checking for tight fist, held horizontally\n  if (Object.values(curls).every(curl => curl > 0.7) &&\n  // All fingers tightly curled\n  orientation.side > 0.7 &&\n  // Hand oriented horizontally\n  Math.abs(orientation.up) < 0.3) {\n    // Not pointing significantly up or down\n    return {\n      sign: 'do',\n      confidence: Math.min(...Object.values(curls).map(curl => (curl - 0.7) * 3.33)),\n      debug: {\n        curls,\n        orientation\n      }\n    };\n  }\n\n  // Return detailed analysis for debugging\n  return {\n    sign: null,\n    debug: {\n      curls,\n      orientation\n    }\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n  return {\n    fingerCurls: curls,\n    orientation: orientation,\n    isDoPosition: Object.values(curls).every(curl => curl > 0.7) && orientation.side > 0.7 && Math.abs(orientation.up) < 0.3\n  };\n};","map":{"version":3,"names":["fingerJointPairs","thumb","index","middle","ring","pinky","calculateFingerCurl","landmarks","fingerIndices","joints","map","idx","baseToTip","distance","length","totalLength","slice","reduce","sum","_","i","p1","p2","Math","sqrt","pow","x","y","z","getHandOrientation","wrist","middle_base","middle_tip","direction","magnitude","forward","abs","up","side","recognizeKodalySign","curls","orientation","Object","values","every","curl","sign","confidence","min","debug","analyzeHand","fingerCurls","isDoPosition"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Starting with Do sign based on reference image\r\nconst fingerJointPairs = {\r\n    thumb: [1, 2, 3, 4],\r\n    index: [5, 6, 7, 8],\r\n    middle: [9, 10, 11, 12],\r\n    ring: [13, 14, 15, 16],\r\n    pinky: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\r\n    const joints = fingerIndices.map(idx => landmarks[idx]);\r\n    const baseToTip = distance(joints[0], joints[joints.length - 1]);\r\n    const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => \r\n        sum + distance(joints[i], joints[i + 1]), 0);\r\n    return 1 - (baseToTip / totalLength); // 1 = fully curled, 0 = straight\r\n};\r\n\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst getHandOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_base = landmarks[9];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Calculate primary hand direction\r\n    const direction = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    return {\r\n        forward: Math.abs(direction.z),\r\n        up: -direction.y,\r\n        side: Math.abs(direction.x)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Calculate finger curls\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n\r\n    // 'Do' recognition based on reference image\r\n    // Checking for tight fist, held horizontally\r\n    if (Object.values(curls).every(curl => curl > 0.7) && // All fingers tightly curled\r\n        orientation.side > 0.7 && // Hand oriented horizontally\r\n        Math.abs(orientation.up) < 0.3) { // Not pointing significantly up or down\r\n        return {\r\n            sign: 'do',\r\n            confidence: Math.min(\r\n                ...Object.values(curls).map(curl => (curl - 0.7) * 3.33)\r\n            ),\r\n            debug: {\r\n                curls,\r\n                orientation\r\n            }\r\n        };\r\n    }\r\n\r\n    // Return detailed analysis for debugging\r\n    return {\r\n        sign: null,\r\n        debug: {\r\n            curls,\r\n            orientation\r\n        }\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n\r\n    return {\r\n        fingerCurls: curls,\r\n        orientation: orientation,\r\n        isDoPosition: Object.values(curls).every(curl => curl > 0.7) &&\r\n                     orientation.side > 0.7 &&\r\n                     Math.abs(orientation.up) < 0.3\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}