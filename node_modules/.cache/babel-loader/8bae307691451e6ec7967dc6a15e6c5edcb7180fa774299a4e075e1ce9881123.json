{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst getFingerState = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n\n  // Get the vertical direction of the finger\n  const direction = {\n    y: tip.y - base.y\n  };\n\n  // Get finger straightness\n  const straightness = getFingerStraightness(landmarks, fingerIndices);\n  return {\n    direction,\n    straightness,\n    isExtended: straightness > 0.7,\n    isClosed: straightness < 0.4,\n    isUp: direction.y < -0.1,\n    isDown: direction.y > 0.1\n  };\n};\nconst getFingerStraightness = (landmarks, fingerIndices) => {\n  const tip = landmarks[fingerIndices[3]];\n  const base = landmarks[fingerIndices[0]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Direct distance from base to tip\n  const directDist = distance(base, tip);\n\n  // Sum of segments\n  const segmentDist = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n  return directDist / segmentDist;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n\n  // Get the direction vector from wrist to middle finger\n  return {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n};\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const index = landmarks[5];\n  const pinky = landmarks[17];\n\n  // Get vectors along the palm\n  const v1 = {\n    x: index.x - wrist.x,\n    y: index.y - wrist.y,\n    z: index.z - wrist.z\n  };\n  const v2 = {\n    x: pinky.x - wrist.x,\n    y: pinky.y - wrist.y,\n    z: pinky.z - wrist.z\n  };\n\n  // Cross product for palm normal\n  return {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Get finger states\n  const fingers = {\n    thumb: getFingerState(landmarks, FINGERS.THUMB),\n    index: getFingerState(landmarks, FINGERS.INDEX),\n    middle: getFingerState(landmarks, FINGERS.MIDDLE),\n    ring: getFingerState(landmarks, FINGERS.RING),\n    pinky: getFingerState(landmarks, FINGERS.PINKY)\n  };\n\n  // Get hand direction and palm direction\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n\n  // Create debug info\n  const debug = {\n    extensions: {\n      thumb: fingers.thumb.straightness,\n      index: fingers.index.straightness,\n      middle: fingers.middle.straightness,\n      ring: fingers.ring.straightness,\n      pinky: fingers.pinky.straightness\n    },\n    handDirection: {\n      x: handDir.x,\n      y: handDir.y,\n      z: handDir.z,\n      verticalAngle: Math.atan2(-handDir.y, Math.sqrt(handDir.x * handDir.x + handDir.z * handDir.z)) * (180 / Math.PI)\n    },\n    palmOrientation: {\n      isDown: palmDir.y > 0,\n      isUp: palmDir.y < 0,\n      isSide: Math.abs(palmDir.x) > Math.abs(palmDir.y)\n    }\n  };\n\n  // Check for each sign\n  let sign = null;\n  let confidence = 0;\n\n  // TI - index finger up, others closed\n  if (fingers.index.isExtended && fingers.index.isUp && fingers.middle.isClosed && fingers.ring.isClosed && fingers.pinky.isClosed) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  // DO - closed fist\n  else if (fingers.thumb.isClosed && fingers.index.isClosed && fingers.middle.isClosed && fingers.ring.isClosed && fingers.pinky.isClosed) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // RE - flat diagonal up\n  else if (fingers.index.isExtended && fingers.middle.isExtended && fingers.ring.isExtended && fingers.pinky.isExtended && handDir.y < -0.3 && Math.abs(handDir.y) < Math.abs(handDir.x)) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // MI - flat horizontal\n  else if (fingers.index.isExtended && fingers.middle.isExtended && fingers.ring.isExtended && fingers.pinky.isExtended && Math.abs(handDir.y) < 0.3 && palmDir.y > 0) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // FA - thumb down\n  else if (fingers.thumb.isExtended && fingers.thumb.isDown && fingers.index.isClosed && fingers.middle.isClosed && fingers.ring.isClosed && fingers.pinky.isClosed) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // SOL - pointing forward\n  else if (fingers.index.isExtended && fingers.middle.isExtended && fingers.ring.isExtended && fingers.pinky.isExtended && Math.abs(handDir.z) > Math.max(Math.abs(handDir.x), Math.abs(handDir.y)) && palmDir.x > Math.abs(palmDir.y)) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // LA - curved fingers down\n  else if (!fingers.index.isExtended && !fingers.index.isClosed && !fingers.middle.isExtended && !fingers.middle.isClosed && palmDir.y > 0) {\n    sign = 'la';\n    confidence = 0.9;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = {\n    thumb: getFingerState(landmarks, FINGERS.THUMB),\n    index: getFingerState(landmarks, FINGERS.INDEX),\n    middle: getFingerState(landmarks, FINGERS.MIDDLE),\n    ring: getFingerState(landmarks, FINGERS.RING),\n    pinky: getFingerState(landmarks, FINGERS.PINKY)\n  };\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  return {\n    fingers,\n    handDirection: handDir,\n    palmDirection: palmDir\n  };\n};","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","getFingerState","landmarks","fingerIndices","base","tip","direction","y","straightness","getFingerStraightness","isExtended","isClosed","isUp","isDown","mid1","mid2","directDist","distance","segmentDist","p1","p2","Math","sqrt","pow","x","z","getHandDirection","wrist","middle_tip","getPalmDirection","index","pinky","v1","v2","recognizeKodalySign","length","fingers","thumb","middle","ring","handDir","palmDir","debug","extensions","handDirection","verticalAngle","atan2","PI","palmOrientation","isSide","abs","sign","confidence","max","analyzeHand","palmDirection"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst getFingerState = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n\r\n    // Get the vertical direction of the finger\r\n    const direction = {\r\n        y: tip.y - base.y\r\n    };\r\n\r\n    // Get finger straightness\r\n    const straightness = getFingerStraightness(landmarks, fingerIndices);\r\n\r\n    return {\r\n        direction,\r\n        straightness,\r\n        isExtended: straightness > 0.7,\r\n        isClosed: straightness < 0.4,\r\n        isUp: direction.y < -0.1,\r\n        isDown: direction.y > 0.1\r\n    };\r\n};\r\n\r\nconst getFingerStraightness = (landmarks, fingerIndices) => {\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const base = landmarks[fingerIndices[0]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Direct distance from base to tip\r\n    const directDist = distance(base, tip);\r\n    \r\n    // Sum of segments\r\n    const segmentDist = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n\r\n    return directDist / segmentDist;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Get the direction vector from wrist to middle finger\r\n    return {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n};\r\n\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const index = landmarks[5];\r\n    const pinky = landmarks[17];\r\n\r\n    // Get vectors along the palm\r\n    const v1 = {\r\n        x: index.x - wrist.x,\r\n        y: index.y - wrist.y,\r\n        z: index.z - wrist.z\r\n    };\r\n\r\n    const v2 = {\r\n        x: pinky.x - wrist.x,\r\n        y: pinky.y - wrist.y,\r\n        z: pinky.z - wrist.z\r\n    };\r\n\r\n    // Cross product for palm normal\r\n    return {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Get finger states\r\n    const fingers = {\r\n        thumb: getFingerState(landmarks, FINGERS.THUMB),\r\n        index: getFingerState(landmarks, FINGERS.INDEX),\r\n        middle: getFingerState(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerState(landmarks, FINGERS.RING),\r\n        pinky: getFingerState(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    // Get hand direction and palm direction\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    // Create debug info\r\n    const debug = {\r\n        extensions: {\r\n            thumb: fingers.thumb.straightness,\r\n            index: fingers.index.straightness,\r\n            middle: fingers.middle.straightness,\r\n            ring: fingers.ring.straightness,\r\n            pinky: fingers.pinky.straightness\r\n        },\r\n        handDirection: {\r\n            x: handDir.x,\r\n            y: handDir.y,\r\n            z: handDir.z,\r\n            verticalAngle: Math.atan2(-handDir.y, Math.sqrt(handDir.x * handDir.x + handDir.z * handDir.z)) * (180 / Math.PI)\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.y > 0,\r\n            isUp: palmDir.y < 0,\r\n            isSide: Math.abs(palmDir.x) > Math.abs(palmDir.y)\r\n        }\r\n    };\r\n\r\n    // Check for each sign\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // TI - index finger up, others closed\r\n    if (fingers.index.isExtended && \r\n        fingers.index.isUp && \r\n        fingers.middle.isClosed && \r\n        fingers.ring.isClosed && \r\n        fingers.pinky.isClosed) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n    // DO - closed fist\r\n    else if (fingers.thumb.isClosed && \r\n             fingers.index.isClosed && \r\n             fingers.middle.isClosed && \r\n             fingers.ring.isClosed && \r\n             fingers.pinky.isClosed) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // RE - flat diagonal up\r\n    else if (fingers.index.isExtended && \r\n             fingers.middle.isExtended && \r\n             fingers.ring.isExtended && \r\n             fingers.pinky.isExtended && \r\n             handDir.y < -0.3 && \r\n             Math.abs(handDir.y) < Math.abs(handDir.x)) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // MI - flat horizontal\r\n    else if (fingers.index.isExtended && \r\n             fingers.middle.isExtended && \r\n             fingers.ring.isExtended && \r\n             fingers.pinky.isExtended && \r\n             Math.abs(handDir.y) < 0.3 && \r\n             palmDir.y > 0) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // FA - thumb down\r\n    else if (fingers.thumb.isExtended && \r\n             fingers.thumb.isDown && \r\n             fingers.index.isClosed && \r\n             fingers.middle.isClosed && \r\n             fingers.ring.isClosed && \r\n             fingers.pinky.isClosed) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // SOL - pointing forward\r\n    else if (fingers.index.isExtended && \r\n             fingers.middle.isExtended && \r\n             fingers.ring.isExtended && \r\n             fingers.pinky.isExtended && \r\n             Math.abs(handDir.z) > Math.max(Math.abs(handDir.x), Math.abs(handDir.y)) &&\r\n             palmDir.x > Math.abs(palmDir.y)) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // LA - curved fingers down\r\n    else if (!fingers.index.isExtended && \r\n             !fingers.index.isClosed && \r\n             !fingers.middle.isExtended && \r\n             !fingers.middle.isClosed && \r\n             palmDir.y > 0) {\r\n        sign = 'la';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = {\r\n        thumb: getFingerState(landmarks, FINGERS.THUMB),\r\n        index: getFingerState(landmarks, FINGERS.INDEX),\r\n        middle: getFingerState(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerState(landmarks, FINGERS.RING),\r\n        pinky: getFingerState(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    return {\r\n        fingers,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}