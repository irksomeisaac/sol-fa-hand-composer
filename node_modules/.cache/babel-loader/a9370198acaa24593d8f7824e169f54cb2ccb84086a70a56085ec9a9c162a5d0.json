{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst THRESHOLDS = {\n  EXTENSION: 0.6,\n  // Threshold for considering a finger extended\n  CURL: 0.4,\n  // Threshold for considering a finger curled\n  PARTIAL_CURL: 0.5 // Threshold for partially curled fingers (La)\n};\nconst calculateFingerBend = (landmarks, fingerIndices) => {\n  const tip = landmarks[fingerIndices[3]];\n  const base = landmarks[fingerIndices[0]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Calculate straight-line distance from base to tip\n  const directDistance = distance(base, tip);\n\n  // Calculate the sum of the segment lengths\n  const segmentSum = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n\n  // Return the ratio (1 = fully straight, closer to 0 = more bent)\n  return directDistance / segmentSum;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst calculateHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleTip = landmarks[12];\n\n  // Get primary hand direction\n  const direction = {\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  };\n\n  // Normalize the vector\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles\n  const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\n  const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\n\n  // Determine primary direction\n  return {\n    verticalAngle,\n    horizontalAngle,\n    isUp: verticalAngle < 60,\n    isDown: verticalAngle > 120,\n    isHorizontal: verticalAngle >= 60 && verticalAngle <= 120,\n    isForward: Math.abs(horizontalAngle) < 45,\n    direction\n  };\n};\nconst calculatePalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const index = landmarks[5];\n  const pinky = landmarks[17];\n\n  // Calculate palm normal\n  const v1 = {\n    x: index.x - wrist.x,\n    y: index.y - wrist.y,\n    z: index.z - wrist.z\n  };\n  const v2 = {\n    x: pinky.x - wrist.x,\n    y: pinky.y - wrist.y,\n    z: pinky.z - wrist.z\n  };\n\n  // Cross product for normal vector\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n  return {\n    normal,\n    isDown: normal.y > 0.3,\n    isUp: normal.y < -0.3,\n    isSide: Math.abs(normal.x) > 0.5\n  };\n};\nconst analyzeHand = landmarks => {\n  // Calculate finger extensions\n  const extensions = {\n    thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\n    index: calculateFingerBend(landmarks, FINGERS.INDEX),\n    middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\n    ring: calculateFingerBend(landmarks, FINGERS.RING),\n    pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\n  };\n  const handDirection = calculateHandDirection(landmarks);\n  const palmDirection = calculatePalmDirection(landmarks);\n  const mainFingers = [extensions.index, extensions.middle, extensions.ring, extensions.pinky];\n\n  // Calculate hand states\n  const isHandFlat = mainFingers.every(ext => ext > THRESHOLDS.EXTENSION);\n  const isHandClosed = mainFingers.every(ext => ext < THRESHOLDS.CURL);\n  const isPartiallyCurled = mainFingers.every(ext => ext < THRESHOLDS.PARTIAL_CURL && ext > THRESHOLDS.CURL);\n  return {\n    extensions,\n    handDirection,\n    palmDirection,\n    isHandFlat,\n    isHandClosed,\n    isPartiallyCurled,\n    areMainFingersClosed: mainFingers.every(ext => ext < THRESHOLDS.CURL)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const analysis = analyzeHand(landmarks);\n  let sign = null;\n  let confidence = 0;\n\n  // Debug information to return\n  const debug = {\n    extensions: analysis.extensions,\n    handDirection: analysis.handDirection,\n    palmOrientation: analysis.palmDirection\n  };\n\n  // First check general hand shapes\n  if (analysis.isHandClosed && !analysis.extensions.thumb) {\n    // Do - Closed fist horizontal\n    if (analysis.handDirection.isHorizontal) {\n      sign = 'do';\n      confidence = 0.9;\n    }\n  } else if (analysis.isHandFlat) {\n    // Re - Flat hand diagonal up\n    if (analysis.handDirection.verticalAngle > 30 && analysis.handDirection.verticalAngle < 80) {\n      sign = 're';\n      confidence = 0.9;\n    }\n    // Mi - Flat hand horizontal, palm down\n    else if (analysis.handDirection.isHorizontal && analysis.palmDirection.isDown) {\n      sign = 'mi';\n      confidence = 0.9;\n    }\n    // Sol - Flat hand forward, palm side\n    else if (analysis.handDirection.isForward && analysis.palmDirection.isSide) {\n      sign = 'sol';\n      confidence = 0.9;\n    }\n  }\n  // Fa - Thumb extended, fingers closed, pointing down\n  else if (analysis.extensions.thumb > THRESHOLDS.EXTENSION && analysis.areMainFingersClosed && analysis.handDirection.isDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // La - Relaxed curved fingers\n  else if (analysis.isPartiallyCurled && analysis.palmDirection.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  // Ti - Index up, others closed\n  else if (analysis.extensions.index > THRESHOLDS.EXTENSION && analysis.areMainFingersClosed && analysis.handDirection.isUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n\n  // Log recognition details for debugging\n  console.log('Hand Analysis:', {\n    fingerExtensions: analysis.extensions,\n    handDirection: {\n      verticalAngle: analysis.handDirection.verticalAngle,\n      isUp: analysis.handDirection.isUp,\n      isDown: analysis.handDirection.isDown,\n      isHorizontal: analysis.handDirection.isHorizontal,\n      isForward: analysis.handDirection.isForward\n    },\n    palmDirection: {\n      isDown: analysis.palmDirection.isDown,\n      isUp: analysis.palmDirection.isUp,\n      isSide: analysis.palmDirection.isSide\n    },\n    handShape: {\n      isFlat: analysis.isHandFlat,\n      isClosed: analysis.isHandClosed,\n      isPartiallyCurled: analysis.isPartiallyCurled\n    },\n    recognizedSign: sign,\n    confidence: confidence\n  });\n  return {\n    sign,\n    confidence,\n    debug\n  };\n};\nexport { analyzeHand };","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","THRESHOLDS","EXTENSION","CURL","PARTIAL_CURL","calculateFingerBend","landmarks","fingerIndices","tip","base","mid1","mid2","directDistance","distance","segmentSum","p1","p2","Math","sqrt","pow","x","y","z","calculateHandDirection","wrist","middleTip","direction","magnitude","verticalAngle","acos","PI","horizontalAngle","atan2","isUp","isDown","isHorizontal","isForward","abs","calculatePalmDirection","index","pinky","v1","v2","normal","isSide","analyzeHand","extensions","thumb","middle","ring","handDirection","palmDirection","mainFingers","isHandFlat","every","ext","isHandClosed","isPartiallyCurled","areMainFingersClosed","recognizeKodalySign","length","analysis","sign","confidence","debug","palmOrientation","console","log","fingerExtensions","handShape","isFlat","isClosed","recognizedSign"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst THRESHOLDS = {\r\n    EXTENSION: 0.6,    // Threshold for considering a finger extended\r\n    CURL: 0.4,         // Threshold for considering a finger curled\r\n    PARTIAL_CURL: 0.5  // Threshold for partially curled fingers (La)\r\n};\r\n\r\nconst calculateFingerBend = (landmarks, fingerIndices) => {\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const base = landmarks[fingerIndices[0]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Calculate straight-line distance from base to tip\r\n    const directDistance = distance(base, tip);\r\n\r\n    // Calculate the sum of the segment lengths\r\n    const segmentSum = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n\r\n    // Return the ratio (1 = fully straight, closer to 0 = more bent)\r\n    return directDistance / segmentSum;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst calculateHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Get primary hand direction\r\n    const direction = {\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    };\r\n\r\n    // Normalize the vector\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\r\n\r\n    // Determine primary direction\r\n    return {\r\n        verticalAngle,\r\n        horizontalAngle,\r\n        isUp: verticalAngle < 60,\r\n        isDown: verticalAngle > 120,\r\n        isHorizontal: verticalAngle >= 60 && verticalAngle <= 120,\r\n        isForward: Math.abs(horizontalAngle) < 45,\r\n        direction\r\n    };\r\n};\r\n\r\nconst calculatePalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const index = landmarks[5];\r\n    const pinky = landmarks[17];\r\n\r\n    // Calculate palm normal\r\n    const v1 = {\r\n        x: index.x - wrist.x,\r\n        y: index.y - wrist.y,\r\n        z: index.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinky.x - wrist.x,\r\n        y: pinky.y - wrist.y,\r\n        z: pinky.z - wrist.z\r\n    };\r\n\r\n    // Cross product for normal vector\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n\r\n    return {\r\n        normal,\r\n        isDown: normal.y > 0.3,\r\n        isUp: normal.y < -0.3,\r\n        isSide: Math.abs(normal.x) > 0.5\r\n    };\r\n};\r\n\r\nconst analyzeHand = (landmarks) => {\r\n    // Calculate finger extensions\r\n    const extensions = {\r\n        thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\r\n        index: calculateFingerBend(landmarks, FINGERS.INDEX),\r\n        middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\r\n        ring: calculateFingerBend(landmarks, FINGERS.RING),\r\n        pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    const handDirection = calculateHandDirection(landmarks);\r\n    const palmDirection = calculatePalmDirection(landmarks);\r\n\r\n    const mainFingers = [extensions.index, extensions.middle, extensions.ring, extensions.pinky];\r\n    \r\n    // Calculate hand states\r\n    const isHandFlat = mainFingers.every(ext => ext > THRESHOLDS.EXTENSION);\r\n    const isHandClosed = mainFingers.every(ext => ext < THRESHOLDS.CURL);\r\n    const isPartiallyCurled = mainFingers.every(ext => ext < THRESHOLDS.PARTIAL_CURL && ext > THRESHOLDS.CURL);\r\n\r\n    return {\r\n        extensions,\r\n        handDirection,\r\n        palmDirection,\r\n        isHandFlat,\r\n        isHandClosed,\r\n        isPartiallyCurled,\r\n        areMainFingersClosed: mainFingers.every(ext => ext < THRESHOLDS.CURL)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const analysis = analyzeHand(landmarks);\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Debug information to return\r\n    const debug = {\r\n        extensions: analysis.extensions,\r\n        handDirection: analysis.handDirection,\r\n        palmOrientation: analysis.palmDirection\r\n    };\r\n\r\n    // First check general hand shapes\r\n    if (analysis.isHandClosed && !analysis.extensions.thumb) {\r\n        // Do - Closed fist horizontal\r\n        if (analysis.handDirection.isHorizontal) {\r\n            sign = 'do';\r\n            confidence = 0.9;\r\n        }\r\n    }\r\n    else if (analysis.isHandFlat) {\r\n        // Re - Flat hand diagonal up\r\n        if (analysis.handDirection.verticalAngle > 30 && \r\n            analysis.handDirection.verticalAngle < 80) {\r\n            sign = 're';\r\n            confidence = 0.9;\r\n        }\r\n        // Mi - Flat hand horizontal, palm down\r\n        else if (analysis.handDirection.isHorizontal && \r\n                 analysis.palmDirection.isDown) {\r\n            sign = 'mi';\r\n            confidence = 0.9;\r\n        }\r\n        // Sol - Flat hand forward, palm side\r\n        else if (analysis.handDirection.isForward && \r\n                 analysis.palmDirection.isSide) {\r\n            sign = 'sol';\r\n            confidence = 0.9;\r\n        }\r\n    }\r\n    // Fa - Thumb extended, fingers closed, pointing down\r\n    else if (analysis.extensions.thumb > THRESHOLDS.EXTENSION && \r\n             analysis.areMainFingersClosed &&\r\n             analysis.handDirection.isDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // La - Relaxed curved fingers\r\n    else if (analysis.isPartiallyCurled && \r\n             analysis.palmDirection.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    // Ti - Index up, others closed\r\n    else if (analysis.extensions.index > THRESHOLDS.EXTENSION && \r\n             analysis.areMainFingersClosed &&\r\n             analysis.handDirection.isUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    // Log recognition details for debugging\r\n    console.log('Hand Analysis:', {\r\n        fingerExtensions: analysis.extensions,\r\n        handDirection: {\r\n            verticalAngle: analysis.handDirection.verticalAngle,\r\n            isUp: analysis.handDirection.isUp,\r\n            isDown: analysis.handDirection.isDown,\r\n            isHorizontal: analysis.handDirection.isHorizontal,\r\n            isForward: analysis.handDirection.isForward\r\n        },\r\n        palmDirection: {\r\n            isDown: analysis.palmDirection.isDown,\r\n            isUp: analysis.palmDirection.isUp,\r\n            isSide: analysis.palmDirection.isSide\r\n        },\r\n        handShape: {\r\n            isFlat: analysis.isHandFlat,\r\n            isClosed: analysis.isHandClosed,\r\n            isPartiallyCurled: analysis.isPartiallyCurled\r\n        },\r\n        recognizedSign: sign,\r\n        confidence: confidence\r\n    });\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n};\r\n\r\nexport { analyzeHand };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}