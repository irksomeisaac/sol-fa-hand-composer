{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\n\n// Thresholds for recognition\nconst THRESHOLDS = {\n  FINGER_EXTENSION: 0.5,\n  // Consider finger extended if over this value\n  FINGER_CURL: 0.3,\n  // Consider finger curled if under this value\n  VERTICAL_TOLERANCE: 20 // Degrees of tolerance for vertical angles\n};\nconst calculateFingerBend = (landmarks, fingerIndices) => {\n  // Calculate base-to-tip distance\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const currentLength = distance(base, tip);\n\n  // Get the maximum possible length (sum of segments)\n  let totalLength = 0;\n  for (let i = 0; i < 3; i++) {\n    totalLength += distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]);\n  }\n\n  // Return ratio of current length to maximum length\n  return Math.min(currentLength / totalLength, 1);\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\nconst calculateHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n\n  // Get direction vector from wrist to middle finger tip\n  const direction = normalize({\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  });\n\n  // Calculate angles\n  const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\n  const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\n  return {\n    verticalAngle,\n    horizontalAngle,\n    isPointingUp: verticalAngle < 45,\n    isPointingDown: verticalAngle > 135,\n    isPointingForward: Math.abs(horizontalAngle) < 45,\n    isHorizontal: verticalAngle > 60 && verticalAngle < 120\n  };\n};\nconst calculatePalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Get palm normal vector\n  const v1 = normalize({\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  });\n  const v2 = normalize({\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  });\n  const normal = normalize({\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  });\n  const angle = Math.atan2(normal.y, normal.x) * (180 / Math.PI);\n  return {\n    normal,\n    angle,\n    isDown: normal.y > 0.3,\n    isUp: normal.y < -0.3,\n    isSide: Math.abs(normal.x) > 0.5\n  };\n};\nconst analyzeHandShape = landmarks => {\n  // Calculate finger extensions\n  const extensions = {\n    thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\n    index: calculateFingerBend(landmarks, FINGERS.INDEX),\n    middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\n    ring: calculateFingerBend(landmarks, FINGERS.RING),\n    pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\n  };\n  const handDirection = calculateHandDirection(landmarks);\n  const palmDirection = calculatePalmDirection(landmarks);\n  return {\n    extensions,\n    handDirection,\n    palmDirection,\n    // Helper booleans for recognition\n    isHandFlat: Object.values(extensions).every(ext => ext > THRESHOLDS.FINGER_EXTENSION),\n    isHandClosed: Object.values(extensions).every(ext => ext < THRESHOLDS.FINGER_CURL),\n    isIndexOnly: extensions.index > THRESHOLDS.FINGER_EXTENSION && extensions.middle < THRESHOLDS.FINGER_CURL && extensions.ring < THRESHOLDS.FINGER_CURL && extensions.pinky < THRESHOLDS.FINGER_CURL,\n    isThumbOnly: extensions.thumb > THRESHOLDS.FINGER_EXTENSION && extensions.index < THRESHOLDS.FINGER_CURL && extensions.middle < THRESHOLDS.FINGER_CURL && extensions.ring < THRESHOLDS.FINGER_CURL && extensions.pinky < THRESHOLDS.FINGER_CURL\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const analysis = analyzeHandShape(landmarks);\n  let sign = null;\n  let confidence = 0;\n\n  // Debug information to return\n  const debug = {\n    extensions: analysis.extensions,\n    handDirection: analysis.handDirection,\n    palmOrientation: analysis.palmDirection\n  };\n\n  // DO - closed fist, horizontal\n  if (analysis.isHandClosed && analysis.handDirection.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // RE - flat hand diagonal up\n  else if (analysis.isHandFlat && analysis.handDirection.verticalAngle > 30 && analysis.handDirection.verticalAngle < 75) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // MI - flat hand horizontal, palm down\n  else if (analysis.isHandFlat && analysis.handDirection.isHorizontal && analysis.palmDirection.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // FA - thumb out, other fingers closed, pointing down\n  else if (analysis.isThumbOnly && analysis.handDirection.isPointingDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // SOL - flat hand forward, palm side\n  else if (analysis.isHandFlat && analysis.handDirection.isPointingForward && analysis.palmDirection.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // LA - partially curved fingers, palm down\n  else if (!analysis.isHandFlat && !analysis.isHandClosed && analysis.palmDirection.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  // TI - index finger up, others closed\n  else if (analysis.isIndexOnly && analysis.handDirection.isPointingUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  return analyzeHandShape(landmarks);\n};","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","THRESHOLDS","FINGER_EXTENSION","FINGER_CURL","VERTICAL_TOLERANCE","calculateFingerBend","landmarks","fingerIndices","base","tip","currentLength","distance","totalLength","i","Math","min","p1","p2","sqrt","pow","x","y","z","normalize","vector","magnitude","calculateHandDirection","wrist","middleBase","middleTip","direction","verticalAngle","acos","PI","horizontalAngle","atan2","isPointingUp","isPointingDown","isPointingForward","abs","isHorizontal","calculatePalmDirection","indexBase","pinkyBase","v1","v2","normal","angle","isDown","isUp","isSide","analyzeHandShape","extensions","thumb","index","middle","ring","pinky","handDirection","palmDirection","isHandFlat","Object","values","every","ext","isHandClosed","isIndexOnly","isThumbOnly","recognizeKodalySign","length","analysis","sign","confidence","debug","palmOrientation","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\n// Thresholds for recognition\r\nconst THRESHOLDS = {\r\n    FINGER_EXTENSION: 0.5,  // Consider finger extended if over this value\r\n    FINGER_CURL: 0.3,      // Consider finger curled if under this value\r\n    VERTICAL_TOLERANCE: 20, // Degrees of tolerance for vertical angles\r\n};\r\n\r\nconst calculateFingerBend = (landmarks, fingerIndices) => {\r\n    // Calculate base-to-tip distance\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const currentLength = distance(base, tip);\r\n\r\n    // Get the maximum possible length (sum of segments)\r\n    let totalLength = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n        totalLength += distance(\r\n            landmarks[fingerIndices[i]],\r\n            landmarks[fingerIndices[i + 1]]\r\n        );\r\n    }\r\n\r\n    // Return ratio of current length to maximum length\r\n    return Math.min(currentLength / totalLength, 1);\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\nconst calculateHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Get direction vector from wrist to middle finger tip\r\n    const direction = normalize({\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    });\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        verticalAngle,\r\n        horizontalAngle,\r\n        isPointingUp: verticalAngle < 45,\r\n        isPointingDown: verticalAngle > 135,\r\n        isPointingForward: Math.abs(horizontalAngle) < 45,\r\n        isHorizontal: verticalAngle > 60 && verticalAngle < 120\r\n    };\r\n};\r\n\r\nconst calculatePalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Get palm normal vector\r\n    const v1 = normalize({\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    });\r\n    \r\n    const v2 = normalize({\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    });\r\n\r\n    const normal = normalize({\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    });\r\n\r\n    const angle = Math.atan2(normal.y, normal.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        normal,\r\n        angle,\r\n        isDown: normal.y > 0.3,\r\n        isUp: normal.y < -0.3,\r\n        isSide: Math.abs(normal.x) > 0.5\r\n    };\r\n};\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    // Calculate finger extensions\r\n    const extensions = {\r\n        thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\r\n        index: calculateFingerBend(landmarks, FINGERS.INDEX),\r\n        middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\r\n        ring: calculateFingerBend(landmarks, FINGERS.RING),\r\n        pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    const handDirection = calculateHandDirection(landmarks);\r\n    const palmDirection = calculatePalmDirection(landmarks);\r\n\r\n    return {\r\n        extensions,\r\n        handDirection,\r\n        palmDirection,\r\n        // Helper booleans for recognition\r\n        isHandFlat: Object.values(extensions).every(ext => ext > THRESHOLDS.FINGER_EXTENSION),\r\n        isHandClosed: Object.values(extensions).every(ext => ext < THRESHOLDS.FINGER_CURL),\r\n        isIndexOnly: extensions.index > THRESHOLDS.FINGER_EXTENSION &&\r\n                    extensions.middle < THRESHOLDS.FINGER_CURL &&\r\n                    extensions.ring < THRESHOLDS.FINGER_CURL &&\r\n                    extensions.pinky < THRESHOLDS.FINGER_CURL,\r\n        isThumbOnly: extensions.thumb > THRESHOLDS.FINGER_EXTENSION &&\r\n                    extensions.index < THRESHOLDS.FINGER_CURL &&\r\n                    extensions.middle < THRESHOLDS.FINGER_CURL &&\r\n                    extensions.ring < THRESHOLDS.FINGER_CURL &&\r\n                    extensions.pinky < THRESHOLDS.FINGER_CURL\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const analysis = analyzeHandShape(landmarks);\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Debug information to return\r\n    const debug = {\r\n        extensions: analysis.extensions,\r\n        handDirection: analysis.handDirection,\r\n        palmOrientation: analysis.palmDirection\r\n    };\r\n\r\n    // DO - closed fist, horizontal\r\n    if (analysis.isHandClosed && analysis.handDirection.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // RE - flat hand diagonal up\r\n    else if (analysis.isHandFlat && \r\n             analysis.handDirection.verticalAngle > 30 && \r\n             analysis.handDirection.verticalAngle < 75) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // MI - flat hand horizontal, palm down\r\n    else if (analysis.isHandFlat && \r\n             analysis.handDirection.isHorizontal && \r\n             analysis.palmDirection.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // FA - thumb out, other fingers closed, pointing down\r\n    else if (analysis.isThumbOnly && analysis.handDirection.isPointingDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // SOL - flat hand forward, palm side\r\n    else if (analysis.isHandFlat && \r\n             analysis.handDirection.isPointingForward && \r\n             analysis.palmDirection.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // LA - partially curved fingers, palm down\r\n    else if (!analysis.isHandFlat && \r\n             !analysis.isHandClosed && \r\n             analysis.palmDirection.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    // TI - index finger up, others closed\r\n    else if (analysis.isIndexOnly && analysis.handDirection.isPointingUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    return analyzeHandShape(landmarks);\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}