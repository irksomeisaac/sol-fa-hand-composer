{"ast":null,"code":"// Kodály hand sign positions database - Adjusted for top-down camera view\nexport const kodalySigns = {\n  'do': {\n    description: 'Closed fist, palm facing up',\n    keyFeatures: {\n      fingersClose: true,\n      palmFacing: 'up',\n      relativeHeight: 'low'\n    }\n  },\n  're': {\n    description: 'Flat hand horizontal, palm up, fingers together',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'up',\n      handRotation: 'horizontal'\n    }\n  },\n  'mi': {\n    description: 'Flat hand horizontal, palm up',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'up',\n      handRotation: 'horizontal'\n    }\n  },\n  'fa': {\n    description: 'Fist with thumb pointing up (from camera view)',\n    keyFeatures: {\n      fingersClose: true,\n      thumbExtended: true,\n      thumbDirection: 'up'\n    }\n  },\n  'sol': {\n    description: 'Hand pointing toward camera, palm facing sideways',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      palmFacing: 'side',\n      handDirection: 'forward'\n    }\n  },\n  'la': {\n    description: 'Hand relaxed, palm up, fingers slightly curved',\n    keyFeatures: {\n      fingersRelaxed: true,\n      palmFacing: 'up',\n      handRotation: 'horizontal'\n    }\n  },\n  'ti': {\n    description: 'Hand angled toward camera, fingers pointing forward',\n    keyFeatures: {\n      fingersExtended: true,\n      fingersTogether: true,\n      handDirection: 'forward'\n    }\n  }\n};\n\n// Helper functions to analyze hand landmarks\nconst analyzePalmFacing = landmarks => {\n  // Calculate palm normal vector using cross product of palm vectors\n  const wrist = landmarks[0];\n  const index_base = landmarks[5];\n  const pinky_base = landmarks[17];\n\n  // Vector from wrist to index base\n  const v1 = {\n    x: index_base.x - wrist.x,\n    y: index_base.y - wrist.y,\n    z: index_base.z - wrist.z\n  };\n\n  // Vector from wrist to pinky base\n  const v2 = {\n    x: pinky_base.x - wrist.x,\n    y: pinky_base.y - wrist.y,\n    z: pinky_base.z - wrist.z\n  };\n\n  // Cross product to get palm normal\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize the vector\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n\n  // Adjusted for top-down view\n  if (Math.abs(normal.y) > 0.7) {\n    return normal.y < 0 ? 'up' : 'down'; // Reversed for top-down view\n  }\n  if (Math.abs(normal.z) > 0.7) {\n    return normal.z > 0 ? 'back' : 'front';\n  }\n  return 'side';\n};\nconst analyzeFingerExtension = landmarks => {\n  const fingerTips = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\n  const fingerBases = [5, 9, 13, 17]; // Corresponding bases\n  const extended = [];\n  for (let i = 0; i < fingerTips.length; i++) {\n    const tip = landmarks[fingerTips[i]];\n    const base = landmarks[fingerBases[i]];\n    const distance = Math.sqrt(Math.pow(tip.x - base.x, 2) + Math.pow(tip.y - base.y, 2) + Math.pow(tip.z - base.z, 2));\n    extended.push(distance > 0.1); // Threshold for considering finger extended\n  }\n  return extended;\n};\nconst analyzeHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleFinger = landmarks[12];\n  const direction = {\n    x: middleFinger.x - wrist.x,\n    y: middleFinger.y - wrist.y,\n    z: middleFinger.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Adjusted for top-down view\n  const absX = Math.abs(direction.x);\n  const absY = Math.abs(direction.y);\n  const absZ = Math.abs(direction.z);\n  if (absZ > absX && absZ > absY) {\n    return direction.z > 0 ? 'forward' : 'backward';\n  }\n  if (absY > absX && absY > absZ) {\n    return direction.y < 0 ? 'up' : 'down'; // Reversed for top-down view\n  }\n  return 'side';\n};\nexport const analyzeHandPosition = landmarks => {\n  // Adjust landmarks for top-down perspective\n  const adjustedLandmarks = landmarks.map(landmark => ({\n    x: landmark.x,\n    y: -landmark.y,\n    // Flip the y coordinate for top-down view\n    z: landmark.z\n  }));\n  const palmFacing = analyzePalmFacing(adjustedLandmarks);\n  const fingerExtension = analyzeFingerExtension(adjustedLandmarks);\n  const handDirection = analyzeHandDirection(adjustedLandmarks);\n  const allFingersExtended = fingerExtension.every(extended => extended);\n  const noFingersExtended = fingerExtension.every(extended => !extended);\n\n  // Adjust height calculation for top-down view\n  const relativeHeight = adjustedLandmarks[0].y > 0.6 ? 'low' : 'high';\n  return {\n    palmFacing,\n    fingerExtension,\n    handDirection,\n    allFingersExtended,\n    noFingersExtended,\n    relativeHeight\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  const analysis = analyzeHandPosition(landmarks);\n  let bestMatch = null;\n  let highestScore = 0;\n  let confidence = 0;\n  for (const [sign, data] of Object.entries(kodalySigns)) {\n    let score = 0;\n    const features = data.keyFeatures;\n\n    // Adjusted scoring for top-down view\n    if (features.fingersClose && analysis.noFingersExtended) score += 1;\n    if (features.fingersExtended && analysis.allFingersExtended) score += 1;\n    if (features.palmFacing === analysis.palmFacing) score += 1.5; // Increased weight for palm orientation\n    if (features.handDirection === analysis.handDirection) score += 1;\n\n    // Special cases adjusted for top-down view\n    switch (sign) {\n      case 'do':\n        if (analysis.noFingersExtended && analysis.palmFacing === 'up') score += 2;\n        break;\n      case 'fa':\n        if (analysis.noFingersExtended && analysis.handDirection === 'up') score += 2;\n        break;\n      case 'sol':\n        if (analysis.handDirection === 'forward' && analysis.palmFacing === 'side') score += 2;\n        break;\n      case 'ti':\n        if (analysis.handDirection === 'forward' && analysis.allFingersExtended) score += 2;\n        break;\n    }\n    if (score > highestScore) {\n      highestScore = score;\n      bestMatch = sign;\n      confidence = score / 6; // Normalize confidence score\n    }\n  }\n\n  // Only return a match if we're confident enough\n  return highestScore >= 2 ? {\n    sign: bestMatch,\n    confidence: confidence\n  } : null;\n};","map":{"version":3,"names":["kodalySigns","description","keyFeatures","fingersClose","palmFacing","relativeHeight","fingersExtended","fingersTogether","handRotation","thumbExtended","thumbDirection","handDirection","fingersRelaxed","analyzePalmFacing","landmarks","wrist","index_base","pinky_base","v1","x","y","z","v2","normal","magnitude","Math","sqrt","abs","analyzeFingerExtension","fingerTips","fingerBases","extended","i","length","tip","base","distance","pow","push","analyzeHandDirection","middleFinger","direction","absX","absY","absZ","analyzeHandPosition","adjustedLandmarks","map","landmark","fingerExtension","allFingersExtended","every","noFingersExtended","recognizeKodalySign","analysis","bestMatch","highestScore","confidence","sign","data","Object","entries","score","features"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign positions database - Adjusted for top-down camera view\r\nexport const kodalySigns = {\r\n    'do': {\r\n        description: 'Closed fist, palm facing up',\r\n        keyFeatures: {\r\n            fingersClose: true,\r\n            palmFacing: 'up',\r\n            relativeHeight: 'low'\r\n        }\r\n    },\r\n    're': {\r\n        description: 'Flat hand horizontal, palm up, fingers together',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'up',\r\n            handRotation: 'horizontal'\r\n        }\r\n    },\r\n    'mi': {\r\n        description: 'Flat hand horizontal, palm up',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'up',\r\n            handRotation: 'horizontal'\r\n        }\r\n    },\r\n    'fa': {\r\n        description: 'Fist with thumb pointing up (from camera view)',\r\n        keyFeatures: {\r\n            fingersClose: true,\r\n            thumbExtended: true,\r\n            thumbDirection: 'up'\r\n        }\r\n    },\r\n    'sol': {\r\n        description: 'Hand pointing toward camera, palm facing sideways',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            palmFacing: 'side',\r\n            handDirection: 'forward'\r\n        }\r\n    },\r\n    'la': {\r\n        description: 'Hand relaxed, palm up, fingers slightly curved',\r\n        keyFeatures: {\r\n            fingersRelaxed: true,\r\n            palmFacing: 'up',\r\n            handRotation: 'horizontal'\r\n        }\r\n    },\r\n    'ti': {\r\n        description: 'Hand angled toward camera, fingers pointing forward',\r\n        keyFeatures: {\r\n            fingersExtended: true,\r\n            fingersTogether: true,\r\n            handDirection: 'forward'\r\n        }\r\n    }\r\n};\r\n\r\n// Helper functions to analyze hand landmarks\r\nconst analyzePalmFacing = (landmarks) => {\r\n    // Calculate palm normal vector using cross product of palm vectors\r\n    const wrist = landmarks[0];\r\n    const index_base = landmarks[5];\r\n    const pinky_base = landmarks[17];\r\n    \r\n    // Vector from wrist to index base\r\n    const v1 = {\r\n        x: index_base.x - wrist.x,\r\n        y: index_base.y - wrist.y,\r\n        z: index_base.z - wrist.z\r\n    };\r\n    \r\n    // Vector from wrist to pinky base\r\n    const v2 = {\r\n        x: pinky_base.x - wrist.x,\r\n        y: pinky_base.y - wrist.y,\r\n        z: pinky_base.z - wrist.z\r\n    };\r\n    \r\n    // Cross product to get palm normal\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n    \r\n    // Normalize the vector\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n    \r\n    // Adjusted for top-down view\r\n    if (Math.abs(normal.y) > 0.7) {\r\n        return normal.y < 0 ? 'up' : 'down'; // Reversed for top-down view\r\n    }\r\n    if (Math.abs(normal.z) > 0.7) {\r\n        return normal.z > 0 ? 'back' : 'front';\r\n    }\r\n    return 'side';\r\n};\r\n\r\nconst analyzeFingerExtension = (landmarks) => {\r\n    const fingerTips = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\r\n    const fingerBases = [5, 9, 13, 17]; // Corresponding bases\r\n    const extended = [];\r\n    \r\n    for (let i = 0; i < fingerTips.length; i++) {\r\n        const tip = landmarks[fingerTips[i]];\r\n        const base = landmarks[fingerBases[i]];\r\n        const distance = Math.sqrt(\r\n            Math.pow(tip.x - base.x, 2) +\r\n            Math.pow(tip.y - base.y, 2) +\r\n            Math.pow(tip.z - base.z, 2)\r\n        );\r\n        extended.push(distance > 0.1); // Threshold for considering finger extended\r\n    }\r\n    \r\n    return extended;\r\n};\r\n\r\nconst analyzeHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleFinger = landmarks[12];\r\n    \r\n    const direction = {\r\n        x: middleFinger.x - wrist.x,\r\n        y: middleFinger.y - wrist.y,\r\n        z: middleFinger.z - wrist.z\r\n    };\r\n    \r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n    \r\n    // Adjusted for top-down view\r\n    const absX = Math.abs(direction.x);\r\n    const absY = Math.abs(direction.y);\r\n    const absZ = Math.abs(direction.z);\r\n    \r\n    if (absZ > absX && absZ > absY) {\r\n        return direction.z > 0 ? 'forward' : 'backward';\r\n    }\r\n    if (absY > absX && absY > absZ) {\r\n        return direction.y < 0 ? 'up' : 'down'; // Reversed for top-down view\r\n    }\r\n    return 'side';\r\n};\r\n\r\nexport const analyzeHandPosition = (landmarks) => {\r\n    // Adjust landmarks for top-down perspective\r\n    const adjustedLandmarks = landmarks.map(landmark => ({\r\n        x: landmark.x,\r\n        y: -landmark.y, // Flip the y coordinate for top-down view\r\n        z: landmark.z\r\n    }));\r\n\r\n    const palmFacing = analyzePalmFacing(adjustedLandmarks);\r\n    const fingerExtension = analyzeFingerExtension(adjustedLandmarks);\r\n    const handDirection = analyzeHandDirection(adjustedLandmarks);\r\n    const allFingersExtended = fingerExtension.every(extended => extended);\r\n    const noFingersExtended = fingerExtension.every(extended => !extended);\r\n    \r\n    // Adjust height calculation for top-down view\r\n    const relativeHeight = adjustedLandmarks[0].y > 0.6 ? 'low' : 'high';\r\n    \r\n    return {\r\n        palmFacing,\r\n        fingerExtension,\r\n        handDirection,\r\n        allFingersExtended,\r\n        noFingersExtended,\r\n        relativeHeight\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    const analysis = analyzeHandPosition(landmarks);\r\n    let bestMatch = null;\r\n    let highestScore = 0;\r\n    let confidence = 0;\r\n    \r\n    for (const [sign, data] of Object.entries(kodalySigns)) {\r\n        let score = 0;\r\n        const features = data.keyFeatures;\r\n        \r\n        // Adjusted scoring for top-down view\r\n        if (features.fingersClose && analysis.noFingersExtended) score += 1;\r\n        if (features.fingersExtended && analysis.allFingersExtended) score += 1;\r\n        if (features.palmFacing === analysis.palmFacing) score += 1.5; // Increased weight for palm orientation\r\n        if (features.handDirection === analysis.handDirection) score += 1;\r\n        \r\n        // Special cases adjusted for top-down view\r\n        switch(sign) {\r\n            case 'do':\r\n                if (analysis.noFingersExtended && analysis.palmFacing === 'up') score += 2;\r\n                break;\r\n            case 'fa':\r\n                if (analysis.noFingersExtended && analysis.handDirection === 'up') score += 2;\r\n                break;\r\n            case 'sol':\r\n                if (analysis.handDirection === 'forward' && analysis.palmFacing === 'side') score += 2;\r\n                break;\r\n            case 'ti':\r\n                if (analysis.handDirection === 'forward' && analysis.allFingersExtended) score += 2;\r\n                break;\r\n        }\r\n        \r\n        if (score > highestScore) {\r\n            highestScore = score;\r\n            bestMatch = sign;\r\n            confidence = score / 6; // Normalize confidence score\r\n        }\r\n    }\r\n    \r\n    // Only return a match if we're confident enough\r\n    return highestScore >= 2 ? {\r\n        sign: bestMatch,\r\n        confidence: confidence\r\n    } : null;\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}