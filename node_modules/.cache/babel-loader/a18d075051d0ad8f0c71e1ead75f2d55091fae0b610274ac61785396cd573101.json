{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  // Get the base-to-tip distance\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const currentLength = distance(base, tip);\n\n  // Get the sum of segment lengths\n  let totalLength = 0;\n  for (let i = 0; i < 3; i++) {\n    totalLength += distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]);\n  }\n\n  // Compare actual length to maximum possible length\n  // Add a small normalization factor to prevent values over 1\n  const extensionRatio = Math.min(currentLength / (totalLength * 0.8), 1);\n  return extensionRatio;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n\n// ... rest of your code remains the same until analyzeHandShape function\n\nconst analyzeHandShape = landmarks => {\n  // Calculate finger extensions with adjusted normalization\n  const extensions = {\n    thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n    index: getFingerExtension(landmarks, FINGERS.INDEX),\n    middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n    ring: getFingerExtension(landmarks, FINGERS.RING),\n    pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n  };\n\n  // Get direction of index finger (important for several signs)\n  const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\n  const palmOrientation = getPalmOrientation(landmarks);\n\n  // Adjusted thresholds for better distinction\n  const EXTENSION_THRESHOLD = 0.7;\n  const CURL_THRESHOLD = 0.3;\n  return {\n    extensions,\n    indexDirection,\n    palmOrientation,\n    isIndexPointingUp: indexDirection.isPointingUp && extensions.index > EXTENSION_THRESHOLD,\n    areOtherFingersClosed: extensions.middle < CURL_THRESHOLD && extensions.ring < CURL_THRESHOLD && extensions.pinky < CURL_THRESHOLD,\n    areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\n    areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\n  };\n};\n\n// ... rest of your code remains the same ...","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","getFingerExtension","landmarks","fingerIndices","base","tip","currentLength","distance","totalLength","i","extensionRatio","Math","min","p1","p2","sqrt","pow","x","y","z","analyzeHandShape","extensions","thumb","index","middle","ring","pinky","indexDirection","getFingerDirection","palmOrientation","getPalmOrientation","EXTENSION_THRESHOLD","CURL_THRESHOLD","isIndexPointingUp","isPointingUp","areOtherFingersClosed","areAllFingersClosed","Object","values","every","ext","areAllFingersExtended"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    // Get the base-to-tip distance\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const currentLength = distance(base, tip);\r\n\r\n    // Get the sum of segment lengths\r\n    let totalLength = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n        totalLength += distance(\r\n            landmarks[fingerIndices[i]],\r\n            landmarks[fingerIndices[i + 1]]\r\n        );\r\n    }\r\n\r\n    // Compare actual length to maximum possible length\r\n    // Add a small normalization factor to prevent values over 1\r\n    const extensionRatio = Math.min(currentLength / (totalLength * 0.8), 1);\r\n    return extensionRatio;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\n// ... rest of your code remains the same until analyzeHandShape function\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    // Calculate finger extensions with adjusted normalization\r\n    const extensions = {\r\n        thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n        index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n        middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerExtension(landmarks, FINGERS.RING),\r\n        pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    // Get direction of index finger (important for several signs)\r\n    const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n\r\n    // Adjusted thresholds for better distinction\r\n    const EXTENSION_THRESHOLD = 0.7;\r\n    const CURL_THRESHOLD = 0.3;\r\n\r\n    return {\r\n        extensions,\r\n        indexDirection,\r\n        palmOrientation,\r\n        isIndexPointingUp: indexDirection.isPointingUp && extensions.index > EXTENSION_THRESHOLD,\r\n        areOtherFingersClosed: \r\n            extensions.middle < CURL_THRESHOLD && \r\n            extensions.ring < CURL_THRESHOLD && \r\n            extensions.pinky < CURL_THRESHOLD,\r\n        areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\r\n        areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\r\n    };\r\n};\r\n\r\n// ... rest of your code remains the same ...\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}