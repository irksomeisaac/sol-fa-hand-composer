{"ast":null,"code":"// Enhanced voice command recognition system for music notation\nexport class VoiceCommandManager {\n  constructor(onCommandCallback) {\n    this.recognition = null;\n    this.isListening = false;\n    this.onCommand = onCommandCallback;\n    this.commands = {\n      // Note addition\n      'add': 'ADD_NOTE',\n      'add note': 'ADD_NOTE',\n      'place': 'ADD_NOTE',\n      'put': 'ADD_NOTE',\n      // Rest addition\n      'add rest': 'ADD_REST',\n      'rest': 'ADD_REST',\n      'pause': 'ADD_REST',\n      'silence': 'ADD_REST',\n      // Note durations\n      'whole note': 'SET_WHOLE_NOTE',\n      'half note': 'SET_HALF_NOTE',\n      'quarter note': 'SET_QUARTER_NOTE',\n      'eighth note': 'SET_EIGHTH_NOTE',\n      // Rest durations\n      'whole rest': 'SET_WHOLE_REST',\n      'half rest': 'SET_HALF_REST',\n      'quarter rest': 'SET_QUARTER_REST',\n      'eighth rest': 'SET_EIGHTH_REST',\n      // Octave controls\n      'octave up': 'OCTAVE_UP',\n      'higher': 'OCTAVE_UP',\n      'up': 'OCTAVE_UP',\n      'octave down': 'OCTAVE_DOWN',\n      'lower': 'OCTAVE_DOWN',\n      'down': 'OCTAVE_DOWN',\n      // Playback controls\n      'play': 'PLAY_COMPOSITION',\n      'play back': 'PLAY_COMPOSITION',\n      'playback': 'PLAY_COMPOSITION',\n      'stop': 'STOP_PLAYBACK',\n      'stop playing': 'STOP_PLAYBACK',\n      // Editing controls\n      'undo': 'UNDO',\n      'remove': 'UNDO',\n      'delete': 'UNDO',\n      'back': 'UNDO',\n      'clear': 'CLEAR_ALL',\n      'reset': 'CLEAR_ALL',\n      'new': 'CLEAR_ALL',\n      'start over': 'CLEAR_ALL',\n      // Tempo controls\n      'faster': 'TEMPO_UP',\n      'speed up': 'TEMPO_UP',\n      'slower': 'TEMPO_DOWN',\n      'slow down': 'TEMPO_DOWN'\n    };\n  }\n  initialize() {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      console.warn('Speech recognition not supported in this browser');\n      return false;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = false;\n    this.recognition.lang = 'en-US';\n    this.recognition.maxAlternatives = 1;\n    this.recognition.onresult = event => {\n      const lastResult = event.results[event.results.length - 1];\n      if (lastResult.isFinal) {\n        const transcript = lastResult[0].transcript.toLowerCase().trim();\n        this.processCommand(transcript);\n      }\n    };\n    this.recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      if (event.error === 'no-speech' && this.isListening) {\n        // Restart after brief pause\n        setTimeout(() => {\n          if (this.isListening) {\n            this.startListening();\n          }\n        }, 1000);\n      }\n    };\n    this.recognition.onend = () => {\n      // Automatically restart if we should be listening\n      if (this.isListening) {\n        setTimeout(() => {\n          this.startListening();\n        }, 100);\n      }\n    };\n    return true;\n  }\n  processCommand(transcript) {\n    console.log('Voice input:', transcript);\n\n    // Check for exact matches first\n    if (this.commands[transcript]) {\n      console.log('Exact match command:', this.commands[transcript]);\n      this.onCommand(this.commands[transcript], transcript);\n      return;\n    }\n\n    // Check for partial matches\n    for (const [phrase, command] of Object.entries(this.commands)) {\n      if (transcript.includes(phrase)) {\n        console.log('Partial match command:', command, 'from phrase:', phrase);\n        this.onCommand(command, transcript);\n        return;\n      }\n    }\n    console.log('No command recognized for:', transcript);\n  }\n  startListening() {\n    if (!this.recognition) {\n      if (!this.initialize()) {\n        return false;\n      }\n    }\n    try {\n      if (this.isListening) {\n        this.recognition.stop();\n      }\n      this.recognition.start();\n      this.isListening = true;\n      console.log('Voice recognition started');\n      return true;\n    } catch (error) {\n      console.error('Error starting voice recognition:', error);\n      return false;\n    }\n  }\n  stopListening() {\n    if (this.recognition && this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n      console.log('Voice recognition stopped');\n    }\n  }\n  toggle() {\n    if (this.isListening) {\n      this.stopListening();\n    } else {\n      this.startListening();\n    }\n    return this.isListening;\n  }\n  getStatus() {\n    return {\n      isListening: this.isListening,\n      isSupported: 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window\n    };\n  }\n}","map":{"version":3,"names":["VoiceCommandManager","constructor","onCommandCallback","recognition","isListening","onCommand","commands","initialize","window","console","warn","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","maxAlternatives","onresult","event","lastResult","results","length","isFinal","transcript","toLowerCase","trim","processCommand","onerror","error","setTimeout","startListening","onend","log","phrase","command","Object","entries","includes","stop","start","stopListening","toggle","getStatus","isSupported"],"sources":["C:/Users/user/sol-fa-app/src/utils/voiceCommands.js"],"sourcesContent":["// Enhanced voice command recognition system for music notation\r\nexport class VoiceCommandManager {\r\n    constructor(onCommandCallback) {\r\n        this.recognition = null;\r\n        this.isListening = false;\r\n        this.onCommand = onCommandCallback;\r\n        this.commands = {\r\n            // Note addition\r\n            'add': 'ADD_NOTE',\r\n            'add note': 'ADD_NOTE',\r\n            'place': 'ADD_NOTE',\r\n            'put': 'ADD_NOTE',\r\n            \r\n            // Rest addition\r\n            'add rest': 'ADD_REST',\r\n            'rest': 'ADD_REST',\r\n            'pause': 'ADD_REST',\r\n            'silence': 'ADD_REST',\r\n            \r\n            // Note durations\r\n            'whole note': 'SET_WHOLE_NOTE',\r\n            'half note': 'SET_HALF_NOTE',\r\n            'quarter note': 'SET_QUARTER_NOTE',\r\n            'eighth note': 'SET_EIGHTH_NOTE',\r\n            \r\n            // Rest durations\r\n            'whole rest': 'SET_WHOLE_REST',\r\n            'half rest': 'SET_HALF_REST',\r\n            'quarter rest': 'SET_QUARTER_REST',\r\n            'eighth rest': 'SET_EIGHTH_REST',\r\n            \r\n            // Octave controls\r\n            'octave up': 'OCTAVE_UP',\r\n            'higher': 'OCTAVE_UP',\r\n            'up': 'OCTAVE_UP',\r\n            'octave down': 'OCTAVE_DOWN',\r\n            'lower': 'OCTAVE_DOWN',\r\n            'down': 'OCTAVE_DOWN',\r\n            \r\n            // Playback controls\r\n            'play': 'PLAY_COMPOSITION',\r\n            'play back': 'PLAY_COMPOSITION',\r\n            'playback': 'PLAY_COMPOSITION',\r\n            'stop': 'STOP_PLAYBACK',\r\n            'stop playing': 'STOP_PLAYBACK',\r\n            \r\n            // Editing controls\r\n            'undo': 'UNDO',\r\n            'remove': 'UNDO',\r\n            'delete': 'UNDO',\r\n            'back': 'UNDO',\r\n            'clear': 'CLEAR_ALL',\r\n            'reset': 'CLEAR_ALL',\r\n            'new': 'CLEAR_ALL',\r\n            'start over': 'CLEAR_ALL',\r\n            \r\n            // Tempo controls\r\n            'faster': 'TEMPO_UP',\r\n            'speed up': 'TEMPO_UP',\r\n            'slower': 'TEMPO_DOWN',\r\n            'slow down': 'TEMPO_DOWN'\r\n        };\r\n    }\r\n\r\n    initialize() {\r\n        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\r\n            console.warn('Speech recognition not supported in this browser');\r\n            return false;\r\n        }\r\n\r\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        this.recognition = new SpeechRecognition();\r\n        \r\n        this.recognition.continuous = true;\r\n        this.recognition.interimResults = false;\r\n        this.recognition.lang = 'en-US';\r\n        this.recognition.maxAlternatives = 1;\r\n\r\n        this.recognition.onresult = (event) => {\r\n            const lastResult = event.results[event.results.length - 1];\r\n            if (lastResult.isFinal) {\r\n                const transcript = lastResult[0].transcript.toLowerCase().trim();\r\n                this.processCommand(transcript);\r\n            }\r\n        };\r\n\r\n        this.recognition.onerror = (event) => {\r\n            console.error('Speech recognition error:', event.error);\r\n            if (event.error === 'no-speech' && this.isListening) {\r\n                // Restart after brief pause\r\n                setTimeout(() => {\r\n                    if (this.isListening) {\r\n                        this.startListening();\r\n                    }\r\n                }, 1000);\r\n            }\r\n        };\r\n\r\n        this.recognition.onend = () => {\r\n            // Automatically restart if we should be listening\r\n            if (this.isListening) {\r\n                setTimeout(() => {\r\n                    this.startListening();\r\n                }, 100);\r\n            }\r\n        };\r\n\r\n        return true;\r\n    }\r\n\r\n    processCommand(transcript) {\r\n        console.log('Voice input:', transcript);\r\n        \r\n        // Check for exact matches first\r\n        if (this.commands[transcript]) {\r\n            console.log('Exact match command:', this.commands[transcript]);\r\n            this.onCommand(this.commands[transcript], transcript);\r\n            return;\r\n        }\r\n        \r\n        // Check for partial matches\r\n        for (const [phrase, command] of Object.entries(this.commands)) {\r\n            if (transcript.includes(phrase)) {\r\n                console.log('Partial match command:', command, 'from phrase:', phrase);\r\n                this.onCommand(command, transcript);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        console.log('No command recognized for:', transcript);\r\n    }\r\n\r\n    startListening() {\r\n        if (!this.recognition) {\r\n            if (!this.initialize()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        try {\r\n            if (this.isListening) {\r\n                this.recognition.stop();\r\n            }\r\n            this.recognition.start();\r\n            this.isListening = true;\r\n            console.log('Voice recognition started');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error starting voice recognition:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    stopListening() {\r\n        if (this.recognition && this.isListening) {\r\n            this.recognition.stop();\r\n            this.isListening = false;\r\n            console.log('Voice recognition stopped');\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        if (this.isListening) {\r\n            this.stopListening();\r\n        } else {\r\n            this.startListening();\r\n        }\r\n        return this.isListening;\r\n    }\r\n\r\n    getStatus() {\r\n        return {\r\n            isListening: this.isListening,\r\n            isSupported: 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window\r\n        };\r\n    }\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}