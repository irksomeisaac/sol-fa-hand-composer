{"ast":null,"code":"// Music notation and composition management\nexport const NOTE_DURATIONS = {\n  WHOLE: {\n    name: 'whole',\n    beats: 4,\n    symbol: '𝅝'\n  },\n  HALF: {\n    name: 'half',\n    beats: 2,\n    symbol: '𝅗𝅥'\n  },\n  QUARTER: {\n    name: 'quarter',\n    beats: 1,\n    symbol: '♩'\n  },\n  EIGHTH: {\n    name: 'eighth',\n    beats: 0.5,\n    symbol: '♪'\n  }\n};\nexport const REST_DURATIONS = {\n  WHOLE_REST: {\n    name: 'whole rest',\n    beats: 4,\n    symbol: '𝄻'\n  },\n  HALF_REST: {\n    name: 'half rest',\n    beats: 2,\n    symbol: '𝄼'\n  },\n  QUARTER_REST: {\n    name: 'quarter rest',\n    beats: 1,\n    symbol: '𝄽'\n  },\n  EIGHTH_REST: {\n    name: 'eighth rest',\n    beats: 0.5,\n    symbol: '𝄾'\n  }\n};\n\n// Note positions on the staff (C4 = middle C)\nexport const STAFF_POSITIONS = {\n  'do': {\n    line: 0,\n    octave4: 0\n  },\n  // C\n  're': {\n    line: 0.5,\n    octave4: 0.5\n  },\n  // D\n  'mi': {\n    line: 1,\n    octave4: 1\n  },\n  // E\n  'fa': {\n    line: 1.5,\n    octave4: 1.5\n  },\n  // F\n  'sol': {\n    line: 2,\n    octave4: 2\n  },\n  // G\n  'la': {\n    line: 2.5,\n    octave4: 2.5\n  },\n  // A\n  'ti': {\n    line: 3,\n    octave4: 3\n  } // B\n};\nexport class MusicComposition {\n  constructor() {\n    this.measures = [[]]; // Array of measures, each measure is array of notes/rests\n    this.currentMeasure = 0;\n    this.timeSignature = {\n      beats: 4,\n      noteValue: 4\n    }; // 4/4 time\n    this.currentOctave = 4;\n    this.currentNoteDuration = NOTE_DURATIONS.QUARTER;\n    this.tempo = 120; // BPM\n  }\n  addNote(note, octave = null, duration = null) {\n    const noteOctave = octave || this.currentOctave;\n    const noteDuration = duration || this.currentNoteDuration;\n    const noteObject = {\n      type: 'note',\n      note: note,\n      octave: noteOctave,\n      duration: noteDuration,\n      id: Date.now() + Math.random()\n    };\n\n    // Add to current measure\n    this.measures[this.currentMeasure].push(noteObject);\n\n    // Check if measure is full\n    if (this.getMeasureBeats(this.currentMeasure) >= this.timeSignature.beats) {\n      this.startNewMeasure();\n    }\n    return noteObject;\n  }\n  addRest(duration = null) {\n    const restDuration = duration || this.currentNoteDuration;\n    const restObject = {\n      type: 'rest',\n      duration: restDuration,\n      id: Date.now() + Math.random()\n    };\n    this.measures[this.currentMeasure].push(restObject);\n    if (this.getMeasureBeats(this.currentMeasure) >= this.timeSignature.beats) {\n      this.startNewMeasure();\n    }\n    return restObject;\n  }\n  getMeasureBeats(measureIndex) {\n    if (!this.measures[measureIndex]) return 0;\n    return this.measures[measureIndex].reduce((total, item) => {\n      return total + item.duration.beats;\n    }, 0);\n  }\n  startNewMeasure() {\n    this.measures.push([]);\n    this.currentMeasure = this.measures.length - 1;\n  }\n  undo() {\n    if (this.measures[this.currentMeasure].length > 0) {\n      this.measures[this.currentMeasure].pop();\n    } else if (this.currentMeasure > 0) {\n      this.measures.pop();\n      this.currentMeasure = this.measures.length - 1;\n    }\n  }\n  clear() {\n    this.measures = [[]];\n    this.currentMeasure = 0;\n  }\n  setNoteDuration(duration) {\n    this.currentNoteDuration = duration;\n  }\n  setOctave(octave) {\n    this.currentOctave = Math.max(2, Math.min(7, octave));\n  }\n  octaveUp() {\n    this.setOctave(this.currentOctave + 1);\n    return this.currentOctave;\n  }\n  octaveDown() {\n    this.setOctave(this.currentOctave - 1);\n    return this.currentOctave;\n  }\n  getAllNotes() {\n    return this.measures.flat();\n  }\n  getTotalNotes() {\n    return this.getAllNotes().filter(item => item.type === 'note').length;\n  }\n  getCompositionInfo() {\n    return {\n      measureCount: this.measures.length,\n      totalNotes: this.getTotalNotes(),\n      currentOctave: this.currentOctave,\n      currentNoteDuration: this.currentNoteDuration,\n      timeSignature: this.timeSignature,\n      tempo: this.tempo\n    };\n  }\n\n  // Convert composition to playable sequence\n  getPlaybackSequence() {\n    const sequence = [];\n    let currentTime = 0;\n    const beatDuration = 60000 / this.tempo; // milliseconds per beat\n\n    for (const measure of this.measures) {\n      for (const item of measure) {\n        if (item.type === 'note') {\n          sequence.push({\n            note: item.note,\n            octave: item.octave,\n            startTime: currentTime,\n            duration: item.duration.beats * beatDuration\n          });\n        }\n        currentTime += item.duration.beats * beatDuration;\n      }\n    }\n    return sequence;\n  }\n}","map":{"version":3,"names":["NOTE_DURATIONS","WHOLE","name","beats","symbol","HALF","QUARTER","EIGHTH","REST_DURATIONS","WHOLE_REST","HALF_REST","QUARTER_REST","EIGHTH_REST","STAFF_POSITIONS","line","octave4","MusicComposition","constructor","measures","currentMeasure","timeSignature","noteValue","currentOctave","currentNoteDuration","tempo","addNote","note","octave","duration","noteOctave","noteDuration","noteObject","type","id","Date","now","Math","random","push","getMeasureBeats","startNewMeasure","addRest","restDuration","restObject","measureIndex","reduce","total","item","length","undo","pop","clear","setNoteDuration","setOctave","max","min","octaveUp","octaveDown","getAllNotes","flat","getTotalNotes","filter","getCompositionInfo","measureCount","totalNotes","getPlaybackSequence","sequence","currentTime","beatDuration","measure","startTime"],"sources":["C:/Users/user/sol-fa-app/src/utils/musicNotation.js"],"sourcesContent":["// Music notation and composition management\r\nexport const NOTE_DURATIONS = {\r\n    WHOLE: { name: 'whole', beats: 4, symbol: '𝅝' },\r\n    HALF: { name: 'half', beats: 2, symbol: '𝅗𝅥' },\r\n    QUARTER: { name: 'quarter', beats: 1, symbol: '♩' },\r\n    EIGHTH: { name: 'eighth', beats: 0.5, symbol: '♪' }\r\n};\r\n\r\nexport const REST_DURATIONS = {\r\n    WHOLE_REST: { name: 'whole rest', beats: 4, symbol: '𝄻' },\r\n    HALF_REST: { name: 'half rest', beats: 2, symbol: '𝄼' },\r\n    QUARTER_REST: { name: 'quarter rest', beats: 1, symbol: '𝄽' },\r\n    EIGHTH_REST: { name: 'eighth rest', beats: 0.5, symbol: '𝄾' }\r\n};\r\n\r\n// Note positions on the staff (C4 = middle C)\r\nexport const STAFF_POSITIONS = {\r\n    'do': { line: 0, octave4: 0 },  // C\r\n    're': { line: 0.5, octave4: 0.5 },  // D\r\n    'mi': { line: 1, octave4: 1 },  // E\r\n    'fa': { line: 1.5, octave4: 1.5 },  // F\r\n    'sol': { line: 2, octave4: 2 },  // G\r\n    'la': { line: 2.5, octave4: 2.5 },  // A\r\n    'ti': { line: 3, octave4: 3 }   // B\r\n};\r\n\r\nexport class MusicComposition {\r\n    constructor() {\r\n        this.measures = [[]]; // Array of measures, each measure is array of notes/rests\r\n        this.currentMeasure = 0;\r\n        this.timeSignature = { beats: 4, noteValue: 4 }; // 4/4 time\r\n        this.currentOctave = 4;\r\n        this.currentNoteDuration = NOTE_DURATIONS.QUARTER;\r\n        this.tempo = 120; // BPM\r\n    }\r\n\r\n    addNote(note, octave = null, duration = null) {\r\n        const noteOctave = octave || this.currentOctave;\r\n        const noteDuration = duration || this.currentNoteDuration;\r\n        \r\n        const noteObject = {\r\n            type: 'note',\r\n            note: note,\r\n            octave: noteOctave,\r\n            duration: noteDuration,\r\n            id: Date.now() + Math.random()\r\n        };\r\n\r\n        // Add to current measure\r\n        this.measures[this.currentMeasure].push(noteObject);\r\n        \r\n        // Check if measure is full\r\n        if (this.getMeasureBeats(this.currentMeasure) >= this.timeSignature.beats) {\r\n            this.startNewMeasure();\r\n        }\r\n\r\n        return noteObject;\r\n    }\r\n\r\n    addRest(duration = null) {\r\n        const restDuration = duration || this.currentNoteDuration;\r\n        \r\n        const restObject = {\r\n            type: 'rest',\r\n            duration: restDuration,\r\n            id: Date.now() + Math.random()\r\n        };\r\n\r\n        this.measures[this.currentMeasure].push(restObject);\r\n        \r\n        if (this.getMeasureBeats(this.currentMeasure) >= this.timeSignature.beats) {\r\n            this.startNewMeasure();\r\n        }\r\n\r\n        return restObject;\r\n    }\r\n\r\n    getMeasureBeats(measureIndex) {\r\n        if (!this.measures[measureIndex]) return 0;\r\n        return this.measures[measureIndex].reduce((total, item) => {\r\n            return total + item.duration.beats;\r\n        }, 0);\r\n    }\r\n\r\n    startNewMeasure() {\r\n        this.measures.push([]);\r\n        this.currentMeasure = this.measures.length - 1;\r\n    }\r\n\r\n    undo() {\r\n        if (this.measures[this.currentMeasure].length > 0) {\r\n            this.measures[this.currentMeasure].pop();\r\n        } else if (this.currentMeasure > 0) {\r\n            this.measures.pop();\r\n            this.currentMeasure = this.measures.length - 1;\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.measures = [[]];\r\n        this.currentMeasure = 0;\r\n    }\r\n\r\n    setNoteDuration(duration) {\r\n        this.currentNoteDuration = duration;\r\n    }\r\n\r\n    setOctave(octave) {\r\n        this.currentOctave = Math.max(2, Math.min(7, octave));\r\n    }\r\n\r\n    octaveUp() {\r\n        this.setOctave(this.currentOctave + 1);\r\n        return this.currentOctave;\r\n    }\r\n\r\n    octaveDown() {\r\n        this.setOctave(this.currentOctave - 1);\r\n        return this.currentOctave;\r\n    }\r\n\r\n    getAllNotes() {\r\n        return this.measures.flat();\r\n    }\r\n\r\n    getTotalNotes() {\r\n        return this.getAllNotes().filter(item => item.type === 'note').length;\r\n    }\r\n\r\n    getCompositionInfo() {\r\n        return {\r\n            measureCount: this.measures.length,\r\n            totalNotes: this.getTotalNotes(),\r\n            currentOctave: this.currentOctave,\r\n            currentNoteDuration: this.currentNoteDuration,\r\n            timeSignature: this.timeSignature,\r\n            tempo: this.tempo\r\n        };\r\n    }\r\n\r\n    // Convert composition to playable sequence\r\n    getPlaybackSequence() {\r\n        const sequence = [];\r\n        let currentTime = 0;\r\n        const beatDuration = 60000 / this.tempo; // milliseconds per beat\r\n\r\n        for (const measure of this.measures) {\r\n            for (const item of measure) {\r\n                if (item.type === 'note') {\r\n                    sequence.push({\r\n                        note: item.note,\r\n                        octave: item.octave,\r\n                        startTime: currentTime,\r\n                        duration: item.duration.beats * beatDuration\r\n                    });\r\n                }\r\n                currentTime += item.duration.beats * beatDuration;\r\n            }\r\n        }\r\n\r\n        return sequence;\r\n    }\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}