{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst fingerJointPairs = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20]\n};\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\n  const joints = fingerIndices.map(idx => landmarks[idx]);\n  const baseToTip = distance(joints[0], joints[joints.length - 1]);\n  const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => sum + distance(joints[i], joints[i + 1]), 0);\n  return 1 - baseToTip / totalLength; // 1 = fully curled, 0 = straight\n};\nconst calculateFingerCurvature = (landmarks, fingerIndices) => {\n  // Calculate angle between finger segments to determine curvature\n  const base = landmarks[fingerIndices[0]];\n  const mid = landmarks[fingerIndices[1]];\n  const tipBase = landmarks[fingerIndices[2]];\n  const tip = landmarks[fingerIndices[3]];\n  const angle1 = calculateAngle(base, mid, tipBase);\n  const angle2 = calculateAngle(mid, tipBase, tip);\n\n  // Return average curvature (0 = straight, 1 = fully curved)\n  return (angle1 + angle2) / 360;\n};\nconst calculateAngle = (p1, p2, p3) => {\n  const v1 = {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n    z: p1.z - p2.z\n  };\n  const v2 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n    z: p3.z - p2.z\n  };\n  const dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n  const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\n  const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n  return Math.acos(dot / (mag1 * mag2)) * (180 / Math.PI);\n};\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst getFingerDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n  const direction = {\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  };\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n  return {\n    x: direction.x,\n    y: direction.y,\n    z: direction.z,\n    isPointingForward: Math.abs(direction.z) > Math.max(Math.abs(direction.x), Math.abs(direction.y)),\n    isPointingSideways: Math.abs(direction.x) > Math.max(Math.abs(direction.y), Math.abs(direction.z)),\n    isPointingDown: direction.y > Math.max(Math.abs(direction.x), Math.abs(direction.z))\n  };\n};\nconst getPalmOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n  return {\n    normal,\n    isDownward: normal.y > 0.5,\n    isUpward: normal.y < -0.5,\n    isSideways: Math.abs(normal.x) > 0.7\n  };\n};\nconst getHandShape = landmarks => {\n  const fingerCurls = {\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const fingerCurvatures = {\n    index: calculateFingerCurvature(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurvature(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurvature(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurvature(landmarks, fingerJointPairs.pinky)\n  };\n  return {\n    curls: fingerCurls,\n    curvatures: fingerCurvatures,\n    isRelaxedCurve: Object.values(fingerCurvatures).every(curve => curve > 0.2 && curve < 0.6),\n    isStraight: Object.values(fingerCurls).every(curl => curl < 0.3),\n    isClosed: Object.values(fingerCurls).every(curl => curl > 0.7)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const handShape = getHandShape(landmarks);\n  const fingerDirection = getFingerDirection(landmarks);\n  const palmOrientation = getPalmOrientation(landmarks);\n\n  // Debug information\n  const debug = {\n    handShape,\n    fingerDirection,\n    palmOrientation\n  };\n\n  // Do - closed fist horizontal\n  if (handShape.isClosed && !fingerDirection.isPointingDown) {\n    return {\n      sign: 'do',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Re - flat hand diagonal up\n  if (handShape.isStraight && !fingerDirection.isPointingDown && !fingerDirection.isPointingForward) {\n    return {\n      sign: 're',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Mi - flat hand horizontal, palm down\n  if (handShape.isStraight && fingerDirection.isPointingSideways && palmOrientation.isDownward) {\n    return {\n      sign: 'mi',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Fa - fist with thumb pointing down\n  if (handShape.isClosed && fingerDirection.isPointingDown) {\n    return {\n      sign: 'fa',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Sol - flat hand forward, palm sideways\n  if (handShape.isStraight && fingerDirection.isPointingForward && palmOrientation.isSideways) {\n    return {\n      sign: 'sol',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // La - relaxed curved hand, palm down\n  if (handShape.isRelaxedCurve && palmOrientation.isDownward && fingerDirection.isPointingDown) {\n    return {\n      sign: 'la',\n      confidence: 0.9,\n      debug\n    };\n  }\n  return {\n    sign: null,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const handShape = getHandShape(landmarks);\n  const fingerDirection = getFingerDirection(landmarks);\n  const palmOrientation = getPalmOrientation(landmarks);\n  return {\n    handShape,\n    fingerDirection,\n    palmOrientation,\n    possibleSigns: {\n      isDo: handShape.isClosed && !fingerDirection.isPointingDown,\n      isRe: handShape.isStraight && !fingerDirection.isPointingDown && !fingerDirection.isPointingForward,\n      isMi: handShape.isStraight && fingerDirection.isPointingSideways && palmOrientation.isDownward,\n      isFa: handShape.isClosed && fingerDirection.isPointingDown,\n      isSol: handShape.isStraight && fingerDirection.isPointingForward && palmOrientation.isSideways,\n      isLa: handShape.isRelaxedCurve && palmOrientation.isDownward && fingerDirection.isPointingDown\n    }\n  };\n};","map":{"version":3,"names":["fingerJointPairs","thumb","index","middle","ring","pinky","calculateFingerCurl","landmarks","fingerIndices","joints","map","idx","baseToTip","distance","length","totalLength","slice","reduce","sum","_","i","calculateFingerCurvature","base","mid","tipBase","tip","angle1","calculateAngle","angle2","p1","p2","p3","v1","x","y","z","v2","dot","mag1","Math","sqrt","mag2","acos","PI","pow","getFingerDirection","wrist","middleBase","middleTip","direction","magnitude","isPointingForward","abs","max","isPointingSideways","isPointingDown","getPalmOrientation","indexBase","pinkyBase","normal","isDownward","isUpward","isSideways","getHandShape","fingerCurls","fingerCurvatures","curls","curvatures","isRelaxedCurve","Object","values","every","curve","isStraight","curl","isClosed","recognizeKodalySign","handShape","fingerDirection","palmOrientation","debug","sign","confidence","analyzeHand","possibleSigns","isDo","isRe","isMi","isFa","isSol","isLa"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst fingerJointPairs = {\r\n    thumb: [1, 2, 3, 4],\r\n    index: [5, 6, 7, 8],\r\n    middle: [9, 10, 11, 12],\r\n    ring: [13, 14, 15, 16],\r\n    pinky: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\r\n    const joints = fingerIndices.map(idx => landmarks[idx]);\r\n    const baseToTip = distance(joints[0], joints[joints.length - 1]);\r\n    const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => \r\n        sum + distance(joints[i], joints[i + 1]), 0);\r\n    return 1 - (baseToTip / totalLength); // 1 = fully curled, 0 = straight\r\n};\r\n\r\nconst calculateFingerCurvature = (landmarks, fingerIndices) => {\r\n    // Calculate angle between finger segments to determine curvature\r\n    const base = landmarks[fingerIndices[0]];\r\n    const mid = landmarks[fingerIndices[1]];\r\n    const tipBase = landmarks[fingerIndices[2]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n\r\n    const angle1 = calculateAngle(base, mid, tipBase);\r\n    const angle2 = calculateAngle(mid, tipBase, tip);\r\n\r\n    // Return average curvature (0 = straight, 1 = fully curved)\r\n    return (angle1 + angle2) / 360;\r\n};\r\n\r\nconst calculateAngle = (p1, p2, p3) => {\r\n    const v1 = {\r\n        x: p1.x - p2.x,\r\n        y: p1.y - p2.y,\r\n        z: p1.z - p2.z\r\n    };\r\n    const v2 = {\r\n        x: p3.x - p2.x,\r\n        y: p3.y - p2.y,\r\n        z: p3.z - p2.z\r\n    };\r\n\r\n    const dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n    const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\r\n    const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\r\n\r\n    return Math.acos(dot / (mag1 * mag2)) * (180 / Math.PI);\r\n};\r\n\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst getFingerDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n\r\n    const direction = {\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    };\r\n\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    return {\r\n        x: direction.x,\r\n        y: direction.y,\r\n        z: direction.z,\r\n        isPointingForward: Math.abs(direction.z) > Math.max(Math.abs(direction.x), Math.abs(direction.y)),\r\n        isPointingSideways: Math.abs(direction.x) > Math.max(Math.abs(direction.y), Math.abs(direction.z)),\r\n        isPointingDown: direction.y > Math.max(Math.abs(direction.x), Math.abs(direction.z))\r\n    };\r\n};\r\n\r\nconst getPalmOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n\r\n    return {\r\n        normal,\r\n        isDownward: normal.y > 0.5,\r\n        isUpward: normal.y < -0.5,\r\n        isSideways: Math.abs(normal.x) > 0.7\r\n    };\r\n};\r\n\r\nconst getHandShape = (landmarks) => {\r\n    const fingerCurls = {\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const fingerCurvatures = {\r\n        index: calculateFingerCurvature(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurvature(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurvature(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurvature(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    return {\r\n        curls: fingerCurls,\r\n        curvatures: fingerCurvatures,\r\n        isRelaxedCurve: Object.values(fingerCurvatures).every(curve => curve > 0.2 && curve < 0.6),\r\n        isStraight: Object.values(fingerCurls).every(curl => curl < 0.3),\r\n        isClosed: Object.values(fingerCurls).every(curl => curl > 0.7)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const handShape = getHandShape(landmarks);\r\n    const fingerDirection = getFingerDirection(landmarks);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n    \r\n    // Debug information\r\n    const debug = {\r\n        handShape,\r\n        fingerDirection,\r\n        palmOrientation\r\n    };\r\n\r\n    // Do - closed fist horizontal\r\n    if (handShape.isClosed && !fingerDirection.isPointingDown) {\r\n        return { sign: 'do', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Re - flat hand diagonal up\r\n    if (handShape.isStraight && \r\n        !fingerDirection.isPointingDown && \r\n        !fingerDirection.isPointingForward) {\r\n        return { sign: 're', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Mi - flat hand horizontal, palm down\r\n    if (handShape.isStraight && \r\n        fingerDirection.isPointingSideways && \r\n        palmOrientation.isDownward) {\r\n        return { sign: 'mi', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Fa - fist with thumb pointing down\r\n    if (handShape.isClosed && fingerDirection.isPointingDown) {\r\n        return { sign: 'fa', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Sol - flat hand forward, palm sideways\r\n    if (handShape.isStraight && \r\n        fingerDirection.isPointingForward && \r\n        palmOrientation.isSideways) {\r\n        return { sign: 'sol', confidence: 0.9, debug };\r\n    }\r\n\r\n    // La - relaxed curved hand, palm down\r\n    if (handShape.isRelaxedCurve && \r\n        palmOrientation.isDownward && \r\n        fingerDirection.isPointingDown) {\r\n        return { sign: 'la', confidence: 0.9, debug };\r\n    }\r\n\r\n    return { sign: null, debug };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const handShape = getHandShape(landmarks);\r\n    const fingerDirection = getFingerDirection(landmarks);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n\r\n    return {\r\n        handShape,\r\n        fingerDirection,\r\n        palmOrientation,\r\n        possibleSigns: {\r\n            isDo: handShape.isClosed && !fingerDirection.isPointingDown,\r\n            isRe: handShape.isStraight && !fingerDirection.isPointingDown && !fingerDirection.isPointingForward,\r\n            isMi: handShape.isStraight && fingerDirection.isPointingSideways && palmOrientation.isDownward,\r\n            isFa: handShape.isClosed && fingerDirection.isPointingDown,\r\n            isSol: handShape.isStraight && fingerDirection.isPointingForward && palmOrientation.isSideways,\r\n            isLa: handShape.isRelaxedCurve && palmOrientation.isDownward && fingerDirection.isPointingDown\r\n        }\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}