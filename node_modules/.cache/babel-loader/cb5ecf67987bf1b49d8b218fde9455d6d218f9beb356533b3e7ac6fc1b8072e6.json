{"ast":null,"code":"// Constants\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\n\n// Basic helper functions\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\n\n// Get finger extension values\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Get direct distance from base to tip\n  const directLength = distance(base, tip);\n\n  // Get sum of segment lengths\n  const segmentLength = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n\n  // Return ratio (0 = fully bent, 1 = straight)\n  return directLength / segmentLength;\n};\n\n// Get hand direction\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n\n  // Get direction vector\n  const dir = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const normalized = normalize(dir);\n\n  // Calculate angles\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  return {\n    direction: normalized,\n    verticalAngle,\n    isPointingUp: verticalAngle > 45,\n    isPointingDown: verticalAngle < -45,\n    isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\n    isHorizontal: Math.abs(verticalAngle) < 30\n  };\n};\n\n// Get palm direction\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const index_base = landmarks[5];\n  const pinky_base = landmarks[17];\n\n  // Get vectors along palm\n  const v1 = {\n    x: index_base.x - wrist.x,\n    y: index_base.y - wrist.y,\n    z: index_base.z - wrist.z\n  };\n  const v2 = {\n    x: pinky_base.x - wrist.x,\n    y: pinky_base.y - wrist.y,\n    z: pinky_base.z - wrist.z\n  };\n\n  // Cross product for palm normal\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const normalized = normalize(normal);\n  return {\n    normal: normalized,\n    isDown: normalized.y > 0.5,\n    isUp: normalized.y < -0.5,\n    isSide: Math.abs(normalized.x) > 0.5\n  };\n};\n\n// Get thumb direction\nconst getThumbDirection = landmarks => {\n  const thumbBase = landmarks[1];\n  const thumbTip = landmarks[4];\n  const dir = {\n    x: thumbTip.x - thumbBase.x,\n    y: thumbTip.y - thumbBase.y,\n    z: thumbTip.z - thumbBase.z\n  };\n  const normalized = normalize(dir);\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  return {\n    angle: verticalAngle,\n    isPointingDown: verticalAngle < -45,\n    isPointingUp: verticalAngle > 45\n  };\n};\n\n// Analyze all fingers\nconst analyzeFingers = landmarks => {\n  return {\n    values: {\n      thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n      index: getFingerExtension(landmarks, FINGERS.INDEX),\n      middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n      ring: getFingerExtension(landmarks, FINGERS.RING),\n      pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n    }\n  };\n};\n\n// Main recognition function\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n\n  // Debug info\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    },\n    thumbDirection: {\n      angle: thumbDir.angle,\n      isPointingDown: thumbDir.isPointingDown,\n      isPointingUp: thumbDir.isPointingUp\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // DO - Tight fist\n  if (fingers.values.thumb < 0.4 && fingers.values.index < 0.4 && fingers.values.middle < 0.4 && fingers.values.ring < 0.4 && fingers.values.pinky < 0.4) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n\n  // RE - Angled up, fingers together\n  else if (fingers.values.index > 0.7 && fingers.values.middle > 0.7 && fingers.values.ring > 0.7 && fingers.values.pinky > 0.7 && handDir.verticalAngle > 20 && handDir.verticalAngle < 70) {\n    sign = 're';\n    confidence = 0.9;\n  }\n\n  // MI - Completely flat hand\n  else if (fingers.values.index > 0.8 && fingers.values.middle > 0.8 && fingers.values.ring > 0.8 && fingers.values.pinky > 0.8 && Math.abs(handDir.verticalAngle) < 20 && palmDir.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n\n  // FA - Thumb pointing down, other fingers in fist\n  else if (fingers.values.thumb > 0.6 &&\n  // Thumb extended\n  fingers.values.index < 0.4 &&\n  // Other fingers in tight fist\n  fingers.values.middle < 0.4 && fingers.values.ring < 0.4 && fingers.values.pinky < 0.4 && thumbDir.isPointingDown) {\n    // Thumb must point down\n    sign = 'fa';\n    confidence = 0.9;\n  }\n\n  // SOL - Curved fingers to side, back of hand visible\n  else if (fingers.values.index > 0.4 && fingers.values.index < 0.8 && fingers.values.middle > 0.4 && fingers.values.middle < 0.8 && fingers.values.ring > 0.4 && fingers.values.ring < 0.8 && fingers.values.pinky > 0.4 && fingers.values.pinky < 0.8 && Math.abs(handDir.direction.x) > 0.7 && palmDir.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n\n  // LA - Curved fingers, palm down\n  else if (fingers.values.index > 0.4 && fingers.values.index < 0.7 && fingers.values.middle > 0.4 && fingers.values.middle < 0.7 && fingers.values.ring > 0.4 && fingers.values.ring < 0.7 && fingers.values.pinky > 0.4 && fingers.values.pinky < 0.7 && palmDir.isDown) {\n    sign = 'la';\n    confidence = 0.9;\n  }\n\n  // TI - Index up, others closed\n  else if (fingers.values.index > 0.8 && fingers.values.middle < 0.4 && fingers.values.ring < 0.4 && fingers.values.pinky < 0.4 && handDir.isPointingUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  if (sign) {\n    console.log('Detected:', sign, 'with confidence:', confidence);\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// Export for debugging\nexport function analyzeHand(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n  return {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir,\n    thumbDirection: thumbDir\n  };\n}","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","distance","p1","p2","Math","sqrt","pow","x","y","z","normalize","vector","magnitude","getFingerExtension","landmarks","fingerIndices","base","tip","mid1","mid2","directLength","segmentLength","getHandDirection","wrist","middle_tip","dir","normalized","verticalAngle","atan2","PI","direction","isPointingUp","isPointingDown","isPointingForward","abs","max","isHorizontal","getPalmDirection","index_base","pinky_base","v1","v2","normal","isDown","isUp","isSide","getThumbDirection","thumbBase","thumbTip","angle","analyzeFingers","values","thumb","index","middle","ring","pinky","recognizeKodalySign","length","fingers","handDir","palmDir","thumbDir","debug","extensions","handDirection","palmOrientation","thumbDirection","sign","confidence","console","log","analyzeHand","palmDirection"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Constants\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\n// Basic helper functions\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\n// Get finger extension values\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Get direct distance from base to tip\r\n    const directLength = distance(base, tip);\r\n    \r\n    // Get sum of segment lengths\r\n    const segmentLength = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n    \r\n    // Return ratio (0 = fully bent, 1 = straight)\r\n    return directLength / segmentLength;\r\n};\r\n\r\n// Get hand direction\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Get direction vector\r\n    const dir = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const normalized = normalize(dir);\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction: normalized,\r\n        verticalAngle,\r\n        isPointingUp: verticalAngle > 45,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\r\n        isHorizontal: Math.abs(verticalAngle) < 30\r\n    };\r\n};\r\n\r\n// Get palm direction\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const index_base = landmarks[5];\r\n    const pinky_base = landmarks[17];\r\n\r\n    // Get vectors along palm\r\n    const v1 = {\r\n        x: index_base.x - wrist.x,\r\n        y: index_base.y - wrist.y,\r\n        z: index_base.z - wrist.z\r\n    };\r\n\r\n    const v2 = {\r\n        x: pinky_base.x - wrist.x,\r\n        y: pinky_base.y - wrist.y,\r\n        z: pinky_base.z - wrist.z\r\n    };\r\n\r\n    // Cross product for palm normal\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const normalized = normalize(normal);\r\n\r\n    return {\r\n        normal: normalized,\r\n        isDown: normalized.y > 0.5,\r\n        isUp: normalized.y < -0.5,\r\n        isSide: Math.abs(normalized.x) > 0.5\r\n    };\r\n};\r\n\r\n// Get thumb direction\r\nconst getThumbDirection = (landmarks) => {\r\n    const thumbBase = landmarks[1];\r\n    const thumbTip = landmarks[4];\r\n\r\n    const dir = {\r\n        x: thumbTip.x - thumbBase.x,\r\n        y: thumbTip.y - thumbBase.y,\r\n        z: thumbTip.z - thumbBase.z\r\n    };\r\n\r\n    const normalized = normalize(dir);\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        angle: verticalAngle,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingUp: verticalAngle > 45\r\n    };\r\n};\r\n\r\n// Analyze all fingers\r\nconst analyzeFingers = (landmarks) => {\r\n    return {\r\n        values: {\r\n            thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n            index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n            middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n            ring: getFingerExtension(landmarks, FINGERS.RING),\r\n            pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n        }\r\n    };\r\n};\r\n\r\n// Main recognition function\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    // Debug info\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        },\r\n        thumbDirection: {\r\n            angle: thumbDir.angle,\r\n            isPointingDown: thumbDir.isPointingDown,\r\n            isPointingUp: thumbDir.isPointingUp\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // DO - Tight fist\r\n    if (fingers.values.thumb < 0.4 &&    \r\n        fingers.values.index < 0.4 &&\r\n        fingers.values.middle < 0.4 &&\r\n        fingers.values.ring < 0.4 &&\r\n        fingers.values.pinky < 0.4) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // RE - Angled up, fingers together\r\n    else if (fingers.values.index > 0.7 &&     \r\n             fingers.values.middle > 0.7 &&\r\n             fingers.values.ring > 0.7 &&\r\n             fingers.values.pinky > 0.7 &&\r\n             handDir.verticalAngle > 20 &&     \r\n             handDir.verticalAngle < 70) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // MI - Completely flat hand\r\n    else if (fingers.values.index > 0.8 &&     \r\n             fingers.values.middle > 0.8 &&\r\n             fingers.values.ring > 0.8 &&\r\n             fingers.values.pinky > 0.8 &&\r\n             Math.abs(handDir.verticalAngle) < 20 && \r\n             palmDir.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // FA - Thumb pointing down, other fingers in fist\r\n    else if (fingers.values.thumb > 0.6 &&      // Thumb extended\r\n             fingers.values.index < 0.4 &&       // Other fingers in tight fist\r\n             fingers.values.middle < 0.4 &&\r\n             fingers.values.ring < 0.4 &&\r\n             fingers.values.pinky < 0.4 &&\r\n             thumbDir.isPointingDown) {          // Thumb must point down\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // SOL - Curved fingers to side, back of hand visible\r\n    else if (fingers.values.index > 0.4 &&     \r\n             fingers.values.index < 0.8 &&     \r\n             fingers.values.middle > 0.4 &&\r\n             fingers.values.middle < 0.8 &&\r\n             fingers.values.ring > 0.4 &&\r\n             fingers.values.ring < 0.8 &&\r\n             fingers.values.pinky > 0.4 &&\r\n             fingers.values.pinky < 0.8 &&\r\n             Math.abs(handDir.direction.x) > 0.7 && \r\n             palmDir.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // LA - Curved fingers, palm down\r\n    else if (fingers.values.index > 0.4 &&     \r\n             fingers.values.index < 0.7 &&     \r\n             fingers.values.middle > 0.4 &&\r\n             fingers.values.middle < 0.7 &&\r\n             fingers.values.ring > 0.4 &&\r\n             fingers.values.ring < 0.7 &&\r\n             fingers.values.pinky > 0.4 &&\r\n             fingers.values.pinky < 0.7 &&\r\n             palmDir.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // TI - Index up, others closed\r\n    else if (fingers.values.index > 0.8 &&     \r\n             fingers.values.middle < 0.4 &&     \r\n             fingers.values.ring < 0.4 &&\r\n             fingers.values.pinky < 0.4 &&\r\n             handDir.isPointingUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    if (sign) {\r\n        console.log('Detected:', sign, 'with confidence:', confidence);\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// Export for debugging\r\nexport function analyzeHand(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    return {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir,\r\n        thumbDirection: thumbDir\r\n    };\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}