{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst fingerJointPairs = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20]\n};\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\n  const joints = fingerIndices.map(idx => landmarks[idx]);\n  const baseToTip = distance(joints[0], joints[joints.length - 1]);\n  const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => sum + distance(joints[i], joints[i + 1]), 0);\n  return 1 - baseToTip / totalLength; // 1 = fully curled, 0 = straight\n};\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst getThumbDirection = landmarks => {\n  const thumbBase = landmarks[1];\n  const thumbTip = landmarks[4];\n\n  // Calculate thumb vector\n  const direction = {\n    x: thumbTip.x - thumbBase.x,\n    y: thumbTip.y - thumbBase.y,\n    z: thumbTip.z - thumbBase.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles\n  const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\n  return {\n    direction,\n    angleFromVertical,\n    isPointingDown: angleFromVertical > 120,\n    isPointingUp: angleFromVertical < 60,\n    isPointingForward: angleFromVertical >= 60 && angleFromVertical <= 120\n  };\n};\nconst getHandOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const middle_base = landmarks[9];\n  const middle_tip = landmarks[12];\n\n  // Calculate hand direction vector\n  const direction = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles\n  const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\n  const angleFromHorizontal = Math.abs(90 - angleFromVertical);\n  return {\n    direction,\n    angleFromVertical,\n    angleFromHorizontal,\n    isVertical: angleFromVertical < 20 || angleFromVertical > 160,\n    isHorizontal: angleFromHorizontal < 20,\n    isDiagonal: angleFromVertical > 20 && angleFromVertical < 160 && angleFromHorizontal > 20\n  };\n};\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Calculate palm normal vector\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n\n  // Cross product for normal vector\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n  return {\n    normal,\n    isDownward: normal.y > 0.7,\n    isUpward: normal.y < -0.7,\n    isSideways: Math.abs(normal.x) > 0.7\n  };\n};\nconst areFingersTogether = landmarks => {\n  const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\n  let maxDistance = 0;\n  for (let i = 0; i < tipIndices.length - 1; i++) {\n    const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\n    maxDistance = Math.max(maxDistance, dist);\n  }\n  return maxDistance < 0.1;\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Calculate finger curls\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n\n  // Check finger states\n  const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\n  const fingersClosedExceptThumb = curls.index > 0.7 && curls.middle > 0.7 && curls.ring > 0.7 && curls.pinky > 0.7;\n  const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\n\n  // Debug information\n  const debug = {\n    curls,\n    orientation,\n    palmDir,\n    thumbDir,\n    fingersTogether,\n    fingersExtended,\n    fingersClosedExceptThumb,\n    allFingersClosed\n  };\n\n  // Check for 'Do' - closed fist held horizontally\n  if (allFingersClosed && orientation.isHorizontal) {\n    return {\n      sign: 'do',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Check for 'Re' - flat hand diagonal upward\n  if (fingersExtended && fingersTogether && orientation.isDiagonal && orientation.angleFromVertical < 90) {\n    return {\n      sign: 're',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Check for 'Mi' - flat hand horizontal\n  if (fingersExtended && fingersTogether && orientation.isHorizontal && palmDir.isDownward) {\n    return {\n      sign: 'mi',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Check for 'Fa' - fist with thumb pointing down\n  if (fingersClosedExceptThumb && curls.thumb < 0.3 &&\n  // Thumb extended\n  thumbDir.isPointingDown) {\n    return {\n      sign: 'fa',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Return debug information if no sign matched\n  return {\n    sign: null,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n  const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\n  const fingersClosedExceptThumb = curls.index > 0.7 && curls.middle > 0.7 && curls.ring > 0.7 && curls.pinky > 0.7;\n  const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\n  return {\n    fingerCurls: curls,\n    orientation: orientation,\n    palmDirection: palmDir,\n    thumbDirection: thumbDir,\n    fingersTogether: fingersTogether,\n    fingersExtended: fingersExtended,\n    fingersClosedExceptThumb: fingersClosedExceptThumb,\n    allFingersClosed: allFingersClosed,\n    possibleSigns: {\n      isDo: allFingersClosed && orientation.isHorizontal,\n      isRe: fingersExtended && fingersTogether && orientation.isDiagonal && orientation.angleFromVertical < 90,\n      isMi: fingersExtended && fingersTogether && orientation.isHorizontal && palmDir.isDownward,\n      isFa: fingersClosedExceptThumb && curls.thumb < 0.3 && thumbDir.isPointingDown\n    }\n  };\n};","map":{"version":3,"names":["fingerJointPairs","thumb","index","middle","ring","pinky","calculateFingerCurl","landmarks","fingerIndices","joints","map","idx","baseToTip","distance","length","totalLength","slice","reduce","sum","_","i","p1","p2","Math","sqrt","pow","x","y","z","getThumbDirection","thumbBase","thumbTip","direction","magnitude","angleFromVertical","acos","PI","isPointingDown","isPointingUp","isPointingForward","getHandOrientation","wrist","middle_base","middle_tip","angleFromHorizontal","abs","isVertical","isHorizontal","isDiagonal","getPalmDirection","indexBase","pinkyBase","v1","v2","normal","isDownward","isUpward","isSideways","areFingersTogether","tipIndices","maxDistance","dist","max","recognizeKodalySign","curls","orientation","palmDir","thumbDir","fingersTogether","fingersExtended","Object","values","every","curl","fingersClosedExceptThumb","allFingersClosed","debug","sign","confidence","analyzeHand","fingerCurls","palmDirection","thumbDirection","possibleSigns","isDo","isRe","isMi","isFa"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst fingerJointPairs = {\r\n    thumb: [1, 2, 3, 4],\r\n    index: [5, 6, 7, 8],\r\n    middle: [9, 10, 11, 12],\r\n    ring: [13, 14, 15, 16],\r\n    pinky: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\r\n    const joints = fingerIndices.map(idx => landmarks[idx]);\r\n    const baseToTip = distance(joints[0], joints[joints.length - 1]);\r\n    const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => \r\n        sum + distance(joints[i], joints[i + 1]), 0);\r\n    return 1 - (baseToTip / totalLength); // 1 = fully curled, 0 = straight\r\n};\r\n\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst getThumbDirection = (landmarks) => {\r\n    const thumbBase = landmarks[1];\r\n    const thumbTip = landmarks[4];\r\n    \r\n    // Calculate thumb vector\r\n    const direction = {\r\n        x: thumbTip.x - thumbBase.x,\r\n        y: thumbTip.y - thumbBase.y,\r\n        z: thumbTip.z - thumbBase.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    // Calculate angles\r\n    const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\r\n    \r\n    return {\r\n        direction,\r\n        angleFromVertical,\r\n        isPointingDown: angleFromVertical > 120,\r\n        isPointingUp: angleFromVertical < 60,\r\n        isPointingForward: angleFromVertical >= 60 && angleFromVertical <= 120\r\n    };\r\n};\r\n\r\nconst getHandOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_base = landmarks[9];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Calculate hand direction vector\r\n    const direction = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    // Calculate angles\r\n    const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const angleFromHorizontal = Math.abs(90 - angleFromVertical);\r\n\r\n    return {\r\n        direction,\r\n        angleFromVertical,\r\n        angleFromHorizontal,\r\n        isVertical: angleFromVertical < 20 || angleFromVertical > 160,\r\n        isHorizontal: angleFromHorizontal < 20,\r\n        isDiagonal: angleFromVertical > 20 && angleFromVertical < 160 && angleFromHorizontal > 20\r\n    };\r\n};\r\n\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Calculate palm normal vector\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    // Cross product for normal vector\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n\r\n    return {\r\n        normal,\r\n        isDownward: normal.y > 0.7,\r\n        isUpward: normal.y < -0.7,\r\n        isSideways: Math.abs(normal.x) > 0.7\r\n    };\r\n};\r\n\r\nconst areFingersTogether = (landmarks) => {\r\n    const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\r\n    let maxDistance = 0;\r\n    \r\n    for (let i = 0; i < tipIndices.length - 1; i++) {\r\n        const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\r\n        maxDistance = Math.max(maxDistance, dist);\r\n    }\r\n    \r\n    return maxDistance < 0.1;\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Calculate finger curls\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n\r\n    // Check finger states\r\n    const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\r\n    const fingersClosedExceptThumb = \r\n        curls.index > 0.7 && \r\n        curls.middle > 0.7 && \r\n        curls.ring > 0.7 && \r\n        curls.pinky > 0.7;\r\n    const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\r\n\r\n    // Debug information\r\n    const debug = {\r\n        curls,\r\n        orientation,\r\n        palmDir,\r\n        thumbDir,\r\n        fingersTogether,\r\n        fingersExtended,\r\n        fingersClosedExceptThumb,\r\n        allFingersClosed\r\n    };\r\n\r\n    // Check for 'Do' - closed fist held horizontally\r\n    if (allFingersClosed && orientation.isHorizontal) {\r\n        return { sign: 'do', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Check for 'Re' - flat hand diagonal upward\r\n    if (fingersExtended && \r\n        fingersTogether && \r\n        orientation.isDiagonal && \r\n        orientation.angleFromVertical < 90) {\r\n        return { sign: 're', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Check for 'Mi' - flat hand horizontal\r\n    if (fingersExtended && \r\n        fingersTogether && \r\n        orientation.isHorizontal && \r\n        palmDir.isDownward) {\r\n        return { sign: 'mi', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Check for 'Fa' - fist with thumb pointing down\r\n    if (fingersClosedExceptThumb && \r\n        curls.thumb < 0.3 && // Thumb extended\r\n        thumbDir.isPointingDown) {\r\n        return { sign: 'fa', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Return debug information if no sign matched\r\n    return { sign: null, debug };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n    \r\n    const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\r\n    const fingersClosedExceptThumb = \r\n        curls.index > 0.7 && \r\n        curls.middle > 0.7 && \r\n        curls.ring > 0.7 && \r\n        curls.pinky > 0.7;\r\n    const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\r\n\r\n    return {\r\n        fingerCurls: curls,\r\n        orientation: orientation,\r\n        palmDirection: palmDir,\r\n        thumbDirection: thumbDir,\r\n        fingersTogether: fingersTogether,\r\n        fingersExtended: fingersExtended,\r\n        fingersClosedExceptThumb: fingersClosedExceptThumb,\r\n        allFingersClosed: allFingersClosed,\r\n        possibleSigns: {\r\n            isDo: allFingersClosed && orientation.isHorizontal,\r\n            isRe: fingersExtended && fingersTogether && orientation.isDiagonal && orientation.angleFromVertical < 90,\r\n            isMi: fingersExtended && fingersTogether && orientation.isHorizontal && palmDir.isDownward,\r\n            isFa: fingersClosedExceptThumb && curls.thumb < 0.3 && thumbDir.isPointingDown\r\n        }\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}