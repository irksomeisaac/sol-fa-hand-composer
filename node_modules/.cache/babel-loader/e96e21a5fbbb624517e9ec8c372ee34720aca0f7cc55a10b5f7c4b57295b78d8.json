{"ast":null,"code":"// Enhanced audio player with octave support\nconst BASE_NOTES = {\n  'do': 261.63,\n  // C4\n  're': 293.66,\n  // D4\n  'mi': 329.63,\n  // E4\n  'fa': 349.23,\n  // F4\n  'sol': 392.00,\n  // G4\n  'la': 440.00,\n  // A4\n  'ti': 493.88 // B4\n};\n\n// Get frequency for a note in a specific octave\nconst getNoteFrequency = (note, octave = 4) => {\n  const baseFreq = BASE_NOTES[note];\n  if (!baseFreq) return null;\n\n  // Each octave doubles or halves the frequency\n  const octaveMultiplier = Math.pow(2, octave - 4);\n  return baseFreq * octaveMultiplier;\n};\nclass AudioPlayer {\n  constructor() {\n    this.audioContext = null;\n    this.oscillator = null;\n    this.gainNode = null;\n    this.isPlaying = false;\n    this.currentNote = null;\n    this.currentOctave = 4;\n  }\n  initialize() {\n    if (!this.audioContext) {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      this.gainNode = this.audioContext.createGain();\n      this.gainNode.connect(this.audioContext.destination);\n      this.gainNode.gain.value = 0;\n    }\n  }\n  playNote(note, octave = 4) {\n    this.initialize();\n\n    // Don't restart the same note at same octave\n    if (this.currentNote === note && this.currentOctave === octave && this.isPlaying) {\n      return;\n    }\n    this.stopNote();\n    const frequency = getNoteFrequency(note, octave);\n    if (frequency) {\n      this.oscillator = this.audioContext.createOscillator();\n      this.oscillator.type = 'sine';\n      this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n      this.oscillator.connect(this.gainNode);\n      this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      this.gainNode.gain.linearRampToValueAtTime(0.2, this.audioContext.currentTime + 0.1);\n      this.oscillator.start();\n      this.isPlaying = true;\n      this.currentNote = note;\n      this.currentOctave = octave;\n    }\n  }\n  playNoteInOctave(note, octave) {\n    this.playNote(note, octave);\n  }\n  stopNote() {\n    if (this.oscillator && this.isPlaying) {\n      const releaseTime = this.audioContext.currentTime + 0.1;\n      this.gainNode.gain.linearRampToValueAtTime(0, releaseTime);\n      this.oscillator.stop(releaseTime);\n      this.isPlaying = false;\n      this.currentNote = null;\n    }\n  }\n\n  // Play a short beep for UI feedback\n  playUIFeedback(frequency = 800, duration = 100) {\n    this.initialize();\n    const oscillator = this.audioContext.createOscillator();\n    const gain = this.audioContext.createGain();\n    oscillator.connect(gain);\n    gain.connect(this.audioContext.destination);\n    oscillator.frequency.value = frequency;\n    oscillator.type = 'sine';\n    gain.gain.setValueAtTime(0, this.audioContext.currentTime);\n    gain.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.01);\n    gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + duration / 1000);\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + duration / 1000);\n  }\n}\nexport const audioPlayer = new AudioPlayer();","map":{"version":3,"names":["BASE_NOTES","getNoteFrequency","note","octave","baseFreq","octaveMultiplier","Math","pow","AudioPlayer","constructor","audioContext","oscillator","gainNode","isPlaying","currentNote","currentOctave","initialize","window","AudioContext","webkitAudioContext","createGain","connect","destination","gain","value","playNote","stopNote","frequency","createOscillator","type","setValueAtTime","currentTime","linearRampToValueAtTime","start","playNoteInOctave","releaseTime","stop","playUIFeedback","duration","audioPlayer"],"sources":["C:/Users/user/sol-fa-app/src/utils/audioUtils.js"],"sourcesContent":["// Enhanced audio player with octave support\r\nconst BASE_NOTES = {\r\n    'do': 261.63, // C4\r\n    're': 293.66, // D4\r\n    'mi': 329.63, // E4\r\n    'fa': 349.23, // F4\r\n    'sol': 392.00, // G4\r\n    'la': 440.00, // A4\r\n    'ti': 493.88  // B4\r\n};\r\n\r\n// Get frequency for a note in a specific octave\r\nconst getNoteFrequency = (note, octave = 4) => {\r\n    const baseFreq = BASE_NOTES[note];\r\n    if (!baseFreq) return null;\r\n    \r\n    // Each octave doubles or halves the frequency\r\n    const octaveMultiplier = Math.pow(2, octave - 4);\r\n    return baseFreq * octaveMultiplier;\r\n};\r\n\r\nclass AudioPlayer {\r\n    constructor() {\r\n        this.audioContext = null;\r\n        this.oscillator = null;\r\n        this.gainNode = null;\r\n        this.isPlaying = false;\r\n        this.currentNote = null;\r\n        this.currentOctave = 4;\r\n    }\r\n\r\n    initialize() {\r\n        if (!this.audioContext) {\r\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            this.gainNode = this.audioContext.createGain();\r\n            this.gainNode.connect(this.audioContext.destination);\r\n            this.gainNode.gain.value = 0;\r\n        }\r\n    }\r\n\r\n    playNote(note, octave = 4) {\r\n        this.initialize();\r\n\r\n        // Don't restart the same note at same octave\r\n        if (this.currentNote === note && this.currentOctave === octave && this.isPlaying) {\r\n            return;\r\n        }\r\n\r\n        this.stopNote();\r\n        \r\n        const frequency = getNoteFrequency(note, octave);\r\n        if (frequency) {\r\n            this.oscillator = this.audioContext.createOscillator();\r\n            this.oscillator.type = 'sine';\r\n            this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n            \r\n            this.oscillator.connect(this.gainNode);\r\n            this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\r\n            this.gainNode.gain.linearRampToValueAtTime(0.2, this.audioContext.currentTime + 0.1);\r\n            \r\n            this.oscillator.start();\r\n            this.isPlaying = true;\r\n            this.currentNote = note;\r\n            this.currentOctave = octave;\r\n        }\r\n    }\r\n\r\n    playNoteInOctave(note, octave) {\r\n        this.playNote(note, octave);\r\n    }\r\n\r\n    stopNote() {\r\n        if (this.oscillator && this.isPlaying) {\r\n            const releaseTime = this.audioContext.currentTime + 0.1;\r\n            this.gainNode.gain.linearRampToValueAtTime(0, releaseTime);\r\n            this.oscillator.stop(releaseTime);\r\n            this.isPlaying = false;\r\n            this.currentNote = null;\r\n        }\r\n    }\r\n\r\n    // Play a short beep for UI feedback\r\n    playUIFeedback(frequency = 800, duration = 100) {\r\n        this.initialize();\r\n        \r\n        const oscillator = this.audioContext.createOscillator();\r\n        const gain = this.audioContext.createGain();\r\n        \r\n        oscillator.connect(gain);\r\n        gain.connect(this.audioContext.destination);\r\n        \r\n        oscillator.frequency.value = frequency;\r\n        oscillator.type = 'sine';\r\n        \r\n        gain.gain.setValueAtTime(0, this.audioContext.currentTime);\r\n        gain.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.01);\r\n        gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + duration / 1000);\r\n        \r\n        oscillator.start(this.audioContext.currentTime);\r\n        oscillator.stop(this.audioContext.currentTime + duration / 1000);\r\n    }\r\n}\r\n\r\nexport const audioPlayer = new AudioPlayer();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}