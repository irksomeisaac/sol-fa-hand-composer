{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  // Get the base-to-tip distance\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const currentLength = distance(base, tip);\n\n  // Get the sum of segment lengths\n  let totalLength = 0;\n  for (let i = 0; i < 3; i++) {\n    totalLength += distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]);\n  }\n\n  // Compare actual length to maximum possible length\n  // Add a small normalization factor to prevent values over 1\n  const extensionRatio = Math.min(currentLength / (totalLength * 0.8), 1);\n  return extensionRatio;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst getFingerDirection = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n\n  // Calculate direction vector\n  const dir = normalize({\n    x: tip.x - base.x,\n    y: tip.y - base.y,\n    z: tip.z - base.z\n  });\n\n  // Calculate vertical angle\n  const verticalAngle = Math.acos(-dir.y) * (180 / Math.PI);\n  return {\n    vector: dir,\n    verticalAngle,\n    isPointingUp: verticalAngle < 45,\n    isPointingDown: verticalAngle > 135,\n    isHorizontal: verticalAngle > 45 && verticalAngle < 135\n  };\n};\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\nconst getPalmOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Calculate palm normal using cross product\n  const v1 = normalize({\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  });\n  const v2 = normalize({\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  });\n  const normal = normalize({\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  });\n  return {\n    vector: normal,\n    isDown: normal.y > 0.5,\n    isUp: normal.y < -0.5,\n    isSide: Math.abs(normal.x) > 0.5\n  };\n};\nconst analyzeHandShape = landmarks => {\n  // Calculate finger extensions with adjusted normalization\n  const extensions = {\n    thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n    index: getFingerExtension(landmarks, FINGERS.INDEX),\n    middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n    ring: getFingerExtension(landmarks, FINGERS.RING),\n    pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n  };\n\n  // Get direction of index finger (important for several signs)\n  const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\n  const palmOrientation = getPalmOrientation(landmarks);\n\n  // Adjusted thresholds for better distinction\n  const EXTENSION_THRESHOLD = 0.7;\n  const CURL_THRESHOLD = 0.3;\n  return {\n    extensions,\n    indexDirection,\n    palmOrientation,\n    isIndexPointingUp: indexDirection.isPointingUp && extensions.index > EXTENSION_THRESHOLD,\n    areOtherFingersClosed: extensions.middle < CURL_THRESHOLD && extensions.ring < CURL_THRESHOLD && extensions.pinky < CURL_THRESHOLD,\n    areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\n    areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const handShape = analyzeHandShape(landmarks);\n  let sign = null;\n  let confidence = 0;\n\n  // Debug information\n  const debug = handShape;\n\n  // Ti - index finger up, others closed\n  if (handShape.isIndexPointingUp && handShape.areOtherFingersClosed) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  // Do - all fingers closed, horizontal\n  else if (handShape.areAllFingersClosed && handShape.indexDirection.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // Re - all fingers extended diagonal up\n  else if (handShape.areAllFingersExtended && handShape.indexDirection.verticalAngle > 30 && handShape.indexDirection.verticalAngle < 60) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // Mi - all fingers extended horizontal, palm down\n  else if (handShape.areAllFingersExtended && handShape.indexDirection.isHorizontal && handShape.palmOrientation.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // Fa - closed fingers with thumb pointing down\n  else if (!handShape.extensions.thumb && handShape.areOtherFingersClosed && handShape.indexDirection.isPointingDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // Sol - all fingers extended forward, palm side\n  else if (handShape.areAllFingersExtended && Math.abs(handShape.indexDirection.vector.z) > 0.7 && handShape.palmOrientation.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // La - relaxed fingers, palm down\n  else if (!handShape.areAllFingersExtended && !handShape.areAllFingersClosed && handShape.palmOrientation.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  return analyzeHandShape(landmarks);\n};","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","getFingerExtension","landmarks","fingerIndices","base","tip","currentLength","distance","totalLength","i","extensionRatio","Math","min","p1","p2","sqrt","pow","x","y","z","getFingerDirection","dir","normalize","verticalAngle","acos","PI","vector","isPointingUp","isPointingDown","isHorizontal","magnitude","getPalmOrientation","wrist","indexBase","pinkyBase","v1","v2","normal","isDown","isUp","isSide","abs","analyzeHandShape","extensions","thumb","index","middle","ring","pinky","indexDirection","palmOrientation","EXTENSION_THRESHOLD","CURL_THRESHOLD","isIndexPointingUp","areOtherFingersClosed","areAllFingersClosed","Object","values","every","ext","areAllFingersExtended","recognizeKodalySign","length","handShape","sign","confidence","debug","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    // Get the base-to-tip distance\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const currentLength = distance(base, tip);\r\n\r\n    // Get the sum of segment lengths\r\n    let totalLength = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n        totalLength += distance(\r\n            landmarks[fingerIndices[i]],\r\n            landmarks[fingerIndices[i + 1]]\r\n        );\r\n    }\r\n\r\n    // Compare actual length to maximum possible length\r\n    // Add a small normalization factor to prevent values over 1\r\n    const extensionRatio = Math.min(currentLength / (totalLength * 0.8), 1);\r\n    return extensionRatio;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst getFingerDirection = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    \r\n    // Calculate direction vector\r\n    const dir = normalize({\r\n        x: tip.x - base.x,\r\n        y: tip.y - base.y,\r\n        z: tip.z - base.z\r\n    });\r\n\r\n    // Calculate vertical angle\r\n    const verticalAngle = Math.acos(-dir.y) * (180 / Math.PI);\r\n    \r\n    return {\r\n        vector: dir,\r\n        verticalAngle,\r\n        isPointingUp: verticalAngle < 45,\r\n        isPointingDown: verticalAngle > 135,\r\n        isHorizontal: verticalAngle > 45 && verticalAngle < 135\r\n    };\r\n};\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\nconst getPalmOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Calculate palm normal using cross product\r\n    const v1 = normalize({\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    });\r\n    \r\n    const v2 = normalize({\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    });\r\n\r\n    const normal = normalize({\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    });\r\n\r\n    return {\r\n        vector: normal,\r\n        isDown: normal.y > 0.5,\r\n        isUp: normal.y < -0.5,\r\n        isSide: Math.abs(normal.x) > 0.5\r\n    };\r\n};\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    // Calculate finger extensions with adjusted normalization\r\n    const extensions = {\r\n        thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n        index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n        middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerExtension(landmarks, FINGERS.RING),\r\n        pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    // Get direction of index finger (important for several signs)\r\n    const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n\r\n    // Adjusted thresholds for better distinction\r\n    const EXTENSION_THRESHOLD = 0.7;\r\n    const CURL_THRESHOLD = 0.3;\r\n\r\n    return {\r\n        extensions,\r\n        indexDirection,\r\n        palmOrientation,\r\n        isIndexPointingUp: indexDirection.isPointingUp && extensions.index > EXTENSION_THRESHOLD,\r\n        areOtherFingersClosed: \r\n            extensions.middle < CURL_THRESHOLD && \r\n            extensions.ring < CURL_THRESHOLD && \r\n            extensions.pinky < CURL_THRESHOLD,\r\n        areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\r\n        areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const handShape = analyzeHandShape(landmarks);\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Debug information\r\n    const debug = handShape;\r\n\r\n    // Ti - index finger up, others closed\r\n    if (handShape.isIndexPointingUp && handShape.areOtherFingersClosed) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n    // Do - all fingers closed, horizontal\r\n    else if (handShape.areAllFingersClosed && handShape.indexDirection.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // Re - all fingers extended diagonal up\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.indexDirection.verticalAngle > 30 && \r\n             handShape.indexDirection.verticalAngle < 60) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // Mi - all fingers extended horizontal, palm down\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.indexDirection.isHorizontal && \r\n             handShape.palmOrientation.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // Fa - closed fingers with thumb pointing down\r\n    else if (!handShape.extensions.thumb && \r\n             handShape.areOtherFingersClosed && \r\n             handShape.indexDirection.isPointingDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // Sol - all fingers extended forward, palm side\r\n    else if (handShape.areAllFingersExtended && \r\n             Math.abs(handShape.indexDirection.vector.z) > 0.7 && \r\n             handShape.palmOrientation.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // La - relaxed fingers, palm down\r\n    else if (!handShape.areAllFingersExtended && \r\n             !handShape.areAllFingersClosed &&\r\n             handShape.palmOrientation.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    return analyzeHandShape(landmarks);\r\n};\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG;EACZC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnBC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACvBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACtBC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAC1B,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAACC,SAAS,EAAEC,aAAa,KAAK;EACrD;EACA,MAAMC,IAAI,GAAGF,SAAS,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EACxC,MAAME,GAAG,GAAGH,SAAS,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EACvC,MAAMG,aAAa,GAAGC,QAAQ,CAACH,IAAI,EAAEC,GAAG,CAAC;;EAEzC;EACA,IAAIG,WAAW,GAAG,CAAC;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBD,WAAW,IAAID,QAAQ,CACnBL,SAAS,CAACC,aAAa,CAACM,CAAC,CAAC,CAAC,EAC3BP,SAAS,CAACC,aAAa,CAACM,CAAC,GAAG,CAAC,CAAC,CAClC,CAAC;EACL;;EAEA;EACA;EACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACN,aAAa,IAAIE,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;EACvE,OAAOE,cAAc;AACzB,CAAC;AAED,MAAMH,QAAQ,GAAGA,CAACM,EAAE,EAAEC,EAAE,KAAKH,IAAI,CAACI,IAAI,CAClCJ,IAAI,CAACK,GAAG,CAACH,EAAE,CAACI,CAAC,GAAGH,EAAE,CAACG,CAAC,EAAE,CAAC,CAAC,GACxBN,IAAI,CAACK,GAAG,CAACH,EAAE,CAACK,CAAC,GAAGJ,EAAE,CAACI,CAAC,EAAE,CAAC,CAAC,GACxBP,IAAI,CAACK,GAAG,CAACH,EAAE,CAACM,CAAC,GAAGL,EAAE,CAACK,CAAC,EAAE,CAAC,CAC3B,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAAClB,SAAS,EAAEC,aAAa,KAAK;EACrD,MAAMC,IAAI,GAAGF,SAAS,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EACxC,MAAME,GAAG,GAAGH,SAAS,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAMkB,GAAG,GAAGC,SAAS,CAAC;IAClBL,CAAC,EAAEZ,GAAG,CAACY,CAAC,GAAGb,IAAI,CAACa,CAAC;IACjBC,CAAC,EAAEb,GAAG,CAACa,CAAC,GAAGd,IAAI,CAACc,CAAC;IACjBC,CAAC,EAAEd,GAAG,CAACc,CAAC,GAAGf,IAAI,CAACe;EACpB,CAAC,CAAC;;EAEF;EACA,MAAMI,aAAa,GAAGZ,IAAI,CAACa,IAAI,CAAC,CAACH,GAAG,CAACH,CAAC,CAAC,IAAI,GAAG,GAAGP,IAAI,CAACc,EAAE,CAAC;EAEzD,OAAO;IACHC,MAAM,EAAEL,GAAG;IACXE,aAAa;IACbI,YAAY,EAAEJ,aAAa,GAAG,EAAE;IAChCK,cAAc,EAAEL,aAAa,GAAG,GAAG;IACnCM,YAAY,EAAEN,aAAa,GAAG,EAAE,IAAIA,aAAa,GAAG;EACxD,CAAC;AACL,CAAC;AAED,MAAMD,SAAS,GAAII,MAAM,IAAK;EAC1B,MAAMI,SAAS,GAAGnB,IAAI,CAACI,IAAI,CAACW,MAAM,CAACT,CAAC,GAAGS,MAAM,CAACT,CAAC,GAAGS,MAAM,CAACR,CAAC,GAAGQ,MAAM,CAACR,CAAC,GAAGQ,MAAM,CAACP,CAAC,GAAGO,MAAM,CAACP,CAAC,CAAC;EAC5F,OAAO;IACHF,CAAC,EAAES,MAAM,CAACT,CAAC,GAAGa,SAAS;IACvBZ,CAAC,EAAEQ,MAAM,CAACR,CAAC,GAAGY,SAAS;IACvBX,CAAC,EAAEO,MAAM,CAACP,CAAC,GAAGW;EAClB,CAAC;AACL,CAAC;AAED,MAAMC,kBAAkB,GAAI7B,SAAS,IAAK;EACtC,MAAM8B,KAAK,GAAG9B,SAAS,CAAC,CAAC,CAAC;EAC1B,MAAM+B,SAAS,GAAG/B,SAAS,CAAC,CAAC,CAAC;EAC9B,MAAMgC,SAAS,GAAGhC,SAAS,CAAC,EAAE,CAAC;;EAE/B;EACA,MAAMiC,EAAE,GAAGb,SAAS,CAAC;IACjBL,CAAC,EAAEgB,SAAS,CAAChB,CAAC,GAAGe,KAAK,CAACf,CAAC;IACxBC,CAAC,EAAEe,SAAS,CAACf,CAAC,GAAGc,KAAK,CAACd,CAAC;IACxBC,CAAC,EAAEc,SAAS,CAACd,CAAC,GAAGa,KAAK,CAACb;EAC3B,CAAC,CAAC;EAEF,MAAMiB,EAAE,GAAGd,SAAS,CAAC;IACjBL,CAAC,EAAEiB,SAAS,CAACjB,CAAC,GAAGe,KAAK,CAACf,CAAC;IACxBC,CAAC,EAAEgB,SAAS,CAAChB,CAAC,GAAGc,KAAK,CAACd,CAAC;IACxBC,CAAC,EAAEe,SAAS,CAACf,CAAC,GAAGa,KAAK,CAACb;EAC3B,CAAC,CAAC;EAEF,MAAMkB,MAAM,GAAGf,SAAS,CAAC;IACrBL,CAAC,EAAEkB,EAAE,CAACjB,CAAC,GAAGkB,EAAE,CAACjB,CAAC,GAAGgB,EAAE,CAAChB,CAAC,GAAGiB,EAAE,CAAClB,CAAC;IAC5BA,CAAC,EAAEiB,EAAE,CAAChB,CAAC,GAAGiB,EAAE,CAACnB,CAAC,GAAGkB,EAAE,CAAClB,CAAC,GAAGmB,EAAE,CAACjB,CAAC;IAC5BA,CAAC,EAAEgB,EAAE,CAAClB,CAAC,GAAGmB,EAAE,CAAClB,CAAC,GAAGiB,EAAE,CAACjB,CAAC,GAAGkB,EAAE,CAACnB;EAC/B,CAAC,CAAC;EAEF,OAAO;IACHS,MAAM,EAAEW,MAAM;IACdC,MAAM,EAAED,MAAM,CAACnB,CAAC,GAAG,GAAG;IACtBqB,IAAI,EAAEF,MAAM,CAACnB,CAAC,GAAG,CAAC,GAAG;IACrBsB,MAAM,EAAE7B,IAAI,CAAC8B,GAAG,CAACJ,MAAM,CAACpB,CAAC,CAAC,GAAG;EACjC,CAAC;AACL,CAAC;AAED,MAAMyB,gBAAgB,GAAIxC,SAAS,IAAK;EACpC;EACA,MAAMyC,UAAU,GAAG;IACfC,KAAK,EAAE3C,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAACC,KAAK,CAAC;IACnDiD,KAAK,EAAE5C,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAACE,KAAK,CAAC;IACnDiD,MAAM,EAAE7C,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAACG,MAAM,CAAC;IACrDiD,IAAI,EAAE9C,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAACI,IAAI,CAAC;IACjDiD,KAAK,EAAE/C,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAACK,KAAK;EACtD,CAAC;;EAED;EACA,MAAMiD,cAAc,GAAG7B,kBAAkB,CAAClB,SAAS,EAAEP,OAAO,CAACE,KAAK,CAAC;EACnE,MAAMqD,eAAe,GAAGnB,kBAAkB,CAAC7B,SAAS,CAAC;;EAErD;EACA,MAAMiD,mBAAmB,GAAG,GAAG;EAC/B,MAAMC,cAAc,GAAG,GAAG;EAE1B,OAAO;IACHT,UAAU;IACVM,cAAc;IACdC,eAAe;IACfG,iBAAiB,EAAEJ,cAAc,CAACtB,YAAY,IAAIgB,UAAU,CAACE,KAAK,GAAGM,mBAAmB;IACxFG,qBAAqB,EACjBX,UAAU,CAACG,MAAM,GAAGM,cAAc,IAClCT,UAAU,CAACI,IAAI,GAAGK,cAAc,IAChCT,UAAU,CAACK,KAAK,GAAGI,cAAc;IACrCG,mBAAmB,EAAEC,MAAM,CAACC,MAAM,CAACd,UAAU,CAAC,CAACe,KAAK,CAACC,GAAG,IAAIA,GAAG,GAAGP,cAAc,CAAC;IACjFQ,qBAAqB,EAAEJ,MAAM,CAACC,MAAM,CAACd,UAAU,CAAC,CAACe,KAAK,CAACC,GAAG,IAAIA,GAAG,GAAGR,mBAAmB;EAC3F,CAAC;AACL,CAAC;AAED,OAAO,MAAMU,mBAAmB,GAAI3D,SAAS,IAAK;EAC9C,IAAI,CAACA,SAAS,IAAIA,SAAS,CAAC4D,MAAM,GAAG,EAAE,EAAE,OAAO,IAAI;EAEpD,MAAMC,SAAS,GAAGrB,gBAAgB,CAACxC,SAAS,CAAC;EAC7C,IAAI8D,IAAI,GAAG,IAAI;EACf,IAAIC,UAAU,GAAG,CAAC;;EAElB;EACA,MAAMC,KAAK,GAAGH,SAAS;;EAEvB;EACA,IAAIA,SAAS,CAACV,iBAAiB,IAAIU,SAAS,CAACT,qBAAqB,EAAE;IAChEU,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACR,mBAAmB,IAAIQ,SAAS,CAACd,cAAc,CAACpB,YAAY,EAAE;IAC7EmC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BG,SAAS,CAACd,cAAc,CAAC1B,aAAa,GAAG,EAAE,IAC3CwC,SAAS,CAACd,cAAc,CAAC1B,aAAa,GAAG,EAAE,EAAE;IAClDyC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BG,SAAS,CAACd,cAAc,CAACpB,YAAY,IACrCkC,SAAS,CAACb,eAAe,CAACZ,MAAM,EAAE;IACvC0B,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAI,CAACF,SAAS,CAACpB,UAAU,CAACC,KAAK,IAC3BmB,SAAS,CAACT,qBAAqB,IAC/BS,SAAS,CAACd,cAAc,CAACrB,cAAc,EAAE;IAC9CoC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BjD,IAAI,CAAC8B,GAAG,CAACsB,SAAS,CAACd,cAAc,CAACvB,MAAM,CAACP,CAAC,CAAC,GAAG,GAAG,IACjD4C,SAAS,CAACb,eAAe,CAACV,MAAM,EAAE;IACvCwB,IAAI,GAAG,KAAK;IACZC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAI,CAACF,SAAS,CAACH,qBAAqB,IAChC,CAACG,SAAS,CAACR,mBAAmB,IAC9BQ,SAAS,CAACb,eAAe,CAACZ,MAAM,EAAE;IACvC0B,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EAEA,OAAO;IACHD,IAAI;IACJC,UAAU;IACVC;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIjE,SAAS,IAAK;EACtC,IAAI,CAACA,SAAS,IAAIA,SAAS,CAAC4D,MAAM,GAAG,EAAE,EAAE,OAAO,IAAI;EACpD,OAAOpB,gBAAgB,CAACxC,SAAS,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}