{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const dist = distance(base, tip);\n  const maxDist = fingerIndices.slice(0, -1).reduce((sum, _, i) => sum + distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]), 0);\n  return dist / maxDist; // 1 = fully extended, < 1 = curled\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst getFingerDirection = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n\n  // Get direction vector\n  const dir = normalize({\n    x: tip.x - base.x,\n    y: tip.y - base.y,\n    z: tip.z - base.z\n  });\n\n  // Calculate angles\n  const verticalAngle = Math.acos(-dir.y) * (180 / Math.PI);\n  return {\n    vector: dir,\n    verticalAngle,\n    isPointingUp: verticalAngle < 45,\n    isPointingDown: verticalAngle > 135,\n    isHorizontal: verticalAngle > 45 && verticalAngle < 135\n  };\n};\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\nconst getPalmOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Calculate palm normal using cross product\n  const v1 = normalize({\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  });\n  const v2 = normalize({\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  });\n  const normal = normalize({\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  });\n  return {\n    vector: normal,\n    isDown: normal.y > 0.5,\n    isUp: normal.y < -0.5,\n    isSide: Math.abs(normal.x) > 0.5\n  };\n};\nconst analyzeHandShape = landmarks => {\n  // Get extension state of each finger\n  const extensions = {\n    thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n    index: getFingerExtension(landmarks, FINGERS.INDEX),\n    middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n    ring: getFingerExtension(landmarks, FINGERS.RING),\n    pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n  };\n\n  // Get direction of index finger (important for several signs)\n  const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\n  const palmOrientation = getPalmOrientation(landmarks);\n  return {\n    extensions,\n    indexDirection,\n    palmOrientation,\n    isIndexPointingUp: indexDirection.isPointingUp && extensions.index > 0.7,\n    areOtherFingersClosed: extensions.middle < 0.5 && extensions.ring < 0.5 && extensions.pinky < 0.5,\n    areAllFingersClosed: Object.values(extensions).every(ext => ext < 0.5),\n    areAllFingersExtended: Object.values(extensions).every(ext => ext > 0.7)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const handShape = analyzeHandShape(landmarks);\n  let sign = null;\n  let confidence = 0;\n\n  // Ti - index finger up, others closed\n  if (handShape.isIndexPointingUp && handShape.areOtherFingersClosed) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  // Do - all fingers closed, horizontal\n  else if (handShape.areAllFingersClosed && handShape.indexDirection.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // Re - all fingers extended diagonal up\n  else if (handShape.areAllFingersExtended && handShape.indexDirection.verticalAngle > 30 && handShape.indexDirection.verticalAngle < 60) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // Mi - all fingers extended horizontal, palm down\n  else if (handShape.areAllFingersExtended && handShape.indexDirection.isHorizontal && handShape.palmOrientation.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // Fa - closed fingers with thumb pointing down\n  else if (handShape.extensions.thumb > 0.7 && handShape.areOtherFingersClosed && handShape.indexDirection.isPointingDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // Sol - all fingers extended forward, palm side\n  else if (handShape.areAllFingersExtended && Math.abs(handShape.indexDirection.vector.z) > 0.7 && handShape.palmOrientation.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // La - relaxed fingers, palm down\n  else if (!handShape.areAllFingersExtended && !handShape.areAllFingersClosed && handShape.palmOrientation.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  return {\n    sign,\n    confidence,\n    debug: handShape\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  return analyzeHandShape(landmarks);\n};","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","getFingerExtension","landmarks","fingerIndices","base","tip","dist","distance","maxDist","slice","reduce","sum","_","i","p1","p2","Math","sqrt","pow","x","y","z","getFingerDirection","dir","normalize","verticalAngle","acos","PI","vector","isPointingUp","isPointingDown","isHorizontal","magnitude","getPalmOrientation","wrist","indexBase","pinkyBase","v1","v2","normal","isDown","isUp","isSide","abs","analyzeHandShape","extensions","thumb","index","middle","ring","pinky","indexDirection","palmOrientation","isIndexPointingUp","areOtherFingersClosed","areAllFingersClosed","Object","values","every","ext","areAllFingersExtended","recognizeKodalySign","length","handShape","sign","confidence","debug","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const dist = distance(base, tip);\r\n    const maxDist = fingerIndices.slice(0, -1).reduce((sum, _, i) => \r\n        sum + distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]), 0);\r\n    return dist / maxDist; // 1 = fully extended, < 1 = curled\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst getFingerDirection = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    \r\n    // Get direction vector\r\n    const dir = normalize({\r\n        x: tip.x - base.x,\r\n        y: tip.y - base.y,\r\n        z: tip.z - base.z\r\n    });\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.acos(-dir.y) * (180 / Math.PI);\r\n    \r\n    return {\r\n        vector: dir,\r\n        verticalAngle,\r\n        isPointingUp: verticalAngle < 45,\r\n        isPointingDown: verticalAngle > 135,\r\n        isHorizontal: verticalAngle > 45 && verticalAngle < 135\r\n    };\r\n};\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\nconst getPalmOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Calculate palm normal using cross product\r\n    const v1 = normalize({\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    });\r\n    \r\n    const v2 = normalize({\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    });\r\n\r\n    const normal = normalize({\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    });\r\n\r\n    return {\r\n        vector: normal,\r\n        isDown: normal.y > 0.5,\r\n        isUp: normal.y < -0.5,\r\n        isSide: Math.abs(normal.x) > 0.5\r\n    };\r\n};\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    // Get extension state of each finger\r\n    const extensions = {\r\n        thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n        index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n        middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerExtension(landmarks, FINGERS.RING),\r\n        pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    // Get direction of index finger (important for several signs)\r\n    const indexDirection = getFingerDirection(landmarks, FINGERS.INDEX);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n\r\n    return {\r\n        extensions,\r\n        indexDirection,\r\n        palmOrientation,\r\n        isIndexPointingUp: indexDirection.isPointingUp && extensions.index > 0.7,\r\n        areOtherFingersClosed: \r\n            extensions.middle < 0.5 && \r\n            extensions.ring < 0.5 && \r\n            extensions.pinky < 0.5,\r\n        areAllFingersClosed: Object.values(extensions).every(ext => ext < 0.5),\r\n        areAllFingersExtended: Object.values(extensions).every(ext => ext > 0.7)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const handShape = analyzeHandShape(landmarks);\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Ti - index finger up, others closed\r\n    if (handShape.isIndexPointingUp && handShape.areOtherFingersClosed) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n    // Do - all fingers closed, horizontal\r\n    else if (handShape.areAllFingersClosed && handShape.indexDirection.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // Re - all fingers extended diagonal up\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.indexDirection.verticalAngle > 30 && \r\n             handShape.indexDirection.verticalAngle < 60) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // Mi - all fingers extended horizontal, palm down\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.indexDirection.isHorizontal && \r\n             handShape.palmOrientation.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // Fa - closed fingers with thumb pointing down\r\n    else if (handShape.extensions.thumb > 0.7 && \r\n             handShape.areOtherFingersClosed && \r\n             handShape.indexDirection.isPointingDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // Sol - all fingers extended forward, palm side\r\n    else if (handShape.areAllFingersExtended && \r\n             Math.abs(handShape.indexDirection.vector.z) > 0.7 && \r\n             handShape.palmOrientation.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // La - relaxed fingers, palm down\r\n    else if (!handShape.areAllFingersExtended && \r\n             !handShape.areAllFingersClosed &&\r\n             handShape.palmOrientation.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug: handShape\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    return analyzeHandShape(landmarks);\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}