{"ast":null,"code":"// Constants for finger indices\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\n\n// Basic helper functions\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\n\n// Calculate finger extension\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Get direct distance from base to tip\n  const directLength = distance(base, tip);\n\n  // Get sum of segment lengths\n  const segmentLength = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n\n  // Return ratio (0 = fully bent, 1 = straight)\n  return directLength / segmentLength;\n};\n\n// Get thumb direction\nconst getThumbDirection = landmarks => {\n  const thumbBase = landmarks[1];\n  const thumbTip = landmarks[4];\n  const dir = {\n    x: thumbTip.x - thumbBase.x,\n    y: thumbTip.y - thumbBase.y,\n    z: thumbTip.z - thumbBase.z\n  };\n  const normalized = normalize(dir);\n  const angle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  return {\n    angle,\n    isPointingDown: angle < -30,\n    isPointingUp: angle > 30\n  };\n};\n\n// Get hand direction\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n  const dir = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n  const normalized = normalize(dir);\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  return {\n    direction: normalized,\n    verticalAngle,\n    isPointingUp: verticalAngle > 45,\n    isPointingDown: verticalAngle < -45,\n    isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\n    isHorizontal: Math.abs(verticalAngle) < 20\n  };\n};\n\n// Get palm direction\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const index_base = landmarks[5];\n  const pinky_base = landmarks[17];\n  const v1 = {\n    x: index_base.x - wrist.x,\n    y: index_base.y - wrist.y,\n    z: index_base.z - wrist.z\n  };\n  const v2 = {\n    x: pinky_base.x - wrist.x,\n    y: pinky_base.y - wrist.y,\n    z: pinky_base.z - wrist.z\n  };\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n  const normalized = normalize(normal);\n  return {\n    normal: normalized,\n    isDown: normalized.y > 0.5,\n    isUp: normalized.y < -0.5,\n    isSide: Math.abs(normalized.x) > 0.5\n  };\n};\n\n// Analyze fingers function\nconst analyzeFingers = landmarks => {\n  const extensions = {\n    thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n    index: getFingerExtension(landmarks, FINGERS.INDEX),\n    middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n    ring: getFingerExtension(landmarks, FINGERS.RING),\n    pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n  };\n  return {\n    values: extensions\n  };\n};\n\n// Main recognition function\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n\n  // Debug info\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    },\n    thumbDirection: {\n      angle: thumbDir.angle,\n      isPointingDown: thumbDir.isPointingDown,\n      isPointingUp: thumbDir.isPointingUp\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // Log current values\n  console.log('Current hand state:', {\n    fingers: fingers.values,\n    handAngle: handDir.verticalAngle,\n    palmDirection: palmDir,\n    thumbDirection: thumbDir\n  });\n\n  // DO - Tight fist\n  if (fingers.values.thumb < 0.5 && fingers.values.index < 0.5 && fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n\n  // RE - Angled up, fingers together\n  else if (fingers.values.index > 0.8 && fingers.values.middle > 0.8 && fingers.values.ring > 0.8 && fingers.values.pinky > 0.8 && handDir.verticalAngle > 20 && handDir.verticalAngle < 70) {\n    sign = 're';\n    confidence = 0.9;\n  }\n\n  // MI - Flat hand horizontal\n  else if (fingers.values.index > 0.9 && fingers.values.middle > 0.9 && fingers.values.ring > 0.9 && fingers.values.pinky > 0.9 && Math.abs(handDir.verticalAngle) < 10) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n\n  // FA - Thumb pointing down, other fingers in fist\n  else if (fingers.values.thumb > 0.7 && fingers.values.index < 0.5 && fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5 && thumbDir.angle < -30) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n\n  // SOL - Curved fingers to side\n  else if (fingers.values.index > 0.6 && fingers.values.index < 0.9 && fingers.values.middle > 0.6 && fingers.values.middle < 0.9 && fingers.values.ring > 0.6 && fingers.values.ring < 0.9 && fingers.values.pinky > 0.6 && fingers.values.pinky < 0.9 && Math.abs(handDir.direction.x) > 0.6) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n\n  // LA - Curved fingers, palm down\n  else if (fingers.values.index > 0.5 && fingers.values.index < 0.8 && fingers.values.middle > 0.5 && fingers.values.middle < 0.8 && fingers.values.ring > 0.5 && fingers.values.ring < 0.8 && fingers.values.pinky > 0.5 && fingers.values.pinky < 0.8) {\n    sign = 'la';\n    confidence = 0.9;\n  }\n\n  // TI - Index up, others closed\n  else if (fingers.values.index > 0.8 && fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5 && handDir.verticalAngle > 30) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  if (sign) {\n    console.log('Detected:', sign, 'with confidence:', confidence);\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// Export for debugging\nexport function analyzeHand(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n  return {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir,\n    thumbDirection: thumbDir\n  };\n}","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","distance","p1","p2","Math","sqrt","pow","x","y","z","normalize","vector","magnitude","getFingerExtension","landmarks","fingerIndices","base","tip","mid1","mid2","directLength","segmentLength","getThumbDirection","thumbBase","thumbTip","dir","normalized","angle","atan2","PI","isPointingDown","isPointingUp","getHandDirection","wrist","middle_tip","verticalAngle","direction","isPointingForward","abs","max","isHorizontal","getPalmDirection","index_base","pinky_base","v1","v2","normal","isDown","isUp","isSide","analyzeFingers","extensions","thumb","index","middle","ring","pinky","values","recognizeKodalySign","length","fingers","handDir","palmDir","thumbDir","debug","handDirection","palmOrientation","thumbDirection","sign","confidence","console","log","handAngle","palmDirection","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Constants for finger indices\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\n// Basic helper functions\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(\r\n        vector.x * vector.x +\r\n        vector.y * vector.y +\r\n        vector.z * vector.z\r\n    );\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\n// Calculate finger extension\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Get direct distance from base to tip\r\n    const directLength = distance(base, tip);\r\n    \r\n    // Get sum of segment lengths\r\n    const segmentLength = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n    \r\n    // Return ratio (0 = fully bent, 1 = straight)\r\n    return directLength / segmentLength;\r\n};\r\n\r\n// Get thumb direction\r\nconst getThumbDirection = (landmarks) => {\r\n    const thumbBase = landmarks[1];\r\n    const thumbTip = landmarks[4];\r\n\r\n    const dir = {\r\n        x: thumbTip.x - thumbBase.x,\r\n        y: thumbTip.y - thumbBase.y,\r\n        z: thumbTip.z - thumbBase.z\r\n    };\r\n\r\n    const normalized = normalize(dir);\r\n    const angle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        angle,\r\n        isPointingDown: angle < -30,\r\n        isPointingUp: angle > 30\r\n    };\r\n};\r\n\r\n// Get hand direction\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n\r\n    const dir = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    const normalized = normalize(dir);\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction: normalized,\r\n        verticalAngle,\r\n        isPointingUp: verticalAngle > 45,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\r\n        isHorizontal: Math.abs(verticalAngle) < 20\r\n    };\r\n};\r\n\r\n// Get palm direction\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const index_base = landmarks[5];\r\n    const pinky_base = landmarks[17];\r\n\r\n    const v1 = {\r\n        x: index_base.x - wrist.x,\r\n        y: index_base.y - wrist.y,\r\n        z: index_base.z - wrist.z\r\n    };\r\n\r\n    const v2 = {\r\n        x: pinky_base.x - wrist.x,\r\n        y: pinky_base.y - wrist.y,\r\n        z: pinky_base.z - wrist.z\r\n    };\r\n\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    const normalized = normalize(normal);\r\n\r\n    return {\r\n        normal: normalized,\r\n        isDown: normalized.y > 0.5,\r\n        isUp: normalized.y < -0.5,\r\n        isSide: Math.abs(normalized.x) > 0.5\r\n    };\r\n};\r\n\r\n// Analyze fingers function\r\nconst analyzeFingers = (landmarks) => {\r\n    const extensions = {\r\n        thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n        index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n        middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerExtension(landmarks, FINGERS.RING),\r\n        pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    return {\r\n        values: extensions\r\n    };\r\n};\r\n\r\n// Main recognition function\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    // Debug info\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        },\r\n        thumbDirection: {\r\n            angle: thumbDir.angle,\r\n            isPointingDown: thumbDir.isPointingDown,\r\n            isPointingUp: thumbDir.isPointingUp\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Log current values\r\n    console.log('Current hand state:', {\r\n        fingers: fingers.values,\r\n        handAngle: handDir.verticalAngle,\r\n        palmDirection: palmDir,\r\n        thumbDirection: thumbDir\r\n    });\r\n\r\n    // DO - Tight fist\r\n    if (fingers.values.thumb < 0.5 &&    \r\n        fingers.values.index < 0.5 &&\r\n        fingers.values.middle < 0.5 &&\r\n        fingers.values.ring < 0.5 &&\r\n        fingers.values.pinky < 0.5) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // RE - Angled up, fingers together\r\n    else if (fingers.values.index > 0.8 &&     \r\n             fingers.values.middle > 0.8 &&\r\n             fingers.values.ring > 0.8 &&\r\n             fingers.values.pinky > 0.8 &&\r\n             handDir.verticalAngle > 20 &&     \r\n             handDir.verticalAngle < 70) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // MI - Flat hand horizontal\r\n    else if (fingers.values.index > 0.9 &&      \r\n             fingers.values.middle > 0.9 &&\r\n             fingers.values.ring > 0.9 &&\r\n             fingers.values.pinky > 0.9 &&\r\n             Math.abs(handDir.verticalAngle) < 10) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // FA - Thumb pointing down, other fingers in fist\r\n    else if (fingers.values.thumb > 0.7 &&      \r\n             fingers.values.index < 0.5 &&       \r\n             fingers.values.middle < 0.5 &&\r\n             fingers.values.ring < 0.5 &&\r\n             fingers.values.pinky < 0.5 &&\r\n             thumbDir.angle < -30) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // SOL - Curved fingers to side\r\n    else if (fingers.values.index > 0.6 &&      \r\n             fingers.values.index < 0.9 &&       \r\n             fingers.values.middle > 0.6 &&\r\n             fingers.values.middle < 0.9 &&\r\n             fingers.values.ring > 0.6 &&\r\n             fingers.values.ring < 0.9 &&\r\n             fingers.values.pinky > 0.6 &&\r\n             fingers.values.pinky < 0.9 &&\r\n             Math.abs(handDir.direction.x) > 0.6) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // LA - Curved fingers, palm down\r\n    else if (fingers.values.index > 0.5 &&      \r\n             fingers.values.index < 0.8 &&       \r\n             fingers.values.middle > 0.5 &&\r\n             fingers.values.middle < 0.8 &&\r\n             fingers.values.ring > 0.5 &&\r\n             fingers.values.ring < 0.8 &&\r\n             fingers.values.pinky > 0.5 &&\r\n             fingers.values.pinky < 0.8) {\r\n        sign = 'la';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // TI - Index up, others closed\r\n    else if (fingers.values.index > 0.8 &&      \r\n             fingers.values.middle < 0.5 &&      \r\n             fingers.values.ring < 0.5 &&\r\n             fingers.values.pinky < 0.5 &&\r\n             handDir.verticalAngle > 30) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    if (sign) {\r\n        console.log('Detected:', sign, 'with confidence:', confidence);\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// Export for debugging\r\nexport function analyzeHand(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    return {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir,\r\n        thumbDirection: thumbDir\r\n    };\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}