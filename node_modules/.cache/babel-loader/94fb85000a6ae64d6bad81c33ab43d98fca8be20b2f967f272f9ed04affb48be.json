{"ast":null,"code":"// Kodály hand sign positions database with revised recognition\nexport const kodalySigns = {\n  'do': {\n    description: 'Closed fist, pointing downward',\n    keyFeatures: {\n      allFingersClosed: true,\n      thumbClosed: true,\n      direction: 'down'\n    }\n  },\n  're': {\n    description: 'Hand at 45-degree angle, fingers straight',\n    keyFeatures: {\n      allFingersExtended: true,\n      fingersTogether: true,\n      direction: 'diagonal'\n    }\n  },\n  'mi': {\n    description: 'Hand horizontal, palm down, fingers straight',\n    keyFeatures: {\n      allFingersExtended: true,\n      fingersTogether: true,\n      direction: 'forward'\n    }\n  },\n  'fa': {\n    description: 'Fist with thumb pointing down',\n    keyFeatures: {\n      fingersClose: true,\n      thumbExtended: true,\n      direction: 'down'\n    }\n  },\n  'sol': {\n    description: 'Hand pointing forward, palm facing side',\n    keyFeatures: {\n      allFingersExtended: true,\n      fingersTogether: true,\n      direction: 'forward'\n    }\n  },\n  'la': {\n    description: 'Hand cupped downward, fingers relaxed',\n    keyFeatures: {\n      fingersCurved: true,\n      direction: 'down'\n    }\n  },\n  'ti': {\n    description: 'Index finger pointing up, other fingers closed',\n    keyFeatures: {\n      indexExtended: true,\n      otherFingersClosed: true,\n      direction: 'up'\n    }\n  }\n};\n\n// Helper function to calculate distance between points\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\n\n// Check if a finger is extended\nconst isFingerExtended = (base, tip) => {\n  return distance(base, tip) > 0.1;\n};\n\n// Get the primary direction of the hand\nconst getHandDirection = (wrist, middleBase, middleTip) => {\n  const dx = middleTip.x - wrist.x;\n  const dy = middleTip.y - wrist.y;\n  const dz = middleTip.z - wrist.z;\n  const angleY = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz)) * (180 / Math.PI);\n  if (angleY > 30) return 'up';\n  if (angleY < -30) return 'down';\n  if (Math.abs(angleY) <= 30) {\n    if (Math.abs(dx) > Math.abs(dz)) return 'diagonal';\n    return 'forward';\n  }\n  return 'unknown';\n};\n\n// Check the state of each finger\nconst analyzeFingers = landmarks => {\n  const wrist = landmarks[0];\n\n  // Finger indices for each joint\n  const fingerJoints = {\n    thumb: [1, 2, 3, 4],\n    index: [5, 6, 7, 8],\n    middle: [9, 10, 11, 12],\n    ring: [13, 14, 15, 16],\n    pinky: [17, 18, 19, 20]\n  };\n  const fingerStates = {\n    thumb: {\n      extended: isFingerExtended(landmarks[fingerJoints.thumb[0]], landmarks[fingerJoints.thumb[3]]),\n      direction: getFingerDirection(landmarks[fingerJoints.thumb[0]], landmarks[fingerJoints.thumb[3]])\n    },\n    index: {\n      extended: isFingerExtended(landmarks[fingerJoints.index[0]], landmarks[fingerJoints.index[3]]),\n      direction: getFingerDirection(landmarks[fingerJoints.index[0]], landmarks[fingerJoints.index[3]])\n    },\n    middle: {\n      extended: isFingerExtended(landmarks[fingerJoints.middle[0]], landmarks[fingerJoints.middle[3]]),\n      direction: getFingerDirection(landmarks[fingerJoints.middle[0]], landmarks[fingerJoints.middle[3]])\n    },\n    ring: {\n      extended: isFingerExtended(landmarks[fingerJoints.ring[0]], landmarks[fingerJoints.ring[3]]),\n      direction: getFingerDirection(landmarks[fingerJoints.ring[0]], landmarks[fingerJoints.ring[3]])\n    },\n    pinky: {\n      extended: isFingerExtended(landmarks[fingerJoints.pinky[0]], landmarks[fingerJoints.pinky[3]]),\n      direction: getFingerDirection(landmarks[fingerJoints.pinky[0]], landmarks[fingerJoints.pinky[3]])\n    }\n  };\n  return {\n    allExtended: Object.values(fingerStates).every(finger => finger.extended),\n    allClosed: Object.values(fingerStates).every(finger => !finger.extended),\n    thumbExtended: fingerStates.thumb.extended,\n    indexExtended: fingerStates.index.extended,\n    fingerStates\n  };\n};\nconst getFingerDirection = (base, tip) => {\n  const dx = tip.x - base.x;\n  const dy = tip.y - base.y;\n  const dz = tip.z - base.z;\n  const angleY = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz)) * (180 / Math.PI);\n  if (angleY > 30) return 'up';\n  if (angleY < -30) return 'down';\n  return 'forward';\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n  const fingerAnalysis = analyzeFingers(landmarks);\n  const handDirection = getHandDirection(wrist, middleBase, middleTip);\n\n  // Debug information\n  const analysis = {\n    fingerAnalysis,\n    handDirection,\n    fingerStates: fingerAnalysis.fingerStates\n  };\n\n  // Recognition logic for each sign\n  if (fingerAnalysis.indexExtended && !fingerAnalysis.fingerStates.middle.extended && !fingerAnalysis.fingerStates.ring.extended && !fingerAnalysis.fingerStates.pinky.extended && handDirection === 'up') {\n    return {\n      sign: 'ti',\n      confidence: 0.9,\n      analysis\n    };\n  }\n  if (fingerAnalysis.thumbExtended && !fingerAnalysis.fingerStates.index.extended && !fingerAnalysis.fingerStates.middle.extended && !fingerAnalysis.fingerStates.ring.extended && !fingerAnalysis.fingerStates.pinky.extended && handDirection === 'down') {\n    return {\n      sign: 'fa',\n      confidence: 0.9,\n      analysis\n    };\n  }\n  if (fingerAnalysis.allClosed && handDirection === 'down' && !fingerAnalysis.thumbExtended) {\n    return {\n      sign: 'do',\n      confidence: 0.9,\n      analysis\n    };\n  }\n  if (fingerAnalysis.allExtended && handDirection === 'diagonal') {\n    return {\n      sign: 're',\n      confidence: 0.9,\n      analysis\n    };\n  }\n  if (fingerAnalysis.allExtended && handDirection === 'forward') {\n    // Distinguish between 'mi' and 'sol' based on hand rotation\n    const palmDirection = getPalmDirection(landmarks);\n    if (palmDirection === 'down') {\n      return {\n        sign: 'mi',\n        confidence: 0.9,\n        analysis\n      };\n    }\n    if (palmDirection === 'side') {\n      return {\n        sign: 'sol',\n        confidence: 0.9,\n        analysis\n      };\n    }\n  }\n\n  // La has slightly curved fingers\n  if (!fingerAnalysis.allExtended && !fingerAnalysis.allClosed && handDirection === 'down') {\n    return {\n      sign: 'la',\n      confidence: 0.8,\n      analysis\n    };\n  }\n  return null;\n};\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const index = landmarks[5];\n  const pinky = landmarks[17];\n\n  // Calculate palm normal using cross product\n  const v1 = {\n    x: index.x - wrist.x,\n    y: index.y - wrist.y,\n    z: index.z - wrist.z\n  };\n  const v2 = {\n    x: pinky.x - wrist.x,\n    y: pinky.y - wrist.y,\n    z: pinky.z - wrist.z\n  };\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n  if (Math.abs(normal.y) > 0.7) return 'down';\n  if (Math.abs(normal.x) > 0.7) return 'side';\n  return 'unknown';\n};\n\n// Export for debugging\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n  return {\n    fingerAnalysis: analyzeFingers(landmarks),\n    handDirection: getHandDirection(wrist, middleBase, middleTip),\n    palmDirection: getPalmDirection(landmarks)\n  };\n};","map":{"version":3,"names":["kodalySigns","description","keyFeatures","allFingersClosed","thumbClosed","direction","allFingersExtended","fingersTogether","fingersClose","thumbExtended","fingersCurved","indexExtended","otherFingersClosed","distance","p1","p2","Math","sqrt","pow","x","y","z","isFingerExtended","base","tip","getHandDirection","wrist","middleBase","middleTip","dx","dy","dz","angleY","atan2","PI","abs","analyzeFingers","landmarks","fingerJoints","thumb","index","middle","ring","pinky","fingerStates","extended","getFingerDirection","allExtended","Object","values","every","finger","allClosed","recognizeKodalySign","length","fingerAnalysis","handDirection","analysis","sign","confidence","palmDirection","getPalmDirection","v1","v2","normal","magnitude","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign positions database with revised recognition\r\nexport const kodalySigns = {\r\n    'do': {\r\n        description: 'Closed fist, pointing downward',\r\n        keyFeatures: {\r\n            allFingersClosed: true,\r\n            thumbClosed: true,\r\n            direction: 'down'\r\n        }\r\n    },\r\n    're': {\r\n        description: 'Hand at 45-degree angle, fingers straight',\r\n        keyFeatures: {\r\n            allFingersExtended: true,\r\n            fingersTogether: true,\r\n            direction: 'diagonal'\r\n        }\r\n    },\r\n    'mi': {\r\n        description: 'Hand horizontal, palm down, fingers straight',\r\n        keyFeatures: {\r\n            allFingersExtended: true,\r\n            fingersTogether: true,\r\n            direction: 'forward'\r\n        }\r\n    },\r\n    'fa': {\r\n        description: 'Fist with thumb pointing down',\r\n        keyFeatures: {\r\n            fingersClose: true,\r\n            thumbExtended: true,\r\n            direction: 'down'\r\n        }\r\n    },\r\n    'sol': {\r\n        description: 'Hand pointing forward, palm facing side',\r\n        keyFeatures: {\r\n            allFingersExtended: true,\r\n            fingersTogether: true,\r\n            direction: 'forward'\r\n        }\r\n    },\r\n    'la': {\r\n        description: 'Hand cupped downward, fingers relaxed',\r\n        keyFeatures: {\r\n            fingersCurved: true,\r\n            direction: 'down'\r\n        }\r\n    },\r\n    'ti': {\r\n        description: 'Index finger pointing up, other fingers closed',\r\n        keyFeatures: {\r\n            indexExtended: true,\r\n            otherFingersClosed: true,\r\n            direction: 'up'\r\n        }\r\n    }\r\n};\r\n\r\n// Helper function to calculate distance between points\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\n// Check if a finger is extended\r\nconst isFingerExtended = (base, tip) => {\r\n    return distance(base, tip) > 0.1;\r\n};\r\n\r\n// Get the primary direction of the hand\r\nconst getHandDirection = (wrist, middleBase, middleTip) => {\r\n    const dx = middleTip.x - wrist.x;\r\n    const dy = middleTip.y - wrist.y;\r\n    const dz = middleTip.z - wrist.z;\r\n    \r\n    const angleY = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz)) * (180 / Math.PI);\r\n    \r\n    if (angleY > 30) return 'up';\r\n    if (angleY < -30) return 'down';\r\n    if (Math.abs(angleY) <= 30) {\r\n        if (Math.abs(dx) > Math.abs(dz)) return 'diagonal';\r\n        return 'forward';\r\n    }\r\n    return 'unknown';\r\n};\r\n\r\n// Check the state of each finger\r\nconst analyzeFingers = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    \r\n    // Finger indices for each joint\r\n    const fingerJoints = {\r\n        thumb: [1, 2, 3, 4],\r\n        index: [5, 6, 7, 8],\r\n        middle: [9, 10, 11, 12],\r\n        ring: [13, 14, 15, 16],\r\n        pinky: [17, 18, 19, 20]\r\n    };\r\n    \r\n    const fingerStates = {\r\n        thumb: {\r\n            extended: isFingerExtended(landmarks[fingerJoints.thumb[0]], landmarks[fingerJoints.thumb[3]]),\r\n            direction: getFingerDirection(landmarks[fingerJoints.thumb[0]], landmarks[fingerJoints.thumb[3]])\r\n        },\r\n        index: {\r\n            extended: isFingerExtended(landmarks[fingerJoints.index[0]], landmarks[fingerJoints.index[3]]),\r\n            direction: getFingerDirection(landmarks[fingerJoints.index[0]], landmarks[fingerJoints.index[3]])\r\n        },\r\n        middle: {\r\n            extended: isFingerExtended(landmarks[fingerJoints.middle[0]], landmarks[fingerJoints.middle[3]]),\r\n            direction: getFingerDirection(landmarks[fingerJoints.middle[0]], landmarks[fingerJoints.middle[3]])\r\n        },\r\n        ring: {\r\n            extended: isFingerExtended(landmarks[fingerJoints.ring[0]], landmarks[fingerJoints.ring[3]]),\r\n            direction: getFingerDirection(landmarks[fingerJoints.ring[0]], landmarks[fingerJoints.ring[3]])\r\n        },\r\n        pinky: {\r\n            extended: isFingerExtended(landmarks[fingerJoints.pinky[0]], landmarks[fingerJoints.pinky[3]]),\r\n            direction: getFingerDirection(landmarks[fingerJoints.pinky[0]], landmarks[fingerJoints.pinky[3]])\r\n        }\r\n    };\r\n    \r\n    return {\r\n        allExtended: Object.values(fingerStates).every(finger => finger.extended),\r\n        allClosed: Object.values(fingerStates).every(finger => !finger.extended),\r\n        thumbExtended: fingerStates.thumb.extended,\r\n        indexExtended: fingerStates.index.extended,\r\n        fingerStates\r\n    };\r\n};\r\n\r\nconst getFingerDirection = (base, tip) => {\r\n    const dx = tip.x - base.x;\r\n    const dy = tip.y - base.y;\r\n    const dz = tip.z - base.z;\r\n    \r\n    const angleY = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz)) * (180 / Math.PI);\r\n    \r\n    if (angleY > 30) return 'up';\r\n    if (angleY < -30) return 'down';\r\n    return 'forward';\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n    \r\n    const fingerAnalysis = analyzeFingers(landmarks);\r\n    const handDirection = getHandDirection(wrist, middleBase, middleTip);\r\n    \r\n    // Debug information\r\n    const analysis = {\r\n        fingerAnalysis,\r\n        handDirection,\r\n        fingerStates: fingerAnalysis.fingerStates\r\n    };\r\n    \r\n    // Recognition logic for each sign\r\n    if (fingerAnalysis.indexExtended && !fingerAnalysis.fingerStates.middle.extended && \r\n        !fingerAnalysis.fingerStates.ring.extended && !fingerAnalysis.fingerStates.pinky.extended &&\r\n        handDirection === 'up') {\r\n        return { sign: 'ti', confidence: 0.9, analysis };\r\n    }\r\n    \r\n    if (fingerAnalysis.thumbExtended && !fingerAnalysis.fingerStates.index.extended &&\r\n        !fingerAnalysis.fingerStates.middle.extended && !fingerAnalysis.fingerStates.ring.extended &&\r\n        !fingerAnalysis.fingerStates.pinky.extended && handDirection === 'down') {\r\n        return { sign: 'fa', confidence: 0.9, analysis };\r\n    }\r\n    \r\n    if (fingerAnalysis.allClosed && handDirection === 'down' && !fingerAnalysis.thumbExtended) {\r\n        return { sign: 'do', confidence: 0.9, analysis };\r\n    }\r\n    \r\n    if (fingerAnalysis.allExtended && handDirection === 'diagonal') {\r\n        return { sign: 're', confidence: 0.9, analysis };\r\n    }\r\n    \r\n    if (fingerAnalysis.allExtended && handDirection === 'forward') {\r\n        // Distinguish between 'mi' and 'sol' based on hand rotation\r\n        const palmDirection = getPalmDirection(landmarks);\r\n        if (palmDirection === 'down') {\r\n            return { sign: 'mi', confidence: 0.9, analysis };\r\n        }\r\n        if (palmDirection === 'side') {\r\n            return { sign: 'sol', confidence: 0.9, analysis };\r\n        }\r\n    }\r\n    \r\n    // La has slightly curved fingers\r\n    if (!fingerAnalysis.allExtended && !fingerAnalysis.allClosed && handDirection === 'down') {\r\n        return { sign: 'la', confidence: 0.8, analysis };\r\n    }\r\n    \r\n    return null;\r\n};\r\n\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const index = landmarks[5];\r\n    const pinky = landmarks[17];\r\n    \r\n    // Calculate palm normal using cross product\r\n    const v1 = {\r\n        x: index.x - wrist.x,\r\n        y: index.y - wrist.y,\r\n        z: index.z - wrist.z\r\n    };\r\n    \r\n    const v2 = {\r\n        x: pinky.x - wrist.x,\r\n        y: pinky.y - wrist.y,\r\n        z: pinky.z - wrist.z\r\n    };\r\n    \r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n    \r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n    \r\n    if (Math.abs(normal.y) > 0.7) return 'down';\r\n    if (Math.abs(normal.x) > 0.7) return 'side';\r\n    return 'unknown';\r\n};\r\n\r\n// Export for debugging\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n    \r\n    return {\r\n        fingerAnalysis: analyzeFingers(landmarks),\r\n        handDirection: getHandDirection(wrist, middleBase, middleTip),\r\n        palmDirection: getPalmDirection(landmarks)\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}