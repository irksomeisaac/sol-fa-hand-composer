{"ast":null,"code":"// Constants\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\n\n// Basic helper functions\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  if (magnitude === 0) return {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\n\n// Calculate finger extension\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  const base = landmarks[fingerIndices[0]];\n  const tip = landmarks[fingerIndices[3]];\n\n  // Direct distance from base to tip\n  const directDistance = distance(base, tip);\n\n  // Calculate total segment length\n  let segmentLength = 0;\n  for (let i = 0; i < 3; i++) {\n    segmentLength += distance(landmarks[fingerIndices[i]], landmarks[fingerIndices[i + 1]]);\n  }\n\n  // Return ratio of direct distance to segment length\n  return directDistance / segmentLength;\n};\n\n// Get hand direction\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n  const dir = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n  const normalized = normalize(dir);\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  return {\n    direction: normalized,\n    verticalAngle,\n    isPointingUp: verticalAngle > 45,\n    isPointingDown: verticalAngle < -45,\n    isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\n    isHorizontal: Math.abs(verticalAngle) < 20\n  };\n};\n\n// Get palm direction\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n  const normalized = normalize(normal);\n  return {\n    normal: normalized,\n    isDown: normalized.y > 0.5,\n    isUp: normalized.y < -0.5,\n    isSide: Math.abs(normalized.x) > 0.5\n  };\n};\n\n// Get thumb direction\nconst getThumbDirection = landmarks => {\n  const thumbBase = landmarks[1];\n  const thumbTip = landmarks[4];\n  const dir = normalize({\n    x: thumbTip.x - thumbBase.x,\n    y: thumbTip.y - thumbBase.y,\n    z: thumbTip.z - thumbBase.z\n  });\n  const angle = Math.atan2(-dir.y, Math.sqrt(dir.x * dir.x + dir.z * dir.z)) * (180 / Math.PI);\n  return {\n    angle,\n    isPointingDown: angle < -30,\n    isPointingUp: angle > 30\n  };\n};\n\n// Analyze all fingers\nconst analyzeFingers = landmarks => {\n  return {\n    values: {\n      thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n      index: getFingerExtension(landmarks, FINGERS.INDEX),\n      middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n      ring: getFingerExtension(landmarks, FINGERS.RING),\n      pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n    }\n  };\n};\n\n// Main recognition function\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n\n  // Debug info\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    },\n    thumbDirection: {\n      angle: thumbDir.angle,\n      isPointingDown: thumbDir.isPointingDown,\n      isPointingUp: thumbDir.isPointingUp\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // DO - Tight fist\n  if (fingers.values.thumb < 0.7 && fingers.values.index < 0.4 && fingers.values.middle < 0.4 && fingers.values.ring < 0.4 && fingers.values.pinky < 0.4) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n\n  // RE - Angled up, fingers together\n  else if (fingers.values.index > 0.8 && fingers.values.middle > 0.8 && fingers.values.ring > 0.8 && fingers.values.pinky > 0.8 && handDir.verticalAngle > 20 && handDir.verticalAngle < 70) {\n    sign = 're';\n    confidence = 0.9;\n  }\n\n  // MI - Flat hand horizontal\n  else if (fingers.values.index > 0.9 && fingers.values.middle > 0.9 && fingers.values.ring > 0.9 && fingers.values.pinky > 0.9 && Math.abs(handDir.verticalAngle) < 20) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n\n  // FA - Thumb pointing down, other fingers in fist\n  else if (fingers.values.thumb > 0.7 && fingers.values.index < 0.5 && fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5 && thumbDir.angle < -30) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n\n  // SOL - Curved fingers to side\n  else if (fingers.values.index > 0.8 && fingers.values.middle > 0.8 && fingers.values.ring > 0.8 && fingers.values.pinky > 0.8 && Math.abs(handDir.direction.x) > 0.5 && !handDir.isPointingUp && !handDir.isPointingDown) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n\n  // LA - Based on the values from your screenshot\n  else if (fingers.values.thumb > 0.9 && fingers.values.index > 0.9 && fingers.values.middle > 0.9 && fingers.values.ring > 0.9 && fingers.values.pinky > 0.9 && handDir.verticalAngle < -45) {\n    sign = 'la';\n    confidence = 0.9;\n  }\n\n  // TI - Index up, others closed\n  else if (fingers.values.index > 0.8 && fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5 && handDir.verticalAngle > 30) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n\n  // Log detected sign\n  if (sign) {\n    console.log('Detected:', sign, 'with confidence:', confidence);\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// Export for debugging\nexport function analyzeHand(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  const thumbDir = getThumbDirection(landmarks);\n  return {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir,\n    thumbDirection: thumbDir\n  };\n}","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","distance","p1","p2","Math","sqrt","pow","x","y","z","normalize","vector","magnitude","getFingerExtension","landmarks","fingerIndices","base","tip","directDistance","segmentLength","i","getHandDirection","wrist","middle_tip","dir","normalized","verticalAngle","atan2","PI","direction","isPointingUp","isPointingDown","isPointingForward","abs","max","isHorizontal","getPalmDirection","indexBase","pinkyBase","v1","v2","normal","isDown","isUp","isSide","getThumbDirection","thumbBase","thumbTip","angle","analyzeFingers","values","thumb","index","middle","ring","pinky","recognizeKodalySign","length","fingers","handDir","palmDir","thumbDir","debug","extensions","handDirection","palmOrientation","thumbDirection","sign","confidence","console","log","analyzeHand","palmDirection"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Constants\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\n// Basic helper functions\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    if (magnitude === 0) return { x: 0, y: 0, z: 0 };\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\n// Calculate finger extension\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    const base = landmarks[fingerIndices[0]];\r\n    const tip = landmarks[fingerIndices[3]];\r\n\r\n    // Direct distance from base to tip\r\n    const directDistance = distance(base, tip);\r\n    \r\n    // Calculate total segment length\r\n    let segmentLength = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n        segmentLength += distance(\r\n            landmarks[fingerIndices[i]], \r\n            landmarks[fingerIndices[i + 1]]\r\n        );\r\n    }\r\n    \r\n    // Return ratio of direct distance to segment length\r\n    return directDistance / segmentLength;\r\n};\r\n\r\n// Get hand direction\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n\r\n    const dir = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    const normalized = normalize(dir);\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction: normalized,\r\n        verticalAngle,\r\n        isPointingUp: verticalAngle > 45,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\r\n        isHorizontal: Math.abs(verticalAngle) < 20\r\n    };\r\n};\r\n\r\n// Get palm direction\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    const normalized = normalize(normal);\r\n\r\n    return {\r\n        normal: normalized,\r\n        isDown: normalized.y > 0.5,\r\n        isUp: normalized.y < -0.5,\r\n        isSide: Math.abs(normalized.x) > 0.5\r\n    };\r\n};\r\n\r\n// Get thumb direction\r\nconst getThumbDirection = (landmarks) => {\r\n    const thumbBase = landmarks[1];\r\n    const thumbTip = landmarks[4];\r\n\r\n    const dir = normalize({\r\n        x: thumbTip.x - thumbBase.x,\r\n        y: thumbTip.y - thumbBase.y,\r\n        z: thumbTip.z - thumbBase.z\r\n    });\r\n\r\n    const angle = Math.atan2(-dir.y, Math.sqrt(dir.x * dir.x + dir.z * dir.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        angle,\r\n        isPointingDown: angle < -30,\r\n        isPointingUp: angle > 30\r\n    };\r\n};\r\n\r\n// Analyze all fingers\r\nconst analyzeFingers = (landmarks) => {\r\n    return {\r\n        values: {\r\n            thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n            index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n            middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n            ring: getFingerExtension(landmarks, FINGERS.RING),\r\n            pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n        }\r\n    };\r\n};\r\n\r\n// Main recognition function\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    // Debug info\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        },\r\n        thumbDirection: {\r\n            angle: thumbDir.angle,\r\n            isPointingDown: thumbDir.isPointingDown,\r\n            isPointingUp: thumbDir.isPointingUp\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // DO - Tight fist\r\n    if (fingers.values.thumb < 0.7 &&    \r\n        fingers.values.index < 0.4 &&     \r\n        fingers.values.middle < 0.4 &&\r\n        fingers.values.ring < 0.4 &&\r\n        fingers.values.pinky < 0.4) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // RE - Angled up, fingers together\r\n    else if (fingers.values.index > 0.8 &&     \r\n             fingers.values.middle > 0.8 &&\r\n             fingers.values.ring > 0.8 &&\r\n             fingers.values.pinky > 0.8 &&\r\n             handDir.verticalAngle > 20 &&     \r\n             handDir.verticalAngle < 70) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // MI - Flat hand horizontal\r\n    else if (fingers.values.index > 0.9 &&      \r\n             fingers.values.middle > 0.9 &&\r\n             fingers.values.ring > 0.9 &&\r\n             fingers.values.pinky > 0.9 &&\r\n             Math.abs(handDir.verticalAngle) < 20) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // FA - Thumb pointing down, other fingers in fist\r\n    else if (fingers.values.thumb > 0.7 &&      \r\n             fingers.values.index < 0.5 &&       \r\n             fingers.values.middle < 0.5 &&\r\n             fingers.values.ring < 0.5 &&\r\n             fingers.values.pinky < 0.5 &&\r\n             thumbDir.angle < -30) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // SOL - Curved fingers to side\r\n    else if (fingers.values.index > 0.8 &&     \r\n             fingers.values.middle > 0.8 &&\r\n             fingers.values.ring > 0.8 &&\r\n             fingers.values.pinky > 0.8 &&\r\n             Math.abs(handDir.direction.x) > 0.5 && \r\n             !handDir.isPointingUp &&\r\n             !handDir.isPointingDown) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // LA - Based on the values from your screenshot\r\n    else if (fingers.values.thumb > 0.9 &&    \r\n             fingers.values.index > 0.9 &&     \r\n             fingers.values.middle > 0.9 &&\r\n             fingers.values.ring > 0.9 &&\r\n             fingers.values.pinky > 0.9 &&\r\n             handDir.verticalAngle < -45) {\r\n        sign = 'la';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // TI - Index up, others closed\r\n    else if (fingers.values.index > 0.8 &&      \r\n             fingers.values.middle < 0.5 &&      \r\n             fingers.values.ring < 0.5 &&\r\n             fingers.values.pinky < 0.5 &&\r\n             handDir.verticalAngle > 30) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    // Log detected sign\r\n    if (sign) {\r\n        console.log('Detected:', sign, 'with confidence:', confidence);\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// Export for debugging\r\nexport function analyzeHand(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n    const thumbDir = getThumbDirection(landmarks);\r\n\r\n    return {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir,\r\n        thumbDirection: thumbDir\r\n    };\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}