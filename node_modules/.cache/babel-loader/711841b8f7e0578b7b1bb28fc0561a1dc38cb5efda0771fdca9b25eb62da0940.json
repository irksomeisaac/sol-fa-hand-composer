{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst getFingerBend = (landmarks, fingerIndices) => {\n  const tip = landmarks[fingerIndices[3]];\n  const base = landmarks[fingerIndices[0]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Direct distance from base to tip\n  const directDist = distance(base, tip);\n\n  // Sum of segments\n  const segmentDist = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n\n  // Return ratio (1 = straight, 0 = fully bent)\n  return directDist / segmentDist;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n  const index_tip = landmarks[8];\n\n  // Get direction from wrist to middle finger\n  const dir = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);\n  const normalized = {\n    x: dir.x / magnitude,\n    y: dir.y / magnitude,\n    z: dir.z / magnitude\n  };\n\n  // Calculate angles\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  const horizontalAngle = Math.atan2(normalized.z, normalized.x) * (180 / Math.PI);\n  return {\n    direction: normalized,\n    verticalAngle,\n    horizontalAngle,\n    isPointingUp: verticalAngle > 45,\n    isPointingDown: verticalAngle < -45,\n    isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\n    isHorizontal: Math.abs(verticalAngle) < 30\n  };\n};\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Get vectors along palm\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n\n  // Cross product for palm normal\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  const normalized = {\n    x: normal.x / magnitude,\n    y: normal.y / magnitude,\n    z: normal.z / magnitude\n  };\n  return {\n    normal: normalized,\n    isDown: normalized.y > 0.7,\n    // Palm clearly facing down\n    isUp: normalized.y < -0.7,\n    // Palm clearly facing up\n    isSide: Math.abs(normalized.x) > 0.7 // Palm facing left/right\n  };\n};\nconst analyzeFingers = landmarks => {\n  const fingers = {\n    thumb: getFingerBend(landmarks, FINGERS.THUMB),\n    index: getFingerBend(landmarks, FINGERS.INDEX),\n    middle: getFingerBend(landmarks, FINGERS.MIDDLE),\n    ring: getFingerBend(landmarks, FINGERS.RING),\n    pinky: getFingerBend(landmarks, FINGERS.PINKY)\n  };\n  return {\n    values: fingers,\n    allClosed: Object.values(fingers).every(v => v < 0.5),\n    allOpen: Object.values(fingers).every(v => v > 0.7),\n    openCount: Object.values(fingers).filter(v => v > 0.7).length\n  };\n};\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n\n  // Debug information\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      horizontalAngle: handDir.horizontalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // DO - Closed fist, horizontal position\n  if (fingers.allClosed && handDir.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // RE - Flat hand angled up ~45°, palm down\n  else if (fingers.allOpen && handDir.verticalAngle > 30 && handDir.verticalAngle < 60 && palmDir.isDown) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // MI - Flat hand horizontal, palm straight down\n  else if (fingers.allOpen && handDir.isHorizontal && palmDir.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // FA - Thumb pointing down, others closed\n  else if (fingers.values.thumb > 0.7 &&\n  // Thumb extended\n  Object.entries(fingers.values).filter(([finger]) => finger !== 'thumb').every(([_, value]) => value < 0.5) &&\n  // Other fingers closed\n  handDir.isPointingDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // SOL - Flat hand forward, palm side\n  else if (fingers.allOpen && handDir.isPointingForward && palmDir.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // LA - Hand relaxed/curved, palm down\n  else if (!fingers.allClosed && !fingers.allOpen && fingers.openCount >= 2 &&\n  // Partially open fingers\n  palmDir.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  // TI - Index up diagonal, others closed\n  else if (fingers.values.index > 0.7 &&\n  // Index extended\n  Object.entries(fingers.values).filter(([finger]) => finger !== 'index').every(([_, value]) => value < 0.5) &&\n  // Other fingers closed\n  handDir.isPointingUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\nexport function analyzeHand(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  return {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir\n  };\n}","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","getFingerBend","landmarks","fingerIndices","tip","base","mid1","mid2","directDist","distance","segmentDist","p1","p2","Math","sqrt","pow","x","y","z","getHandDirection","wrist","middle_tip","index_tip","dir","magnitude","normalized","verticalAngle","atan2","PI","horizontalAngle","direction","isPointingUp","isPointingDown","isPointingForward","abs","max","isHorizontal","getPalmDirection","indexBase","pinkyBase","v1","v2","normal","isDown","isUp","isSide","analyzeFingers","fingers","thumb","index","middle","ring","pinky","values","allClosed","Object","every","v","allOpen","openCount","filter","length","recognizeKodalySign","handDir","palmDir","debug","extensions","handDirection","palmOrientation","sign","confidence","entries","finger","_","value","analyzeHand","palmDirection"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst getFingerBend = (landmarks, fingerIndices) => {\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const base = landmarks[fingerIndices[0]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Direct distance from base to tip\r\n    const directDist = distance(base, tip);\r\n    \r\n    // Sum of segments\r\n    const segmentDist = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n\r\n    // Return ratio (1 = straight, 0 = fully bent)\r\n    return directDist / segmentDist;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n    const index_tip = landmarks[8];\r\n\r\n    // Get direction from wrist to middle finger\r\n    const dir = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);\r\n    const normalized = {\r\n        x: dir.x / magnitude,\r\n        y: dir.y / magnitude,\r\n        z: dir.z / magnitude\r\n    };\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n    const horizontalAngle = Math.atan2(normalized.z, normalized.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction: normalized,\r\n        verticalAngle,\r\n        horizontalAngle,\r\n        isPointingUp: verticalAngle > 45,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\r\n        isHorizontal: Math.abs(verticalAngle) < 30\r\n    };\r\n};\r\n\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Get vectors along palm\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    // Cross product for palm normal\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    const normalized = {\r\n        x: normal.x / magnitude,\r\n        y: normal.y / magnitude,\r\n        z: normal.z / magnitude\r\n    };\r\n\r\n    return {\r\n        normal: normalized,\r\n        isDown: normalized.y > 0.7,  // Palm clearly facing down\r\n        isUp: normalized.y < -0.7,   // Palm clearly facing up\r\n        isSide: Math.abs(normalized.x) > 0.7  // Palm facing left/right\r\n    };\r\n};\r\n\r\nconst analyzeFingers = (landmarks) => {\r\n    const fingers = {\r\n        thumb: getFingerBend(landmarks, FINGERS.THUMB),\r\n        index: getFingerBend(landmarks, FINGERS.INDEX),\r\n        middle: getFingerBend(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerBend(landmarks, FINGERS.RING),\r\n        pinky: getFingerBend(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    return {\r\n        values: fingers,\r\n        allClosed: Object.values(fingers).every(v => v < 0.5),\r\n        allOpen: Object.values(fingers).every(v => v > 0.7),\r\n        openCount: Object.values(fingers).filter(v => v > 0.7).length\r\n    };\r\n};\r\n\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    // Debug information\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            horizontalAngle: handDir.horizontalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // DO - Closed fist, horizontal position\r\n    if (fingers.allClosed && handDir.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // RE - Flat hand angled up ~45°, palm down\r\n    else if (fingers.allOpen && \r\n             handDir.verticalAngle > 30 && \r\n             handDir.verticalAngle < 60 && \r\n             palmDir.isDown) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // MI - Flat hand horizontal, palm straight down\r\n    else if (fingers.allOpen && \r\n             handDir.isHorizontal && \r\n             palmDir.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // FA - Thumb pointing down, others closed\r\n    else if (fingers.values.thumb > 0.7 &&  // Thumb extended\r\n             Object.entries(fingers.values)\r\n                  .filter(([finger]) => finger !== 'thumb')\r\n                  .every(([_, value]) => value < 0.5) && // Other fingers closed\r\n             handDir.isPointingDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // SOL - Flat hand forward, palm side\r\n    else if (fingers.allOpen && \r\n             handDir.isPointingForward && \r\n             palmDir.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // LA - Hand relaxed/curved, palm down\r\n    else if (!fingers.allClosed && \r\n             !fingers.allOpen && \r\n             fingers.openCount >= 2 && // Partially open fingers\r\n             palmDir.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    // TI - Index up diagonal, others closed\r\n    else if (fingers.values.index > 0.7 && // Index extended\r\n             Object.entries(fingers.values)\r\n                  .filter(([finger]) => finger !== 'index')\r\n                  .every(([_, value]) => value < 0.5) && // Other fingers closed\r\n             handDir.isPointingUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\nexport function analyzeHand(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    return {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir\r\n    };\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}