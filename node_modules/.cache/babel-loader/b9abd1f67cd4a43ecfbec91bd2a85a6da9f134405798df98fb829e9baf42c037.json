{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst fingerJointPairs = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20]\n};\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\n  const joints = fingerIndices.map(idx => landmarks[idx]);\n  const baseToTip = distance(joints[0], joints[joints.length - 1]);\n  const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => sum + distance(joints[i], joints[i + 1]), 0);\n  return 1 - baseToTip / totalLength; // 1 = fully curled, 0 = straight\n};\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst getHandOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const middle_base = landmarks[9];\n  const middle_tip = landmarks[12];\n\n  // Calculate primary hand direction vector\n  const direction = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles\n  const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\n  const angleFromHorizontal = Math.acos(Math.sqrt(direction.x * direction.x + direction.z * direction.z)) * (180 / Math.PI);\n  return {\n    direction,\n    angleFromVertical,\n    angleFromHorizontal,\n    isVertical: angleFromVertical < 30 || angleFromVertical > 150,\n    isHorizontal: Math.abs(angleFromHorizontal) < 30,\n    isDiagonal: angleFromVertical > 30 && angleFromVertical < 150\n  };\n};\nconst areFingersTogether = landmarks => {\n  // Check distances between adjacent fingertips\n  const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\n  let maxDistance = 0;\n  for (let i = 0; i < tipIndices.length - 1; i++) {\n    const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\n    maxDistance = Math.max(maxDistance, dist);\n  }\n  return maxDistance < 0.1; // Threshold for fingers being together\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Calculate finger curls\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n\n  // Check for 'Do' - closed fist held horizontally\n  if (Object.values(curls).every(curl => curl > 0.7) &&\n  // All fingers tightly curled\n  orientation.isHorizontal) {\n    return {\n      sign: 'do',\n      confidence: 0.9,\n      debug: {\n        curls,\n        orientation,\n        fingersTogether\n      }\n    };\n  }\n\n  // Check for 'Re' - flat hand diagonal upward\n  if (Object.values(curls).every(curl => curl < 0.3) &&\n  // All fingers straight\n  fingersTogether &&\n  // Fingers held together\n  orientation.isDiagonal &&\n  // Hand at diagonal angle\n  orientation.angleFromVertical < 90) {\n    // Angled upward\n    return {\n      sign: 're',\n      confidence: 0.9,\n      debug: {\n        curls,\n        orientation,\n        fingersTogether\n      }\n    };\n  }\n\n  // Return debug information if no sign matched\n  return {\n    sign: null,\n    debug: {\n      curls,\n      orientation,\n      fingersTogether\n    }\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const orientation = getHandOrientation(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n  return {\n    fingerCurls: curls,\n    orientation: orientation,\n    fingersTogether: fingersTogether,\n    possibleSigns: {\n      isDo: Object.values(curls).every(curl => curl > 0.7) && orientation.isHorizontal,\n      isRe: Object.values(curls).every(curl => curl < 0.3) && fingersTogether && orientation.isDiagonal && orientation.angleFromVertical < 90\n    }\n  };\n};","map":{"version":3,"names":["fingerJointPairs","thumb","index","middle","ring","pinky","calculateFingerCurl","landmarks","fingerIndices","joints","map","idx","baseToTip","distance","length","totalLength","slice","reduce","sum","_","i","p1","p2","Math","sqrt","pow","x","y","z","getHandOrientation","wrist","middle_base","middle_tip","direction","magnitude","angleFromVertical","acos","PI","angleFromHorizontal","isVertical","isHorizontal","abs","isDiagonal","areFingersTogether","tipIndices","maxDistance","dist","max","recognizeKodalySign","curls","orientation","fingersTogether","Object","values","every","curl","sign","confidence","debug","analyzeHand","fingerCurls","possibleSigns","isDo","isRe"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst fingerJointPairs = {\r\n    thumb: [1, 2, 3, 4],\r\n    index: [5, 6, 7, 8],\r\n    middle: [9, 10, 11, 12],\r\n    ring: [13, 14, 15, 16],\r\n    pinky: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\r\n    const joints = fingerIndices.map(idx => landmarks[idx]);\r\n    const baseToTip = distance(joints[0], joints[joints.length - 1]);\r\n    const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => \r\n        sum + distance(joints[i], joints[i + 1]), 0);\r\n    return 1 - (baseToTip / totalLength); // 1 = fully curled, 0 = straight\r\n};\r\n\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst getHandOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_base = landmarks[9];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Calculate primary hand direction vector\r\n    const direction = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    // Calculate angles\r\n    const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const angleFromHorizontal = Math.acos(Math.sqrt(direction.x * direction.x + direction.z * direction.z)) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction,\r\n        angleFromVertical,\r\n        angleFromHorizontal,\r\n        isVertical: angleFromVertical < 30 || angleFromVertical > 150,\r\n        isHorizontal: Math.abs(angleFromHorizontal) < 30,\r\n        isDiagonal: angleFromVertical > 30 && angleFromVertical < 150\r\n    };\r\n};\r\n\r\nconst areFingersTogether = (landmarks) => {\r\n    // Check distances between adjacent fingertips\r\n    const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\r\n    let maxDistance = 0;\r\n    \r\n    for (let i = 0; i < tipIndices.length - 1; i++) {\r\n        const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\r\n        maxDistance = Math.max(maxDistance, dist);\r\n    }\r\n    \r\n    return maxDistance < 0.1; // Threshold for fingers being together\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Calculate finger curls\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n\r\n    // Check for 'Do' - closed fist held horizontally\r\n    if (Object.values(curls).every(curl => curl > 0.7) && // All fingers tightly curled\r\n        orientation.isHorizontal) {\r\n        return {\r\n            sign: 'do',\r\n            confidence: 0.9,\r\n            debug: { curls, orientation, fingersTogether }\r\n        };\r\n    }\r\n\r\n    // Check for 'Re' - flat hand diagonal upward\r\n    if (Object.values(curls).every(curl => curl < 0.3) && // All fingers straight\r\n        fingersTogether && // Fingers held together\r\n        orientation.isDiagonal && // Hand at diagonal angle\r\n        orientation.angleFromVertical < 90) { // Angled upward\r\n        return {\r\n            sign: 're',\r\n            confidence: 0.9,\r\n            debug: { curls, orientation, fingersTogether }\r\n        };\r\n    }\r\n\r\n    // Return debug information if no sign matched\r\n    return {\r\n        sign: null,\r\n        debug: {\r\n            curls,\r\n            orientation,\r\n            fingersTogether\r\n        }\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const orientation = getHandOrientation(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n\r\n    return {\r\n        fingerCurls: curls,\r\n        orientation: orientation,\r\n        fingersTogether: fingersTogether,\r\n        possibleSigns: {\r\n            isDo: Object.values(curls).every(curl => curl > 0.7) && orientation.isHorizontal,\r\n            isRe: Object.values(curls).every(curl => curl < 0.3) && \r\n                  fingersTogether && \r\n                  orientation.isDiagonal && \r\n                  orientation.angleFromVertical < 90\r\n        }\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}