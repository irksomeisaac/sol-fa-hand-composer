{"ast":null,"code":"// ... (keep all the previous helper functions unchanged until the recognizeKodalySign function)\n\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n\n  // Debug information\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      horizontalAngle: handDir.horizontalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // FA - Thumb extended, others partially bent\n  if (fingers.values.thumb > 0.85 &&\n  // Thumb very extended (>85%)\n  fingers.values.index < 0.7 &&\n  // Other fingers partially bent\n  fingers.values.index > 0.4 &&\n  // but not fully closed\n  fingers.values.middle < 0.7 && fingers.values.middle > 0.4 && fingers.values.ring < 0.7 && fingers.values.ring > 0.4 && fingers.values.pinky < 0.6 && fingers.values.pinky > 0.3 && Math.abs(handDir.verticalAngle) < 20) {\n    // Near horizontal\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // DO - Closed fist, horizontal position\n  else if (Object.values(fingers.values).every(v => v < 0.4) &&\n  // All fingers closed\n  handDir.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // RE - Flat hand angled up ~45°, palm down\n  else if (Object.values(fingers.values).every(v => v > 0.7) &&\n  // All fingers extended\n  handDir.verticalAngle > 30 && handDir.verticalAngle < 60 && palmDir.isDown) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // MI - Flat hand horizontal, palm straight down\n  else if (Object.values(fingers.values).every(v => v > 0.7) && handDir.isHorizontal && palmDir.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // SOL - Flat hand forward, palm side\n  else if (Object.values(fingers.values).every(v => v > 0.7) && handDir.isPointingForward && palmDir.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // LA - Hand relaxed/curved, palm down\n  else if (Object.values(fingers.values).every(v => v > 0.3 && v < 0.7) &&\n  // Partially bent\n  palmDir.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  // TI - Index up diagonal, others closed\n  else if (fingers.values.index > 0.7 &&\n  // Index extended\n  Object.entries(fingers.values).filter(([finger]) => finger !== 'index').every(([_, value]) => value < 0.5) &&\n  // Other fingers closed\n  handDir.isPointingUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// ... (keep the analyzeHand function unchanged)","map":{"version":3,"names":["recognizeKodalySign","landmarks","length","fingers","analyzeFingers","handDir","getHandDirection","palmDir","getPalmDirection","debug","extensions","values","handDirection","verticalAngle","horizontalAngle","isPointingUp","isPointingDown","isPointingForward","isHorizontal","palmOrientation","isDown","isUp","isSide","sign","confidence","thumb","index","middle","ring","pinky","Math","abs","Object","every","v","entries","filter","finger","_","value"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// ... (keep all the previous helper functions unchanged until the recognizeKodalySign function)\r\n\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    // Debug information\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            horizontalAngle: handDir.horizontalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // FA - Thumb extended, others partially bent\r\n    if (fingers.values.thumb > 0.85 && // Thumb very extended (>85%)\r\n        fingers.values.index < 0.7 &&   // Other fingers partially bent\r\n        fingers.values.index > 0.4 &&   // but not fully closed\r\n        fingers.values.middle < 0.7 &&\r\n        fingers.values.middle > 0.4 &&\r\n        fingers.values.ring < 0.7 &&\r\n        fingers.values.ring > 0.4 &&\r\n        fingers.values.pinky < 0.6 &&\r\n        fingers.values.pinky > 0.3 &&\r\n        Math.abs(handDir.verticalAngle) < 20) {  // Near horizontal\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // DO - Closed fist, horizontal position\r\n    else if (Object.values(fingers.values).every(v => v < 0.4) && // All fingers closed\r\n             handDir.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // RE - Flat hand angled up ~45°, palm down\r\n    else if (Object.values(fingers.values).every(v => v > 0.7) && // All fingers extended\r\n             handDir.verticalAngle > 30 && \r\n             handDir.verticalAngle < 60 && \r\n             palmDir.isDown) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // MI - Flat hand horizontal, palm straight down\r\n    else if (Object.values(fingers.values).every(v => v > 0.7) && \r\n             handDir.isHorizontal && \r\n             palmDir.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // SOL - Flat hand forward, palm side\r\n    else if (Object.values(fingers.values).every(v => v > 0.7) && \r\n             handDir.isPointingForward && \r\n             palmDir.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // LA - Hand relaxed/curved, palm down\r\n    else if (Object.values(fingers.values).every(v => v > 0.3 && v < 0.7) && // Partially bent\r\n             palmDir.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    // TI - Index up diagonal, others closed\r\n    else if (fingers.values.index > 0.7 && // Index extended\r\n             Object.entries(fingers.values)\r\n                  .filter(([finger]) => finger !== 'index')\r\n                  .every(([_, value]) => value < 0.5) && // Other fingers closed\r\n             handDir.isPointingUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// ... (keep the analyzeHand function unchanged)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}