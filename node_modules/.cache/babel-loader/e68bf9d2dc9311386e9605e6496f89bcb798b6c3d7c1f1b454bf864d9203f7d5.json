{"ast":null,"code":"// ... (keep all the helper functions the same until the recognizeKodalySign function)\n\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n\n  // Debug info (keep the same debug structure)\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      horizontalAngle: handDir.horizontalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // Log the current values to help with debugging\n  console.log('Current hand state:', {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir\n  });\n\n  // DO - Fist position\n  if (fingers.values.thumb < 0.5 &&\n  // Thumb closed\n  fingers.values.index < 0.5 &&\n  // All fingers closed\n  fingers.values.middle < 0.5 && fingers.values.ring < 0.5 && fingers.values.pinky < 0.5) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n\n  // RE - Flat hand angled up\n  else if (fingers.values.index > 0.6 &&\n  // Fingers extended\n  fingers.values.middle > 0.6 && fingers.values.ring > 0.6 && fingers.values.pinky > 0.6 && handDir.verticalAngle > 20 &&\n  // Angled upward\n  handDir.verticalAngle < 70) {\n    // More lenient angle range\n    sign = 're';\n    confidence = 0.9;\n  }\n\n  // MI - Flat hand horizontal\n  else if (fingers.values.index > 0.6 &&\n  // Fingers extended\n  fingers.values.middle > 0.6 && fingers.values.ring > 0.6 && fingers.values.pinky > 0.6 && Math.abs(handDir.verticalAngle) < 30 &&\n  // Near horizontal\n  palmDir.isDown) {\n    // Palm facing down\n    sign = 'mi';\n    confidence = 0.9;\n  }\n\n  // FA - Thumb out, fingers relaxed\n  else if (fingers.values.thumb > 0.7 &&\n  // Thumb clearly extended\n  fingers.values.index < 0.7 &&\n  // Other fingers somewhat bent\n  fingers.values.middle < 0.7 && fingers.values.ring < 0.7 && fingers.values.pinky < 0.7 && fingers.values.index > 0.3 &&\n  // But not completely closed\n  fingers.values.middle > 0.3 && fingers.values.ring > 0.3 && fingers.values.pinky > 0.3) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n\n  // SOL - Flat hand pointing forward\n  else if (fingers.values.index > 0.6 &&\n  // Fingers extended\n  fingers.values.middle > 0.6 && fingers.values.ring > 0.6 && fingers.values.pinky > 0.6 && Math.abs(handDir.direction.z) > 0.5 &&\n  // Pointing more forward\n  palmDir.isSide) {\n    // Palm facing side\n    sign = 'sol';\n    confidence = 0.9;\n  }\n\n  // LA - Relaxed hand position\n  else if (fingers.values.index > 0.3 &&\n  // Fingers partially extended\n  fingers.values.index < 0.8 &&\n  // but not fully straight\n  fingers.values.middle > 0.3 && fingers.values.middle < 0.8 && fingers.values.ring > 0.3 && fingers.values.ring < 0.8 && fingers.values.pinky > 0.3 && fingers.values.pinky < 0.8 && palmDir.isDown) {\n    // Palm facing down\n    sign = 'la';\n    confidence = 0.8;\n  }\n\n  // TI - Index finger up\n  else if (fingers.values.index > 0.7 &&\n  // Index finger clearly extended\n  fingers.values.middle < 0.5 &&\n  // Other fingers more closed\n  fingers.values.ring < 0.5 && fingers.values.pinky < 0.5 && handDir.verticalAngle > 30) {\n    // Pointing upward\n    sign = 'ti';\n    confidence = 0.9;\n  }\n\n  // Log the recognized sign\n  if (sign) {\n    console.log('Recognized:', sign, 'with confidence:', confidence);\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// ... (keep the analyzeHand function the same)","map":{"version":3,"names":["recognizeKodalySign","landmarks","length","fingers","analyzeFingers","handDir","getHandDirection","palmDir","getPalmDirection","debug","extensions","values","handDirection","verticalAngle","horizontalAngle","isPointingUp","isPointingDown","isPointingForward","isHorizontal","palmOrientation","isDown","isUp","isSide","sign","confidence","console","log","palmDirection","thumb","index","middle","ring","pinky","Math","abs","direction","z"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// ... (keep all the helper functions the same until the recognizeKodalySign function)\r\n\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    // Debug info (keep the same debug structure)\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            horizontalAngle: handDir.horizontalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Log the current values to help with debugging\r\n    console.log('Current hand state:', {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir\r\n    });\r\n\r\n    // DO - Fist position\r\n    if (fingers.values.thumb < 0.5 &&    // Thumb closed\r\n        fingers.values.index < 0.5 &&    // All fingers closed\r\n        fingers.values.middle < 0.5 &&\r\n        fingers.values.ring < 0.5 &&\r\n        fingers.values.pinky < 0.5) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // RE - Flat hand angled up\r\n    else if (fingers.values.index > 0.6 &&     // Fingers extended\r\n             fingers.values.middle > 0.6 &&\r\n             fingers.values.ring > 0.6 &&\r\n             fingers.values.pinky > 0.6 &&\r\n             handDir.verticalAngle > 20 &&      // Angled upward\r\n             handDir.verticalAngle < 70) {      // More lenient angle range\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // MI - Flat hand horizontal\r\n    else if (fingers.values.index > 0.6 &&     // Fingers extended\r\n             fingers.values.middle > 0.6 &&\r\n             fingers.values.ring > 0.6 &&\r\n             fingers.values.pinky > 0.6 &&\r\n             Math.abs(handDir.verticalAngle) < 30 && // Near horizontal\r\n             palmDir.isDown) {                       // Palm facing down\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // FA - Thumb out, fingers relaxed\r\n    else if (fingers.values.thumb > 0.7 &&          // Thumb clearly extended\r\n             fingers.values.index < 0.7 &&          // Other fingers somewhat bent\r\n             fingers.values.middle < 0.7 &&\r\n             fingers.values.ring < 0.7 &&\r\n             fingers.values.pinky < 0.7 &&\r\n             fingers.values.index > 0.3 &&          // But not completely closed\r\n             fingers.values.middle > 0.3 &&\r\n             fingers.values.ring > 0.3 &&\r\n             fingers.values.pinky > 0.3) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // SOL - Flat hand pointing forward\r\n    else if (fingers.values.index > 0.6 &&     // Fingers extended\r\n             fingers.values.middle > 0.6 &&\r\n             fingers.values.ring > 0.6 &&\r\n             fingers.values.pinky > 0.6 &&\r\n             Math.abs(handDir.direction.z) > 0.5 && // Pointing more forward\r\n             palmDir.isSide) {                      // Palm facing side\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    \r\n    // LA - Relaxed hand position\r\n    else if (fingers.values.index > 0.3 &&     // Fingers partially extended\r\n             fingers.values.index < 0.8 &&      // but not fully straight\r\n             fingers.values.middle > 0.3 &&\r\n             fingers.values.middle < 0.8 &&\r\n             fingers.values.ring > 0.3 &&\r\n             fingers.values.ring < 0.8 &&\r\n             fingers.values.pinky > 0.3 &&\r\n             fingers.values.pinky < 0.8 &&\r\n             palmDir.isDown) {                  // Palm facing down\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    \r\n    // TI - Index finger up\r\n    else if (fingers.values.index > 0.7 &&     // Index finger clearly extended\r\n             fingers.values.middle < 0.5 &&     // Other fingers more closed\r\n             fingers.values.ring < 0.5 &&\r\n             fingers.values.pinky < 0.5 &&\r\n             handDir.verticalAngle > 30) {      // Pointing upward\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    // Log the recognized sign\r\n    if (sign) {\r\n        console.log('Recognized:', sign, 'with confidence:', confidence);\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// ... (keep the analyzeHand function the same)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}