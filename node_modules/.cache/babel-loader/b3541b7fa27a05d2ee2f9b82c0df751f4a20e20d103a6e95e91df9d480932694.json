{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\sol-fa-app\\\\src\\\\components\\\\HandDetection.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport * as hands from '@mediapipe/hands';\nimport * as camera from '@mediapipe/camera_utils';\nimport { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils';\nimport { recognizeKodalySign, kodalySigns } from '../utils/kodalySignsDB';\nimport './HandDetection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HandDetection = () => {\n  _s();\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const handsRef = useRef(null);\n  const cameraRef = useRef(null);\n  const [detectedSign, setDetectedSign] = useState(null);\n  const [showInstructions, setShowInstructions] = useState(true);\n  useEffect(() => {\n    if (!webcamRef.current) return;\n\n    // Initialize MediaPipe Hands\n    handsRef.current = new hands.Hands({\n      locateFile: file => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n      }\n    });\n\n    // Configure MediaPipe Hands\n    handsRef.current.setOptions({\n      maxNumHands: 1,\n      // We only need one hand for Kodaly signs\n      modelComplexity: 1,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5\n    });\n\n    // Set up the handler for hand detection results\n    handsRef.current.onResults(onResults);\n\n    // Initialize camera\n    if (webcamRef.current) {\n      cameraRef.current = new camera.Camera(webcamRef.current.video, {\n        onFrame: async () => {\n          if (webcamRef.current && handsRef.current) {\n            await handsRef.current.send({\n              image: webcamRef.current.video\n            });\n          }\n        },\n        width: 640,\n        height: 480\n      });\n      cameraRef.current.start();\n    }\n    return () => {\n      if (cameraRef.current) {\n        cameraRef.current.stop();\n      }\n      if (handsRef.current) {\n        handsRef.current.close();\n      }\n    };\n  }, []);\n  const onResults = results => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw the camera feed on the canvas\n    if (results.image) {\n      ctx.drawImage(results.image, 0, 0, canvas.width, canvas.height);\n    }\n\n    // Draw hand landmarks and recognize signs\n    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n      for (const landmarks of results.multiHandLandmarks) {\n        // Draw the hand connections\n        drawConnectors(ctx, landmarks, hands.HAND_CONNECTIONS, {\n          color: '#00FF00',\n          lineWidth: 5\n        });\n        // Draw the landmarks\n        drawLandmarks(ctx, landmarks, {\n          color: '#FF0000',\n          lineWidth: 2\n        });\n\n        // Recognize the Kodaly sign\n        const sign = recognizeKodalySign(landmarks);\n        setDetectedSign(sign);\n      }\n    } else {\n      setDetectedSign(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hand-detection\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-canvas-container\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          display: 'none'\n        },\n        width: 640,\n        height: 480\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 640,\n        height: 480,\n        style: {\n          transform: 'scaleX(-1)' // Mirror the display\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), detectedSign && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detected-sign\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Detected: \", detectedSign.toUpperCase()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: kodalySigns[detectedSign].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowInstructions(!showInstructions),\n        children: [showInstructions ? 'Hide' : 'Show', \" Instructions\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), showInstructions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Kod\\xE1ly Hand Signs Guide\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signs-guide\",\n        children: Object.entries(kodalySigns).map(([note, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sign-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: note.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: data.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this)]\n        }, note, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(HandDetection, \"rTBCFfqCvPQ3YYyp3UvLPgVyCyg=\");\n_c = HandDetection;\nexport default HandDetection;\nvar _c;\n$RefreshReg$(_c, \"HandDetection\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Webcam","hands","camera","drawConnectors","drawLandmarks","recognizeKodalySign","kodalySigns","jsxDEV","_jsxDEV","HandDetection","_s","webcamRef","canvasRef","handsRef","cameraRef","detectedSign","setDetectedSign","showInstructions","setShowInstructions","current","Hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","Camera","video","onFrame","send","image","width","height","start","stop","close","results","canvas","ctx","getContext","clearRect","drawImage","multiHandLandmarks","length","landmarks","HAND_CONNECTIONS","color","lineWidth","sign","className","children","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","transform","toUpperCase","description","onClick","Object","entries","map","note","data","_c","$RefreshReg$"],"sources":["C:/Users/user/sol-fa-app/src/components/HandDetection.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport * as hands from '@mediapipe/hands';\r\nimport * as camera from '@mediapipe/camera_utils';\r\nimport { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils';\r\nimport { recognizeKodalySign, kodalySigns } from '../utils/kodalySignsDB';\r\nimport './HandDetection.css';\r\n\r\nconst HandDetection = () => {\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const handsRef = useRef(null);\r\n    const cameraRef = useRef(null);\r\n    const [detectedSign, setDetectedSign] = useState(null);\r\n    const [showInstructions, setShowInstructions] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (!webcamRef.current) return;\r\n\r\n        // Initialize MediaPipe Hands\r\n        handsRef.current = new hands.Hands({\r\n            locateFile: (file) => {\r\n                return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\r\n            }\r\n        });\r\n\r\n        // Configure MediaPipe Hands\r\n        handsRef.current.setOptions({\r\n            maxNumHands: 1, // We only need one hand for Kodaly signs\r\n            modelComplexity: 1,\r\n            minDetectionConfidence: 0.5,\r\n            minTrackingConfidence: 0.5\r\n        });\r\n\r\n        // Set up the handler for hand detection results\r\n        handsRef.current.onResults(onResults);\r\n\r\n        // Initialize camera\r\n        if (webcamRef.current) {\r\n            cameraRef.current = new camera.Camera(webcamRef.current.video, {\r\n                onFrame: async () => {\r\n                    if (webcamRef.current && handsRef.current) {\r\n                        await handsRef.current.send({\r\n                            image: webcamRef.current.video\r\n                        });\r\n                    }\r\n                },\r\n                width: 640,\r\n                height: 480\r\n            });\r\n            cameraRef.current.start();\r\n        }\r\n\r\n        return () => {\r\n            if (cameraRef.current) {\r\n                cameraRef.current.stop();\r\n            }\r\n            if (handsRef.current) {\r\n                handsRef.current.close();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const onResults = (results) => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // Clear the canvas\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw the camera feed on the canvas\r\n        if (results.image) {\r\n            ctx.drawImage(results.image, 0, 0, canvas.width, canvas.height);\r\n        }\r\n\r\n        // Draw hand landmarks and recognize signs\r\n        if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\r\n            for (const landmarks of results.multiHandLandmarks) {\r\n                // Draw the hand connections\r\n                drawConnectors(ctx, landmarks, hands.HAND_CONNECTIONS, {\r\n                    color: '#00FF00',\r\n                    lineWidth: 5\r\n                });\r\n                // Draw the landmarks\r\n                drawLandmarks(ctx, landmarks, {\r\n                    color: '#FF0000',\r\n                    lineWidth: 2\r\n                });\r\n\r\n                // Recognize the Kodaly sign\r\n                const sign = recognizeKodalySign(landmarks);\r\n                setDetectedSign(sign);\r\n            }\r\n        } else {\r\n            setDetectedSign(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"hand-detection\">\r\n            <div className=\"camera-canvas-container\">\r\n                <Webcam\r\n                    ref={webcamRef}\r\n                    style={{ display: 'none' }}\r\n                    width={640}\r\n                    height={480}\r\n                />\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    width={640}\r\n                    height={480}\r\n                    style={{\r\n                        transform: 'scaleX(-1)'  // Mirror the display\r\n                    }}\r\n                />\r\n                {detectedSign && (\r\n                    <div className=\"detected-sign\">\r\n                        <h3>Detected: {detectedSign.toUpperCase()}</h3>\r\n                        <p>{kodalySigns[detectedSign].description}</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            \r\n            <div className=\"controls\">\r\n                <button onClick={() => setShowInstructions(!showInstructions)}>\r\n                    {showInstructions ? 'Hide' : 'Show'} Instructions\r\n                </button>\r\n            </div>\r\n\r\n            {showInstructions && (\r\n                <div className=\"instructions\">\r\n                    <h2>Kodály Hand Signs Guide</h2>\r\n                    <div className=\"signs-guide\">\r\n                        {Object.entries(kodalySigns).map(([note, data]) => (\r\n                            <div key={note} className=\"sign-item\">\r\n                                <h3>{note.toUpperCase()}</h3>\r\n                                <p>{data.description}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HandDetection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}