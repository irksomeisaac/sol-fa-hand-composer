{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\n\n// Basic helper functions\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\n\n// Finger analysis functions\nconst getFingerExtension = (landmarks, fingerIndices) => {\n  const tip = landmarks[fingerIndices[3]];\n  const base = landmarks[fingerIndices[0]];\n  const mid1 = landmarks[fingerIndices[1]];\n  const mid2 = landmarks[fingerIndices[2]];\n\n  // Direct distance from base to tip\n  const directDist = distance(base, tip);\n\n  // Sum of segments\n  const segmentDist = distance(base, mid1) + distance(mid1, mid2) + distance(mid2, tip);\n\n  // Return ratio (1 = straight, 0 = fully bent)\n  return directDist / segmentDist;\n};\nconst analyzeFingers = landmarks => {\n  const extensions = {\n    thumb: getFingerExtension(landmarks, FINGERS.THUMB),\n    index: getFingerExtension(landmarks, FINGERS.INDEX),\n    middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\n    ring: getFingerExtension(landmarks, FINGERS.RING),\n    pinky: getFingerExtension(landmarks, FINGERS.PINKY)\n  };\n  return {\n    values: extensions,\n    allExtended: Object.values(extensions).every(v => v > 0.7),\n    allClosed: Object.values(extensions).every(v => v < 0.4),\n    partiallyClosed: Object.values(extensions).every(v => v > 0.3 && v < 0.7)\n  };\n};\n\n// Hand and palm direction functions\nconst getHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middle_tip = landmarks[12];\n\n  // Get direction vector\n  const dir = {\n    x: middle_tip.x - wrist.x,\n    y: middle_tip.y - wrist.y,\n    z: middle_tip.z - wrist.z\n  };\n\n  // Normalize\n  const normalized = normalize(dir);\n\n  // Calculate angles\n  const verticalAngle = Math.atan2(-normalized.y, Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\n  const horizontalAngle = Math.atan2(normalized.z, normalized.x) * (180 / Math.PI);\n  return {\n    direction: normalized,\n    verticalAngle,\n    horizontalAngle,\n    isPointingUp: verticalAngle > 45,\n    isPointingDown: verticalAngle < -45,\n    isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\n    isHorizontal: Math.abs(verticalAngle) < 30\n  };\n};\nconst getPalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Get vectors along palm\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n\n  // Cross product for palm normal\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const normalized = normalize(normal);\n  return {\n    normal: normalized,\n    isDown: normalized.y > 0.7,\n    isUp: normalized.y < -0.7,\n    isSide: Math.abs(normalized.x) > 0.7\n  };\n};\n\n// Main recognition function\nexport function recognizeKodalySign(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n\n  // Debug information\n  const debug = {\n    extensions: fingers.values,\n    handDirection: {\n      verticalAngle: handDir.verticalAngle,\n      horizontalAngle: handDir.horizontalAngle,\n      isPointingUp: handDir.isPointingUp,\n      isPointingDown: handDir.isPointingDown,\n      isPointingForward: handDir.isPointingForward,\n      isHorizontal: handDir.isHorizontal\n    },\n    palmOrientation: {\n      isDown: palmDir.isDown,\n      isUp: palmDir.isUp,\n      isSide: palmDir.isSide\n    }\n  };\n  let sign = null;\n  let confidence = 0;\n\n  // FA - Thumb extended, others partially bent\n  if (fingers.values.thumb > 0.85 &&\n  // Thumb very extended\n  fingers.values.index < 0.7 &&\n  // Other fingers partially bent\n  fingers.values.index > 0.4 && fingers.values.middle < 0.7 && fingers.values.middle > 0.4 && fingers.values.ring < 0.7 && fingers.values.ring > 0.4 && fingers.values.pinky < 0.6 && fingers.values.pinky > 0.3 && Math.abs(handDir.verticalAngle) < 20) {\n    // Near horizontal\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // DO - Closed fist, horizontal position\n  else if (fingers.allClosed && handDir.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // RE - Flat hand angled up, palm down\n  else if (fingers.allExtended && handDir.verticalAngle > 30 && handDir.verticalAngle < 60 && palmDir.isDown) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // MI - Flat hand horizontal, palm down\n  else if (fingers.allExtended && handDir.isHorizontal && palmDir.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // SOL - Flat hand forward, palm side\n  else if (fingers.allExtended && handDir.isPointingForward && palmDir.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // LA - Hand relaxed/curved, palm down\n  else if (fingers.partiallyClosed && palmDir.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  // TI - Index up, others closed\n  else if (fingers.values.index > 0.7 &&\n  // Index extended\n  Object.entries(fingers.values).filter(([finger]) => finger !== 'index').every(([_, value]) => value < 0.5) &&\n  // Other fingers closed\n  handDir.isPointingUp) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  return {\n    sign,\n    confidence,\n    debug\n  };\n}\n\n// Analysis function for debugging\nexport function analyzeHand(landmarks) {\n  if (!landmarks || landmarks.length < 21) return null;\n  const fingers = analyzeFingers(landmarks);\n  const handDir = getHandDirection(landmarks);\n  const palmDir = getPalmDirection(landmarks);\n  return {\n    fingers: fingers.values,\n    handDirection: handDir,\n    palmDirection: palmDir\n  };\n}","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","distance","p1","p2","Math","sqrt","pow","x","y","z","normalize","vector","magnitude","getFingerExtension","landmarks","fingerIndices","tip","base","mid1","mid2","directDist","segmentDist","analyzeFingers","extensions","thumb","index","middle","ring","pinky","values","allExtended","Object","every","v","allClosed","partiallyClosed","getHandDirection","wrist","middle_tip","dir","normalized","verticalAngle","atan2","PI","horizontalAngle","direction","isPointingUp","isPointingDown","isPointingForward","abs","max","isHorizontal","getPalmDirection","indexBase","pinkyBase","v1","v2","normal","isDown","isUp","isSide","recognizeKodalySign","length","fingers","handDir","palmDir","debug","handDirection","palmOrientation","sign","confidence","entries","filter","finger","_","value","analyzeHand","palmDirection"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\n// Basic helper functions\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\n// Finger analysis functions\r\nconst getFingerExtension = (landmarks, fingerIndices) => {\r\n    const tip = landmarks[fingerIndices[3]];\r\n    const base = landmarks[fingerIndices[0]];\r\n    const mid1 = landmarks[fingerIndices[1]];\r\n    const mid2 = landmarks[fingerIndices[2]];\r\n\r\n    // Direct distance from base to tip\r\n    const directDist = distance(base, tip);\r\n    \r\n    // Sum of segments\r\n    const segmentDist = \r\n        distance(base, mid1) +\r\n        distance(mid1, mid2) +\r\n        distance(mid2, tip);\r\n\r\n    // Return ratio (1 = straight, 0 = fully bent)\r\n    return directDist / segmentDist;\r\n};\r\n\r\nconst analyzeFingers = (landmarks) => {\r\n    const extensions = {\r\n        thumb: getFingerExtension(landmarks, FINGERS.THUMB),\r\n        index: getFingerExtension(landmarks, FINGERS.INDEX),\r\n        middle: getFingerExtension(landmarks, FINGERS.MIDDLE),\r\n        ring: getFingerExtension(landmarks, FINGERS.RING),\r\n        pinky: getFingerExtension(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    return {\r\n        values: extensions,\r\n        allExtended: Object.values(extensions).every(v => v > 0.7),\r\n        allClosed: Object.values(extensions).every(v => v < 0.4),\r\n        partiallyClosed: Object.values(extensions).every(v => v > 0.3 && v < 0.7)\r\n    };\r\n};\r\n\r\n// Hand and palm direction functions\r\nconst getHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middle_tip = landmarks[12];\r\n\r\n    // Get direction vector\r\n    const dir = {\r\n        x: middle_tip.x - wrist.x,\r\n        y: middle_tip.y - wrist.y,\r\n        z: middle_tip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const normalized = normalize(dir);\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.atan2(-normalized.y, \r\n        Math.sqrt(normalized.x * normalized.x + normalized.z * normalized.z)) * (180 / Math.PI);\r\n    const horizontalAngle = Math.atan2(normalized.z, normalized.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        direction: normalized,\r\n        verticalAngle,\r\n        horizontalAngle,\r\n        isPointingUp: verticalAngle > 45,\r\n        isPointingDown: verticalAngle < -45,\r\n        isPointingForward: Math.abs(normalized.z) > Math.max(Math.abs(normalized.x), Math.abs(normalized.y)),\r\n        isHorizontal: Math.abs(verticalAngle) < 30\r\n    };\r\n};\r\n\r\nconst getPalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Get vectors along palm\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    // Cross product for palm normal\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const normalized = normalize(normal);\r\n\r\n    return {\r\n        normal: normalized,\r\n        isDown: normalized.y > 0.7,\r\n        isUp: normalized.y < -0.7,\r\n        isSide: Math.abs(normalized.x) > 0.7\r\n    };\r\n};\r\n\r\n// Main recognition function\r\nexport function recognizeKodalySign(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    // Debug information\r\n    const debug = {\r\n        extensions: fingers.values,\r\n        handDirection: {\r\n            verticalAngle: handDir.verticalAngle,\r\n            horizontalAngle: handDir.horizontalAngle,\r\n            isPointingUp: handDir.isPointingUp,\r\n            isPointingDown: handDir.isPointingDown,\r\n            isPointingForward: handDir.isPointingForward,\r\n            isHorizontal: handDir.isHorizontal\r\n        },\r\n        palmOrientation: {\r\n            isDown: palmDir.isDown,\r\n            isUp: palmDir.isUp,\r\n            isSide: palmDir.isSide\r\n        }\r\n    };\r\n\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // FA - Thumb extended, others partially bent\r\n    if (fingers.values.thumb > 0.85 && // Thumb very extended\r\n        fingers.values.index < 0.7 &&   // Other fingers partially bent\r\n        fingers.values.index > 0.4 &&\r\n        fingers.values.middle < 0.7 &&\r\n        fingers.values.middle > 0.4 &&\r\n        fingers.values.ring < 0.7 &&\r\n        fingers.values.ring > 0.4 &&\r\n        fingers.values.pinky < 0.6 &&\r\n        fingers.values.pinky > 0.3 &&\r\n        Math.abs(handDir.verticalAngle) < 20) {  // Near horizontal\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // DO - Closed fist, horizontal position\r\n    else if (fingers.allClosed && handDir.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // RE - Flat hand angled up, palm down\r\n    else if (fingers.allExtended && \r\n             handDir.verticalAngle > 30 && \r\n             handDir.verticalAngle < 60 && \r\n             palmDir.isDown) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // MI - Flat hand horizontal, palm down\r\n    else if (fingers.allExtended && \r\n             handDir.isHorizontal && \r\n             palmDir.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // SOL - Flat hand forward, palm side\r\n    else if (fingers.allExtended && \r\n             handDir.isPointingForward && \r\n             palmDir.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // LA - Hand relaxed/curved, palm down\r\n    else if (fingers.partiallyClosed && palmDir.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n    // TI - Index up, others closed\r\n    else if (fingers.values.index > 0.7 && // Index extended\r\n             Object.entries(fingers.values)\r\n                  .filter(([finger]) => finger !== 'index')\r\n                  .every(([_, value]) => value < 0.5) && // Other fingers closed\r\n             handDir.isPointingUp) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug\r\n    };\r\n}\r\n\r\n// Analysis function for debugging\r\nexport function analyzeHand(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    \r\n    const fingers = analyzeFingers(landmarks);\r\n    const handDir = getHandDirection(landmarks);\r\n    const palmDir = getPalmDirection(landmarks);\r\n\r\n    return {\r\n        fingers: fingers.values,\r\n        handDirection: handDir,\r\n        palmDirection: palmDir\r\n    };\r\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}