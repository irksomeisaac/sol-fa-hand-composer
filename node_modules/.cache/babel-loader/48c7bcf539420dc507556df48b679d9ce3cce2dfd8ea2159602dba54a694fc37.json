{"ast":null,"code":"// Two-hand detection and gesture management\nimport { recognizeKodalySign } from './kodalySignsDB';\n\n// Left hand UI navigation gestures\nexport const LEFT_HAND_GESTURES = {\n  OCTAVE_UP: 'octave_up',\n  OCTAVE_DOWN: 'octave_down',\n  RECORD_TOGGLE: 'record_toggle',\n  PLAY_TOGGLE: 'play_toggle',\n  CLEAR: 'clear',\n  TEMPO_UP: 'tempo_up',\n  TEMPO_DOWN: 'tempo_down'\n};\n\n// Simple left hand gestures based on basic hand shapes\nconst recognizeLeftHandGesture = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Analyze basic hand shape for UI controls\n  const thumbTip = landmarks[4];\n  const indexTip = landmarks[8];\n  const middleTip = landmarks[12];\n  const ringTip = landmarks[16];\n  const pinkyTip = landmarks[20];\n  const wrist = landmarks[0];\n\n  // Calculate finger extensions (simplified)\n  const thumbExtended = distance(landmarks[1], thumbTip) > 0.08;\n  const indexExtended = distance(landmarks[5], indexTip) > 0.1;\n  const middleExtended = distance(landmarks[9], middleTip) > 0.1;\n  const ringExtended = distance(landmarks[13], ringTip) > 0.1;\n  const pinkyExtended = distance(landmarks[17], pinkyTip) > 0.1;\n\n  // Hand direction for up/down gestures\n  const handDirection = {\n    y: middleTip.y - wrist.y\n  };\n\n  // Simple gesture recognition\n\n  // Thumbs up - Octave Up\n  if (thumbExtended && !indexExtended && !middleExtended && !ringExtended && !pinkyExtended) {\n    return LEFT_HAND_GESTURES.OCTAVE_UP;\n  }\n\n  // Thumbs down - Octave Down  \n  if (thumbExtended && !indexExtended && !middleExtended && !ringExtended && !pinkyExtended && handDirection.y > 0.1) {\n    return LEFT_HAND_GESTURES.OCTAVE_DOWN;\n  }\n\n  // Index finger up - Record Toggle\n  if (!thumbExtended && indexExtended && !middleExtended && !ringExtended && !pinkyExtended) {\n    return LEFT_HAND_GESTURES.RECORD_TOGGLE;\n  }\n\n  // Peace sign (index + middle) - Play Toggle\n  if (!thumbExtended && indexExtended && middleExtended && !ringExtended && !pinkyExtended) {\n    return LEFT_HAND_GESTURES.PLAY_TOGGLE;\n  }\n\n  // Open hand - Clear\n  if (thumbExtended && indexExtended && middleExtended && ringExtended && pinkyExtended) {\n    return LEFT_HAND_GESTURES.CLEAR;\n  }\n  return null;\n};\nconst distance = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\nexport const analyzeBothHands = results => {\n  let leftHand = null;\n  let rightHand = null;\n  let leftHandGesture = null;\n  let rightHandNote = null;\n  if (results.multiHandLandmarks && results.multiHandedness) {\n    for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n      const landmarks = results.multiHandLandmarks[i];\n      const handedness = results.multiHandedness[i];\n\n      // Mirror landmarks for processing\n      const mirroredLandmarks = landmarks.map(landmark => ({\n        ...landmark,\n        x: 1 - landmark.x\n      }));\n\n      // MediaPipe labels are from the perspective of the person, so:\n      // \"Left\" means the person's left hand (appears on right side of camera)\n      // \"Right\" means the person's right hand (appears on left side of camera)\n      const isLeftHand = handedness.label === 'Left';\n      if (isLeftHand) {\n        // Left hand - UI navigation\n        leftHand = mirroredLandmarks;\n        leftHandGesture = recognizeLeftHandGesture(mirroredLandmarks);\n      } else {\n        // Right hand - musical notes\n        rightHand = mirroredLandmarks;\n        rightHandNote = recognizeKodalySign(mirroredLandmarks);\n      }\n    }\n  }\n  return {\n    leftHand,\n    rightHand,\n    leftHandGesture,\n    rightHandNote\n  };\n};","map":{"version":3,"names":["recognizeKodalySign","LEFT_HAND_GESTURES","OCTAVE_UP","OCTAVE_DOWN","RECORD_TOGGLE","PLAY_TOGGLE","CLEAR","TEMPO_UP","TEMPO_DOWN","recognizeLeftHandGesture","landmarks","length","thumbTip","indexTip","middleTip","ringTip","pinkyTip","wrist","thumbExtended","distance","indexExtended","middleExtended","ringExtended","pinkyExtended","handDirection","y","p1","p2","Math","sqrt","pow","x","z","analyzeBothHands","results","leftHand","rightHand","leftHandGesture","rightHandNote","multiHandLandmarks","multiHandedness","i","handedness","mirroredLandmarks","map","landmark","isLeftHand","label"],"sources":["C:/Users/user/sol-fa-app/src/utils/twoHandDetection.js"],"sourcesContent":["// Two-hand detection and gesture management\r\nimport { recognizeKodalySign } from './kodalySignsDB';\r\n\r\n// Left hand UI navigation gestures\r\nexport const LEFT_HAND_GESTURES = {\r\n    OCTAVE_UP: 'octave_up',\r\n    OCTAVE_DOWN: 'octave_down',\r\n    RECORD_TOGGLE: 'record_toggle',\r\n    PLAY_TOGGLE: 'play_toggle',\r\n    CLEAR: 'clear',\r\n    TEMPO_UP: 'tempo_up',\r\n    TEMPO_DOWN: 'tempo_down'\r\n};\r\n\r\n// Simple left hand gestures based on basic hand shapes\r\nconst recognizeLeftHandGesture = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Analyze basic hand shape for UI controls\r\n    const thumbTip = landmarks[4];\r\n    const indexTip = landmarks[8];\r\n    const middleTip = landmarks[12];\r\n    const ringTip = landmarks[16];\r\n    const pinkyTip = landmarks[20];\r\n    const wrist = landmarks[0];\r\n\r\n    // Calculate finger extensions (simplified)\r\n    const thumbExtended = distance(landmarks[1], thumbTip) > 0.08;\r\n    const indexExtended = distance(landmarks[5], indexTip) > 0.1;\r\n    const middleExtended = distance(landmarks[9], middleTip) > 0.1;\r\n    const ringExtended = distance(landmarks[13], ringTip) > 0.1;\r\n    const pinkyExtended = distance(landmarks[17], pinkyTip) > 0.1;\r\n\r\n    // Hand direction for up/down gestures\r\n    const handDirection = {\r\n        y: middleTip.y - wrist.y\r\n    };\r\n\r\n    // Simple gesture recognition\r\n    \r\n    // Thumbs up - Octave Up\r\n    if (thumbExtended && !indexExtended && !middleExtended && !ringExtended && !pinkyExtended) {\r\n        return LEFT_HAND_GESTURES.OCTAVE_UP;\r\n    }\r\n    \r\n    // Thumbs down - Octave Down  \r\n    if (thumbExtended && !indexExtended && !middleExtended && !ringExtended && !pinkyExtended &&\r\n        handDirection.y > 0.1) {\r\n        return LEFT_HAND_GESTURES.OCTAVE_DOWN;\r\n    }\r\n    \r\n    // Index finger up - Record Toggle\r\n    if (!thumbExtended && indexExtended && !middleExtended && !ringExtended && !pinkyExtended) {\r\n        return LEFT_HAND_GESTURES.RECORD_TOGGLE;\r\n    }\r\n    \r\n    // Peace sign (index + middle) - Play Toggle\r\n    if (!thumbExtended && indexExtended && middleExtended && !ringExtended && !pinkyExtended) {\r\n        return LEFT_HAND_GESTURES.PLAY_TOGGLE;\r\n    }\r\n    \r\n    // Open hand - Clear\r\n    if (thumbExtended && indexExtended && middleExtended && ringExtended && pinkyExtended) {\r\n        return LEFT_HAND_GESTURES.CLEAR;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst distance = (p1, p2) => Math.sqrt(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2)\r\n);\r\n\r\nexport const analyzeBothHands = (results) => {\r\n    let leftHand = null;\r\n    let rightHand = null;\r\n    let leftHandGesture = null;\r\n    let rightHandNote = null;\r\n\r\n    if (results.multiHandLandmarks && results.multiHandedness) {\r\n        for (let i = 0; i < results.multiHandLandmarks.length; i++) {\r\n            const landmarks = results.multiHandLandmarks[i];\r\n            const handedness = results.multiHandedness[i];\r\n            \r\n            // Mirror landmarks for processing\r\n            const mirroredLandmarks = landmarks.map(landmark => ({\r\n                ...landmark,\r\n                x: 1 - landmark.x\r\n            }));\r\n\r\n            // MediaPipe labels are from the perspective of the person, so:\r\n            // \"Left\" means the person's left hand (appears on right side of camera)\r\n            // \"Right\" means the person's right hand (appears on left side of camera)\r\n            const isLeftHand = handedness.label === 'Left';\r\n            \r\n            if (isLeftHand) {\r\n                // Left hand - UI navigation\r\n                leftHand = mirroredLandmarks;\r\n                leftHandGesture = recognizeLeftHandGesture(mirroredLandmarks);\r\n            } else {\r\n                // Right hand - musical notes\r\n                rightHand = mirroredLandmarks;\r\n                rightHandNote = recognizeKodalySign(mirroredLandmarks);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        leftHand,\r\n        rightHand,\r\n        leftHandGesture,\r\n        rightHandNote\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}