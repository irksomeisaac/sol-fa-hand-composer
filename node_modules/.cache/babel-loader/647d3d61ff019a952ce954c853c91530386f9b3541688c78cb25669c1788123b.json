{"ast":null,"code":"// Kodály hand sign recognition system\nconst FINGERS = {\n  THUMB: [1, 2, 3, 4],\n  INDEX: [5, 6, 7, 8],\n  MIDDLE: [9, 10, 11, 12],\n  RING: [13, 14, 15, 16],\n  PINKY: [17, 18, 19, 20]\n};\nconst calculateFingerBend = (landmarks, fingerIndices) => {\n  // Calculate angles at each joint\n  const angles = [];\n  for (let i = 0; i < 2; i++) {\n    const p1 = landmarks[fingerIndices[i]];\n    const p2 = landmarks[fingerIndices[i + 1]];\n    const p3 = landmarks[fingerIndices[i + 2]];\n    const angle = calculateAngle(p1, p2, p3);\n    angles.push(angle);\n  }\n\n  // Average bend angle - 180 is straight, 0 is fully bent\n  const averageBend = (angles[0] + angles[1]) / 2;\n\n  // Convert to a 0-1 scale where 1 is straight and 0 is bent\n  return (averageBend - 90) / 90;\n};\nconst calculateAngle = (p1, p2, p3) => {\n  const v1 = {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n    z: p1.z - p2.z\n  };\n  const v2 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n    z: p3.z - p2.z\n  };\n  const dotProduct = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n  const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\n  const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n  const angle = Math.acos(dotProduct / (mag1 * mag2)) * (180 / Math.PI);\n  return angle;\n};\nconst calculateHandDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n\n  // Calculate direction from wrist to middle finger\n  const direction = normalize({\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  });\n\n  // Calculate angles\n  const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\n  const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\n  return {\n    verticalAngle,\n    horizontalAngle,\n    isPointingUp: verticalAngle < 60,\n    isPointingDown: verticalAngle > 120,\n    isPointingForward: Math.abs(horizontalAngle) < 30,\n    isHorizontal: verticalAngle > 60 && verticalAngle < 120\n  };\n};\nconst calculatePalmDirection = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n\n  // Calculate palm normal\n  const v1 = normalize({\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  });\n  const v2 = normalize({\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  });\n  const normal = normalize({\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  });\n  const palmAngle = Math.atan2(normal.y, normal.x) * (180 / Math.PI);\n  return {\n    normal,\n    palmAngle,\n    isDown: normal.y > 0.5,\n    isUp: normal.y < -0.5,\n    isSide: Math.abs(normal.x) > 0.5\n  };\n};\nconst normalize = vector => {\n  const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  return {\n    x: vector.x / magnitude,\n    y: vector.y / magnitude,\n    z: vector.z / magnitude\n  };\n};\nconst analyzeHandShape = landmarks => {\n  // Calculate finger bends\n  const fingerBends = {\n    thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\n    index: calculateFingerBend(landmarks, FINGERS.INDEX),\n    middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\n    ring: calculateFingerBend(landmarks, FINGERS.RING),\n    pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\n  };\n  const handDirection = calculateHandDirection(landmarks);\n  const palmDirection = calculatePalmDirection(landmarks);\n\n  // Normalize bend values to 0-1 range and clamp\n  const extensions = Object.fromEntries(Object.entries(fingerBends).map(([finger, bend]) => [finger, Math.max(0, Math.min(1, (bend + 1) / 2))]));\n  const EXTENSION_THRESHOLD = 0.6;\n  const CURL_THRESHOLD = 0.3;\n  return {\n    extensions,\n    handDirection,\n    palmDirection,\n    isIndexPointingUp: extensions.index > EXTENSION_THRESHOLD && handDirection.isPointingUp,\n    areOtherFingersClosed: extensions.middle < CURL_THRESHOLD && extensions.ring < CURL_THRESHOLD && extensions.pinky < CURL_THRESHOLD,\n    areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\n    areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\n  };\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const handShape = analyzeHandShape(landmarks);\n  let sign = null;\n  let confidence = 0;\n\n  // Ti - index finger pointing up, others closed\n  if (handShape.isIndexPointingUp && handShape.areOtherFingersClosed && handShape.handDirection.verticalAngle < 45) {\n    sign = 'ti';\n    confidence = 0.9;\n  }\n  // Do - all fingers closed\n  else if (handShape.areAllFingersClosed && handShape.handDirection.isHorizontal) {\n    sign = 'do';\n    confidence = 0.9;\n  }\n  // Re - all fingers extended at 45 degrees\n  else if (handShape.areAllFingersExtended && handShape.handDirection.verticalAngle > 30 && handShape.handDirection.verticalAngle < 60) {\n    sign = 're';\n    confidence = 0.9;\n  }\n  // Mi - all fingers extended horizontal, palm down\n  else if (handShape.areAllFingersExtended && handShape.handDirection.isHorizontal && handShape.palmDirection.isDown) {\n    sign = 'mi';\n    confidence = 0.9;\n  }\n  // Fa - thumb down, fingers closed\n  else if (handShape.extensions.thumb > 0.5 && handShape.areOtherFingersClosed && handShape.handDirection.isPointingDown) {\n    sign = 'fa';\n    confidence = 0.9;\n  }\n  // Sol - flat hand forward, palm side\n  else if (handShape.areAllFingersExtended && handShape.handDirection.isPointingForward && handShape.palmDirection.isSide) {\n    sign = 'sol';\n    confidence = 0.9;\n  }\n  // La - relaxed curved fingers, palm down\n  else if (!handShape.areAllFingersExtended && !handShape.areAllFingersClosed && handShape.palmDirection.isDown) {\n    sign = 'la';\n    confidence = 0.8;\n  }\n  return {\n    sign,\n    confidence,\n    debug: {\n      extensions: handShape.extensions,\n      handDirection: {\n        verticalAngle: handShape.handDirection.verticalAngle,\n        horizontalAngle: handShape.handDirection.horizontalAngle,\n        isPointingUp: handShape.handDirection.isPointingUp,\n        isPointingDown: handShape.handDirection.isPointingDown,\n        isHorizontal: handShape.handDirection.isHorizontal,\n        isPointingForward: handShape.handDirection.isPointingForward\n      },\n      palmOrientation: {\n        isDown: handShape.palmDirection.isDown,\n        isUp: handShape.palmDirection.isUp,\n        isSide: handShape.palmDirection.isSide,\n        angle: handShape.palmDirection.palmAngle\n      }\n    }\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  return analyzeHandShape(landmarks);\n};","map":{"version":3,"names":["FINGERS","THUMB","INDEX","MIDDLE","RING","PINKY","calculateFingerBend","landmarks","fingerIndices","angles","i","p1","p2","p3","angle","calculateAngle","push","averageBend","v1","x","y","z","v2","dotProduct","mag1","Math","sqrt","mag2","acos","PI","calculateHandDirection","wrist","middleBase","middleTip","direction","normalize","verticalAngle","horizontalAngle","atan2","isPointingUp","isPointingDown","isPointingForward","abs","isHorizontal","calculatePalmDirection","indexBase","pinkyBase","normal","palmAngle","isDown","isUp","isSide","vector","magnitude","analyzeHandShape","fingerBends","thumb","index","middle","ring","pinky","handDirection","palmDirection","extensions","Object","fromEntries","entries","map","finger","bend","max","min","EXTENSION_THRESHOLD","CURL_THRESHOLD","isIndexPointingUp","areOtherFingersClosed","areAllFingersClosed","values","every","ext","areAllFingersExtended","recognizeKodalySign","length","handShape","sign","confidence","debug","palmOrientation","analyzeHand"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system\r\nconst FINGERS = {\r\n    THUMB: [1, 2, 3, 4],\r\n    INDEX: [5, 6, 7, 8],\r\n    MIDDLE: [9, 10, 11, 12],\r\n    RING: [13, 14, 15, 16],\r\n    PINKY: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerBend = (landmarks, fingerIndices) => {\r\n    // Calculate angles at each joint\r\n    const angles = [];\r\n    for (let i = 0; i < 2; i++) {\r\n        const p1 = landmarks[fingerIndices[i]];\r\n        const p2 = landmarks[fingerIndices[i + 1]];\r\n        const p3 = landmarks[fingerIndices[i + 2]];\r\n        \r\n        const angle = calculateAngle(p1, p2, p3);\r\n        angles.push(angle);\r\n    }\r\n\r\n    // Average bend angle - 180 is straight, 0 is fully bent\r\n    const averageBend = (angles[0] + angles[1]) / 2;\r\n    \r\n    // Convert to a 0-1 scale where 1 is straight and 0 is bent\r\n    return (averageBend - 90) / 90;\r\n};\r\n\r\nconst calculateAngle = (p1, p2, p3) => {\r\n    const v1 = {\r\n        x: p1.x - p2.x,\r\n        y: p1.y - p2.y,\r\n        z: p1.z - p2.z\r\n    };\r\n    const v2 = {\r\n        x: p3.x - p2.x,\r\n        y: p3.y - p2.y,\r\n        z: p3.z - p2.z\r\n    };\r\n\r\n    const dotProduct = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n    const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\r\n    const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\r\n\r\n    const angle = Math.acos(dotProduct / (mag1 * mag2)) * (180 / Math.PI);\r\n    return angle;\r\n};\r\n\r\nconst calculateHandDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Calculate direction from wrist to middle finger\r\n    const direction = normalize({\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    });\r\n\r\n    // Calculate angles\r\n    const verticalAngle = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const horizontalAngle = Math.atan2(direction.z, direction.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        verticalAngle,\r\n        horizontalAngle,\r\n        isPointingUp: verticalAngle < 60,\r\n        isPointingDown: verticalAngle > 120,\r\n        isPointingForward: Math.abs(horizontalAngle) < 30,\r\n        isHorizontal: verticalAngle > 60 && verticalAngle < 120\r\n    };\r\n};\r\n\r\nconst calculatePalmDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n\r\n    // Calculate palm normal\r\n    const v1 = normalize({\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    });\r\n    \r\n    const v2 = normalize({\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    });\r\n\r\n    const normal = normalize({\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    });\r\n\r\n    const palmAngle = Math.atan2(normal.y, normal.x) * (180 / Math.PI);\r\n\r\n    return {\r\n        normal,\r\n        palmAngle,\r\n        isDown: normal.y > 0.5,\r\n        isUp: normal.y < -0.5,\r\n        isSide: Math.abs(normal.x) > 0.5\r\n    };\r\n};\r\n\r\nconst normalize = (vector) => {\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\r\n    return {\r\n        x: vector.x / magnitude,\r\n        y: vector.y / magnitude,\r\n        z: vector.z / magnitude\r\n    };\r\n};\r\n\r\nconst analyzeHandShape = (landmarks) => {\r\n    // Calculate finger bends\r\n    const fingerBends = {\r\n        thumb: calculateFingerBend(landmarks, FINGERS.THUMB),\r\n        index: calculateFingerBend(landmarks, FINGERS.INDEX),\r\n        middle: calculateFingerBend(landmarks, FINGERS.MIDDLE),\r\n        ring: calculateFingerBend(landmarks, FINGERS.RING),\r\n        pinky: calculateFingerBend(landmarks, FINGERS.PINKY)\r\n    };\r\n\r\n    const handDirection = calculateHandDirection(landmarks);\r\n    const palmDirection = calculatePalmDirection(landmarks);\r\n\r\n    // Normalize bend values to 0-1 range and clamp\r\n    const extensions = Object.fromEntries(\r\n        Object.entries(fingerBends).map(([finger, bend]) => [\r\n            finger,\r\n            Math.max(0, Math.min(1, (bend + 1) / 2))\r\n        ])\r\n    );\r\n\r\n    const EXTENSION_THRESHOLD = 0.6;\r\n    const CURL_THRESHOLD = 0.3;\r\n\r\n    return {\r\n        extensions,\r\n        handDirection,\r\n        palmDirection,\r\n        isIndexPointingUp: extensions.index > EXTENSION_THRESHOLD && handDirection.isPointingUp,\r\n        areOtherFingersClosed: \r\n            extensions.middle < CURL_THRESHOLD && \r\n            extensions.ring < CURL_THRESHOLD && \r\n            extensions.pinky < CURL_THRESHOLD,\r\n        areAllFingersClosed: Object.values(extensions).every(ext => ext < CURL_THRESHOLD),\r\n        areAllFingersExtended: Object.values(extensions).every(ext => ext > EXTENSION_THRESHOLD)\r\n    };\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const handShape = analyzeHandShape(landmarks);\r\n    let sign = null;\r\n    let confidence = 0;\r\n\r\n    // Ti - index finger pointing up, others closed\r\n    if (handShape.isIndexPointingUp && \r\n        handShape.areOtherFingersClosed && \r\n        handShape.handDirection.verticalAngle < 45) {\r\n        sign = 'ti';\r\n        confidence = 0.9;\r\n    }\r\n    // Do - all fingers closed\r\n    else if (handShape.areAllFingersClosed && \r\n             handShape.handDirection.isHorizontal) {\r\n        sign = 'do';\r\n        confidence = 0.9;\r\n    }\r\n    // Re - all fingers extended at 45 degrees\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.handDirection.verticalAngle > 30 && \r\n             handShape.handDirection.verticalAngle < 60) {\r\n        sign = 're';\r\n        confidence = 0.9;\r\n    }\r\n    // Mi - all fingers extended horizontal, palm down\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.handDirection.isHorizontal && \r\n             handShape.palmDirection.isDown) {\r\n        sign = 'mi';\r\n        confidence = 0.9;\r\n    }\r\n    // Fa - thumb down, fingers closed\r\n    else if (handShape.extensions.thumb > 0.5 && \r\n             handShape.areOtherFingersClosed && \r\n             handShape.handDirection.isPointingDown) {\r\n        sign = 'fa';\r\n        confidence = 0.9;\r\n    }\r\n    // Sol - flat hand forward, palm side\r\n    else if (handShape.areAllFingersExtended && \r\n             handShape.handDirection.isPointingForward && \r\n             handShape.palmDirection.isSide) {\r\n        sign = 'sol';\r\n        confidence = 0.9;\r\n    }\r\n    // La - relaxed curved fingers, palm down\r\n    else if (!handShape.areAllFingersExtended && \r\n             !handShape.areAllFingersClosed &&\r\n             handShape.palmDirection.isDown) {\r\n        sign = 'la';\r\n        confidence = 0.8;\r\n    }\r\n\r\n    return {\r\n        sign,\r\n        confidence,\r\n        debug: {\r\n            extensions: handShape.extensions,\r\n            handDirection: {\r\n                verticalAngle: handShape.handDirection.verticalAngle,\r\n                horizontalAngle: handShape.handDirection.horizontalAngle,\r\n                isPointingUp: handShape.handDirection.isPointingUp,\r\n                isPointingDown: handShape.handDirection.isPointingDown,\r\n                isHorizontal: handShape.handDirection.isHorizontal,\r\n                isPointingForward: handShape.handDirection.isPointingForward\r\n            },\r\n            palmOrientation: {\r\n                isDown: handShape.palmDirection.isDown,\r\n                isUp: handShape.palmDirection.isUp,\r\n                isSide: handShape.palmDirection.isSide,\r\n                angle: handShape.palmDirection.palmAngle\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n    return analyzeHandShape(landmarks);\r\n};\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG;EACZC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnBC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACvBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACtBC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAC1B,CAAC;AAED,MAAMC,mBAAmB,GAAGA,CAACC,SAAS,EAAEC,aAAa,KAAK;EACtD;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,MAAMC,EAAE,GAAGJ,SAAS,CAACC,aAAa,CAACE,CAAC,CAAC,CAAC;IACtC,MAAME,EAAE,GAAGL,SAAS,CAACC,aAAa,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,MAAMG,EAAE,GAAGN,SAAS,CAACC,aAAa,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;IAE1C,MAAMI,KAAK,GAAGC,cAAc,CAACJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IACxCJ,MAAM,CAACO,IAAI,CAACF,KAAK,CAAC;EACtB;;EAEA;EACA,MAAMG,WAAW,GAAG,CAACR,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;;EAE/C;EACA,OAAO,CAACQ,WAAW,GAAG,EAAE,IAAI,EAAE;AAClC,CAAC;AAED,MAAMF,cAAc,GAAGA,CAACJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAK;EACnC,MAAMK,EAAE,GAAG;IACPC,CAAC,EAAER,EAAE,CAACQ,CAAC,GAAGP,EAAE,CAACO,CAAC;IACdC,CAAC,EAAET,EAAE,CAACS,CAAC,GAAGR,EAAE,CAACQ,CAAC;IACdC,CAAC,EAAEV,EAAE,CAACU,CAAC,GAAGT,EAAE,CAACS;EACjB,CAAC;EACD,MAAMC,EAAE,GAAG;IACPH,CAAC,EAAEN,EAAE,CAACM,CAAC,GAAGP,EAAE,CAACO,CAAC;IACdC,CAAC,EAAEP,EAAE,CAACO,CAAC,GAAGR,EAAE,CAACQ,CAAC;IACdC,CAAC,EAAER,EAAE,CAACQ,CAAC,GAAGT,EAAE,CAACS;EACjB,CAAC;EAED,MAAME,UAAU,GAAGL,EAAE,CAACC,CAAC,GAAGG,EAAE,CAACH,CAAC,GAAGD,EAAE,CAACE,CAAC,GAAGE,EAAE,CAACF,CAAC,GAAGF,EAAE,CAACG,CAAC,GAAGC,EAAE,CAACD,CAAC;EAC1D,MAAMG,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACR,EAAE,CAACC,CAAC,GAAGD,EAAE,CAACC,CAAC,GAAGD,EAAE,CAACE,CAAC,GAAGF,EAAE,CAACE,CAAC,GAAGF,EAAE,CAACG,CAAC,GAAGH,EAAE,CAACG,CAAC,CAAC;EAC/D,MAAMM,IAAI,GAAGF,IAAI,CAACC,IAAI,CAACJ,EAAE,CAACH,CAAC,GAAGG,EAAE,CAACH,CAAC,GAAGG,EAAE,CAACF,CAAC,GAAGE,EAAE,CAACF,CAAC,GAAGE,EAAE,CAACD,CAAC,GAAGC,EAAE,CAACD,CAAC,CAAC;EAE/D,MAAMP,KAAK,GAAGW,IAAI,CAACG,IAAI,CAACL,UAAU,IAAIC,IAAI,GAAGG,IAAI,CAAC,CAAC,IAAI,GAAG,GAAGF,IAAI,CAACI,EAAE,CAAC;EACrE,OAAOf,KAAK;AAChB,CAAC;AAED,MAAMgB,sBAAsB,GAAIvB,SAAS,IAAK;EAC1C,MAAMwB,KAAK,GAAGxB,SAAS,CAAC,CAAC,CAAC;EAC1B,MAAMyB,UAAU,GAAGzB,SAAS,CAAC,CAAC,CAAC;EAC/B,MAAM0B,SAAS,GAAG1B,SAAS,CAAC,EAAE,CAAC;;EAE/B;EACA,MAAM2B,SAAS,GAAGC,SAAS,CAAC;IACxBhB,CAAC,EAAEc,SAAS,CAACd,CAAC,GAAGY,KAAK,CAACZ,CAAC;IACxBC,CAAC,EAAEa,SAAS,CAACb,CAAC,GAAGW,KAAK,CAACX,CAAC;IACxBC,CAAC,EAAEY,SAAS,CAACZ,CAAC,GAAGU,KAAK,CAACV;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAMe,aAAa,GAAGX,IAAI,CAACG,IAAI,CAAC,CAACM,SAAS,CAACd,CAAC,CAAC,IAAI,GAAG,GAAGK,IAAI,CAACI,EAAE,CAAC;EAC/D,MAAMQ,eAAe,GAAGZ,IAAI,CAACa,KAAK,CAACJ,SAAS,CAACb,CAAC,EAAEa,SAAS,CAACf,CAAC,CAAC,IAAI,GAAG,GAAGM,IAAI,CAACI,EAAE,CAAC;EAE9E,OAAO;IACHO,aAAa;IACbC,eAAe;IACfE,YAAY,EAAEH,aAAa,GAAG,EAAE;IAChCI,cAAc,EAAEJ,aAAa,GAAG,GAAG;IACnCK,iBAAiB,EAAEhB,IAAI,CAACiB,GAAG,CAACL,eAAe,CAAC,GAAG,EAAE;IACjDM,YAAY,EAAEP,aAAa,GAAG,EAAE,IAAIA,aAAa,GAAG;EACxD,CAAC;AACL,CAAC;AAED,MAAMQ,sBAAsB,GAAIrC,SAAS,IAAK;EAC1C,MAAMwB,KAAK,GAAGxB,SAAS,CAAC,CAAC,CAAC;EAC1B,MAAMsC,SAAS,GAAGtC,SAAS,CAAC,CAAC,CAAC;EAC9B,MAAMuC,SAAS,GAAGvC,SAAS,CAAC,EAAE,CAAC;;EAE/B;EACA,MAAMW,EAAE,GAAGiB,SAAS,CAAC;IACjBhB,CAAC,EAAE0B,SAAS,CAAC1B,CAAC,GAAGY,KAAK,CAACZ,CAAC;IACxBC,CAAC,EAAEyB,SAAS,CAACzB,CAAC,GAAGW,KAAK,CAACX,CAAC;IACxBC,CAAC,EAAEwB,SAAS,CAACxB,CAAC,GAAGU,KAAK,CAACV;EAC3B,CAAC,CAAC;EAEF,MAAMC,EAAE,GAAGa,SAAS,CAAC;IACjBhB,CAAC,EAAE2B,SAAS,CAAC3B,CAAC,GAAGY,KAAK,CAACZ,CAAC;IACxBC,CAAC,EAAE0B,SAAS,CAAC1B,CAAC,GAAGW,KAAK,CAACX,CAAC;IACxBC,CAAC,EAAEyB,SAAS,CAACzB,CAAC,GAAGU,KAAK,CAACV;EAC3B,CAAC,CAAC;EAEF,MAAM0B,MAAM,GAAGZ,SAAS,CAAC;IACrBhB,CAAC,EAAED,EAAE,CAACE,CAAC,GAAGE,EAAE,CAACD,CAAC,GAAGH,EAAE,CAACG,CAAC,GAAGC,EAAE,CAACF,CAAC;IAC5BA,CAAC,EAAEF,EAAE,CAACG,CAAC,GAAGC,EAAE,CAACH,CAAC,GAAGD,EAAE,CAACC,CAAC,GAAGG,EAAE,CAACD,CAAC;IAC5BA,CAAC,EAAEH,EAAE,CAACC,CAAC,GAAGG,EAAE,CAACF,CAAC,GAAGF,EAAE,CAACE,CAAC,GAAGE,EAAE,CAACH;EAC/B,CAAC,CAAC;EAEF,MAAM6B,SAAS,GAAGvB,IAAI,CAACa,KAAK,CAACS,MAAM,CAAC3B,CAAC,EAAE2B,MAAM,CAAC5B,CAAC,CAAC,IAAI,GAAG,GAAGM,IAAI,CAACI,EAAE,CAAC;EAElE,OAAO;IACHkB,MAAM;IACNC,SAAS;IACTC,MAAM,EAAEF,MAAM,CAAC3B,CAAC,GAAG,GAAG;IACtB8B,IAAI,EAAEH,MAAM,CAAC3B,CAAC,GAAG,CAAC,GAAG;IACrB+B,MAAM,EAAE1B,IAAI,CAACiB,GAAG,CAACK,MAAM,CAAC5B,CAAC,CAAC,GAAG;EACjC,CAAC;AACL,CAAC;AAED,MAAMgB,SAAS,GAAIiB,MAAM,IAAK;EAC1B,MAAMC,SAAS,GAAG5B,IAAI,CAACC,IAAI,CAAC0B,MAAM,CAACjC,CAAC,GAAGiC,MAAM,CAACjC,CAAC,GAAGiC,MAAM,CAAChC,CAAC,GAAGgC,MAAM,CAAChC,CAAC,GAAGgC,MAAM,CAAC/B,CAAC,GAAG+B,MAAM,CAAC/B,CAAC,CAAC;EAC5F,OAAO;IACHF,CAAC,EAAEiC,MAAM,CAACjC,CAAC,GAAGkC,SAAS;IACvBjC,CAAC,EAAEgC,MAAM,CAAChC,CAAC,GAAGiC,SAAS;IACvBhC,CAAC,EAAE+B,MAAM,CAAC/B,CAAC,GAAGgC;EAClB,CAAC;AACL,CAAC;AAED,MAAMC,gBAAgB,GAAI/C,SAAS,IAAK;EACpC;EACA,MAAMgD,WAAW,GAAG;IAChBC,KAAK,EAAElD,mBAAmB,CAACC,SAAS,EAAEP,OAAO,CAACC,KAAK,CAAC;IACpDwD,KAAK,EAAEnD,mBAAmB,CAACC,SAAS,EAAEP,OAAO,CAACE,KAAK,CAAC;IACpDwD,MAAM,EAAEpD,mBAAmB,CAACC,SAAS,EAAEP,OAAO,CAACG,MAAM,CAAC;IACtDwD,IAAI,EAAErD,mBAAmB,CAACC,SAAS,EAAEP,OAAO,CAACI,IAAI,CAAC;IAClDwD,KAAK,EAAEtD,mBAAmB,CAACC,SAAS,EAAEP,OAAO,CAACK,KAAK;EACvD,CAAC;EAED,MAAMwD,aAAa,GAAG/B,sBAAsB,CAACvB,SAAS,CAAC;EACvD,MAAMuD,aAAa,GAAGlB,sBAAsB,CAACrC,SAAS,CAAC;;EAEvD;EACA,MAAMwD,UAAU,GAAGC,MAAM,CAACC,WAAW,CACjCD,MAAM,CAACE,OAAO,CAACX,WAAW,CAAC,CAACY,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEC,IAAI,CAAC,KAAK,CAChDD,MAAM,EACN3C,IAAI,CAAC6C,GAAG,CAAC,CAAC,EAAE7C,IAAI,CAAC8C,GAAG,CAAC,CAAC,EAAE,CAACF,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAC3C,CACL,CAAC;EAED,MAAMG,mBAAmB,GAAG,GAAG;EAC/B,MAAMC,cAAc,GAAG,GAAG;EAE1B,OAAO;IACHV,UAAU;IACVF,aAAa;IACbC,aAAa;IACbY,iBAAiB,EAAEX,UAAU,CAACN,KAAK,GAAGe,mBAAmB,IAAIX,aAAa,CAACtB,YAAY;IACvFoC,qBAAqB,EACjBZ,UAAU,CAACL,MAAM,GAAGe,cAAc,IAClCV,UAAU,CAACJ,IAAI,GAAGc,cAAc,IAChCV,UAAU,CAACH,KAAK,GAAGa,cAAc;IACrCG,mBAAmB,EAAEZ,MAAM,CAACa,MAAM,CAACd,UAAU,CAAC,CAACe,KAAK,CAACC,GAAG,IAAIA,GAAG,GAAGN,cAAc,CAAC;IACjFO,qBAAqB,EAAEhB,MAAM,CAACa,MAAM,CAACd,UAAU,CAAC,CAACe,KAAK,CAACC,GAAG,IAAIA,GAAG,GAAGP,mBAAmB;EAC3F,CAAC;AACL,CAAC;AAED,OAAO,MAAMS,mBAAmB,GAAI1E,SAAS,IAAK;EAC9C,IAAI,CAACA,SAAS,IAAIA,SAAS,CAAC2E,MAAM,GAAG,EAAE,EAAE,OAAO,IAAI;EAEpD,MAAMC,SAAS,GAAG7B,gBAAgB,CAAC/C,SAAS,CAAC;EAC7C,IAAI6E,IAAI,GAAG,IAAI;EACf,IAAIC,UAAU,GAAG,CAAC;;EAElB;EACA,IAAIF,SAAS,CAACT,iBAAiB,IAC3BS,SAAS,CAACR,qBAAqB,IAC/BQ,SAAS,CAACtB,aAAa,CAACzB,aAAa,GAAG,EAAE,EAAE;IAC5CgD,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACP,mBAAmB,IAC7BO,SAAS,CAACtB,aAAa,CAAClB,YAAY,EAAE;IAC3CyC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BG,SAAS,CAACtB,aAAa,CAACzB,aAAa,GAAG,EAAE,IAC1C+C,SAAS,CAACtB,aAAa,CAACzB,aAAa,GAAG,EAAE,EAAE;IACjDgD,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BG,SAAS,CAACtB,aAAa,CAAClB,YAAY,IACpCwC,SAAS,CAACrB,aAAa,CAACb,MAAM,EAAE;IACrCmC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACpB,UAAU,CAACP,KAAK,GAAG,GAAG,IAChC2B,SAAS,CAACR,qBAAqB,IAC/BQ,SAAS,CAACtB,aAAa,CAACrB,cAAc,EAAE;IAC7C4C,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAIF,SAAS,CAACH,qBAAqB,IAC/BG,SAAS,CAACtB,aAAa,CAACpB,iBAAiB,IACzC0C,SAAS,CAACrB,aAAa,CAACX,MAAM,EAAE;IACrCiC,IAAI,GAAG,KAAK;IACZC,UAAU,GAAG,GAAG;EACpB;EACA;EAAA,KACK,IAAI,CAACF,SAAS,CAACH,qBAAqB,IAChC,CAACG,SAAS,CAACP,mBAAmB,IAC9BO,SAAS,CAACrB,aAAa,CAACb,MAAM,EAAE;IACrCmC,IAAI,GAAG,IAAI;IACXC,UAAU,GAAG,GAAG;EACpB;EAEA,OAAO;IACHD,IAAI;IACJC,UAAU;IACVC,KAAK,EAAE;MACHvB,UAAU,EAAEoB,SAAS,CAACpB,UAAU;MAChCF,aAAa,EAAE;QACXzB,aAAa,EAAE+C,SAAS,CAACtB,aAAa,CAACzB,aAAa;QACpDC,eAAe,EAAE8C,SAAS,CAACtB,aAAa,CAACxB,eAAe;QACxDE,YAAY,EAAE4C,SAAS,CAACtB,aAAa,CAACtB,YAAY;QAClDC,cAAc,EAAE2C,SAAS,CAACtB,aAAa,CAACrB,cAAc;QACtDG,YAAY,EAAEwC,SAAS,CAACtB,aAAa,CAAClB,YAAY;QAClDF,iBAAiB,EAAE0C,SAAS,CAACtB,aAAa,CAACpB;MAC/C,CAAC;MACD8C,eAAe,EAAE;QACbtC,MAAM,EAAEkC,SAAS,CAACrB,aAAa,CAACb,MAAM;QACtCC,IAAI,EAAEiC,SAAS,CAACrB,aAAa,CAACZ,IAAI;QAClCC,MAAM,EAAEgC,SAAS,CAACrB,aAAa,CAACX,MAAM;QACtCrC,KAAK,EAAEqE,SAAS,CAACrB,aAAa,CAACd;MACnC;IACJ;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMwC,WAAW,GAAIjF,SAAS,IAAK;EACtC,IAAI,CAACA,SAAS,IAAIA,SAAS,CAAC2E,MAAM,GAAG,EAAE,EAAE,OAAO,IAAI;EACpD,OAAO5B,gBAAgB,CAAC/C,SAAS,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}