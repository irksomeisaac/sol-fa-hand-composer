{"ast":null,"code":"// Kodály hand sign recognition system based on reference images\nconst fingerJointPairs = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20]\n};\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\n  const joints = fingerIndices.map(idx => landmarks[idx]);\n  const baseToTip = distance(joints[0], joints[joints.length - 1]);\n  const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => sum + distance(joints[i], joints[i + 1]), 0);\n  return 1 - baseToTip / totalLength; // 1 = fully curled, 0 = straight\n};\nconst distance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2) + Math.pow(p1.z - p2.z, 2));\n};\nconst getFingerDirection = landmarks => {\n  const wrist = landmarks[0];\n  const middleBase = landmarks[9];\n  const middleTip = landmarks[12];\n\n  // Calculate direction vector from wrist to middle finger tip\n  const direction = {\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n  return {\n    x: direction.x,\n    y: direction.y,\n    z: direction.z,\n    isPointingForward: Math.abs(direction.z) > Math.max(Math.abs(direction.x), Math.abs(direction.y)),\n    isPointingSideways: Math.abs(direction.x) > Math.max(Math.abs(direction.y), Math.abs(direction.z))\n  };\n};\nconst getPalmOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const indexBase = landmarks[5];\n  const pinkyBase = landmarks[17];\n  const middleTip = landmarks[12];\n\n  // Calculate palm normal using cross product\n  const v1 = {\n    x: indexBase.x - wrist.x,\n    y: indexBase.y - wrist.y,\n    z: indexBase.z - wrist.z\n  };\n  const v2 = {\n    x: pinkyBase.x - wrist.x,\n    y: pinkyBase.y - wrist.y,\n    z: pinkyBase.z - wrist.z\n  };\n  const normal = {\n    x: v1.y * v2.z - v1.z * v2.y,\n    y: v1.z * v2.x - v1.x * v2.z,\n    z: v1.x * v2.y - v1.y * v2.x\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n  normal.x /= magnitude;\n  normal.y /= magnitude;\n  normal.z /= magnitude;\n  return {\n    normal,\n    isDownward: normal.y > 0.7,\n    isUpward: normal.y < -0.7,\n    isSideways: Math.abs(normal.x) > 0.7,\n    direction: {\n      x: normal.x,\n      y: normal.y,\n      z: normal.z\n    }\n  };\n};\nconst getHandOrientation = landmarks => {\n  const wrist = landmarks[0];\n  const middleMcp = landmarks[9];\n  const middleTip = landmarks[12];\n\n  // Calculate hand direction vector\n  const direction = {\n    x: middleTip.x - wrist.x,\n    y: middleTip.y - wrist.y,\n    z: middleTip.z - wrist.z\n  };\n\n  // Normalize\n  const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n  direction.x /= magnitude;\n  direction.y /= magnitude;\n  direction.z /= magnitude;\n\n  // Calculate angles\n  const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\n  const angleFromHorizontal = Math.abs(90 - angleFromVertical);\n  return {\n    direction,\n    angleFromVertical,\n    angleFromHorizontal,\n    isVertical: angleFromVertical < 20 || angleFromVertical > 160,\n    isHorizontal: angleFromHorizontal < 20,\n    isDiagonal: angleFromVertical > 20 && angleFromVertical < 160 && angleFromHorizontal > 20\n  };\n};\nconst areFingersTogether = landmarks => {\n  const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\n  let maxDistance = 0;\n  for (let i = 0; i < tipIndices.length - 1; i++) {\n    const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\n    maxDistance = Math.max(maxDistance, dist);\n  }\n  return maxDistance < 0.1;\n};\nexport const recognizeKodalySign = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n\n  // Calculate finger curls\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const handOrientation = getHandOrientation(landmarks);\n  const palmOrientation = getPalmOrientation(landmarks);\n  const fingerDirection = getFingerDirection(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n\n  // Check finger states\n  const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\n  const fingersClosedExceptThumb = curls.index > 0.7 && curls.middle > 0.7 && curls.ring > 0.7 && curls.pinky > 0.7;\n  const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\n\n  // Debug information\n  const debug = {\n    curls,\n    handOrientation,\n    palmOrientation,\n    fingerDirection,\n    fingersTogether,\n    fingersExtended,\n    fingersClosedExceptThumb,\n    allFingersClosed\n  };\n\n  // Sign recognition with clear distinctions\n\n  // Do - closed fist held horizontally\n  if (allFingersClosed && handOrientation.isHorizontal) {\n    return {\n      sign: 'do',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Re - flat hand diagonal upward\n  if (fingersExtended && fingersTogether && handOrientation.isDiagonal && handOrientation.angleFromVertical < 90) {\n    return {\n      sign: 're',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Mi - flat hand horizontal, palm down\n  if (fingersExtended && fingersTogether && handOrientation.isHorizontal && palmOrientation.isDownward) {\n    return {\n      sign: 'mi',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Fa - fist with thumb extended downward\n  if (fingersClosedExceptThumb && curls.thumb < 0.3 && handOrientation.angleFromVertical > 120) {\n    return {\n      sign: 'fa',\n      confidence: 0.9,\n      debug\n    };\n  }\n\n  // Sol - flat hand forward, palm sideways\n  if (fingersExtended && fingersTogether && fingerDirection.isPointingForward && palmOrientation.isSideways) {\n    return {\n      sign: 'sol',\n      confidence: 0.9,\n      debug\n    };\n  }\n  return {\n    sign: null,\n    debug\n  };\n};\nexport const analyzeHand = landmarks => {\n  if (!landmarks || landmarks.length < 21) return null;\n  const curls = {\n    thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\n    index: calculateFingerCurl(landmarks, fingerJointPairs.index),\n    middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\n    ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\n    pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\n  };\n  const handOrientation = getHandOrientation(landmarks);\n  const palmOrientation = getPalmOrientation(landmarks);\n  const fingerDirection = getFingerDirection(landmarks);\n  const fingersTogether = areFingersTogether(landmarks);\n  const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\n  const fingersClosedExceptThumb = curls.index > 0.7 && curls.middle > 0.7 && curls.ring > 0.7 && curls.pinky > 0.7;\n  const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\n  return {\n    fingerCurls: curls,\n    handOrientation,\n    palmOrientation,\n    fingerDirection,\n    fingersTogether,\n    fingersExtended,\n    fingersClosedExceptThumb,\n    allFingersClosed,\n    possibleSigns: {\n      isDo: allFingersClosed && handOrientation.isHorizontal,\n      isRe: fingersExtended && fingersTogether && handOrientation.isDiagonal && handOrientation.angleFromVertical < 90,\n      isMi: fingersExtended && fingersTogether && handOrientation.isHorizontal && palmOrientation.isDownward,\n      isFa: fingersClosedExceptThumb && curls.thumb < 0.3 && handOrientation.angleFromVertical > 120,\n      isSol: fingersExtended && fingersTogether && fingerDirection.isPointingForward && palmOrientation.isSideways\n    }\n  };\n};","map":{"version":3,"names":["fingerJointPairs","thumb","index","middle","ring","pinky","calculateFingerCurl","landmarks","fingerIndices","joints","map","idx","baseToTip","distance","length","totalLength","slice","reduce","sum","_","i","p1","p2","Math","sqrt","pow","x","y","z","getFingerDirection","wrist","middleBase","middleTip","direction","magnitude","isPointingForward","abs","max","isPointingSideways","getPalmOrientation","indexBase","pinkyBase","v1","v2","normal","isDownward","isUpward","isSideways","getHandOrientation","middleMcp","angleFromVertical","acos","PI","angleFromHorizontal","isVertical","isHorizontal","isDiagonal","areFingersTogether","tipIndices","maxDistance","dist","recognizeKodalySign","curls","handOrientation","palmOrientation","fingerDirection","fingersTogether","fingersExtended","Object","values","every","curl","fingersClosedExceptThumb","allFingersClosed","debug","sign","confidence","analyzeHand","fingerCurls","possibleSigns","isDo","isRe","isMi","isFa","isSol"],"sources":["C:/Users/user/sol-fa-app/src/utils/kodalySignsDB.js"],"sourcesContent":["// Kodály hand sign recognition system based on reference images\r\nconst fingerJointPairs = {\r\n    thumb: [1, 2, 3, 4],\r\n    index: [5, 6, 7, 8],\r\n    middle: [9, 10, 11, 12],\r\n    ring: [13, 14, 15, 16],\r\n    pinky: [17, 18, 19, 20]\r\n};\r\n\r\nconst calculateFingerCurl = (landmarks, fingerIndices) => {\r\n    const joints = fingerIndices.map(idx => landmarks[idx]);\r\n    const baseToTip = distance(joints[0], joints[joints.length - 1]);\r\n    const totalLength = fingerIndices.slice(1).reduce((sum, _, i) => \r\n        sum + distance(joints[i], joints[i + 1]), 0);\r\n    return 1 - (baseToTip / totalLength); // 1 = fully curled, 0 = straight\r\n};\r\n\r\nconst distance = (p1, p2) => {\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) +\r\n        Math.pow(p1.y - p2.y, 2) +\r\n        Math.pow(p1.z - p2.z, 2)\r\n    );\r\n};\r\n\r\nconst getFingerDirection = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleBase = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Calculate direction vector from wrist to middle finger tip\r\n    const direction = {\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    return {\r\n        x: direction.x,\r\n        y: direction.y,\r\n        z: direction.z,\r\n        isPointingForward: Math.abs(direction.z) > Math.max(Math.abs(direction.x), Math.abs(direction.y)),\r\n        isPointingSideways: Math.abs(direction.x) > Math.max(Math.abs(direction.y), Math.abs(direction.z))\r\n    };\r\n};\r\n\r\nconst getPalmOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const indexBase = landmarks[5];\r\n    const pinkyBase = landmarks[17];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Calculate palm normal using cross product\r\n    const v1 = {\r\n        x: indexBase.x - wrist.x,\r\n        y: indexBase.y - wrist.y,\r\n        z: indexBase.z - wrist.z\r\n    };\r\n    const v2 = {\r\n        x: pinkyBase.x - wrist.x,\r\n        y: pinkyBase.y - wrist.y,\r\n        z: pinkyBase.z - wrist.z\r\n    };\r\n\r\n    const normal = {\r\n        x: v1.y * v2.z - v1.z * v2.y,\r\n        y: v1.z * v2.x - v1.x * v2.z,\r\n        z: v1.x * v2.y - v1.y * v2.x\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\r\n    normal.x /= magnitude;\r\n    normal.y /= magnitude;\r\n    normal.z /= magnitude;\r\n\r\n    return {\r\n        normal,\r\n        isDownward: normal.y > 0.7,\r\n        isUpward: normal.y < -0.7,\r\n        isSideways: Math.abs(normal.x) > 0.7,\r\n        direction: {\r\n            x: normal.x,\r\n            y: normal.y,\r\n            z: normal.z\r\n        }\r\n    };\r\n};\r\n\r\nconst getHandOrientation = (landmarks) => {\r\n    const wrist = landmarks[0];\r\n    const middleMcp = landmarks[9];\r\n    const middleTip = landmarks[12];\r\n\r\n    // Calculate hand direction vector\r\n    const direction = {\r\n        x: middleTip.x - wrist.x,\r\n        y: middleTip.y - wrist.y,\r\n        z: middleTip.z - wrist.z\r\n    };\r\n\r\n    // Normalize\r\n    const magnitude = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n    direction.x /= magnitude;\r\n    direction.y /= magnitude;\r\n    direction.z /= magnitude;\r\n\r\n    // Calculate angles\r\n    const angleFromVertical = Math.acos(-direction.y) * (180 / Math.PI);\r\n    const angleFromHorizontal = Math.abs(90 - angleFromVertical);\r\n\r\n    return {\r\n        direction,\r\n        angleFromVertical,\r\n        angleFromHorizontal,\r\n        isVertical: angleFromVertical < 20 || angleFromVertical > 160,\r\n        isHorizontal: angleFromHorizontal < 20,\r\n        isDiagonal: angleFromVertical > 20 && angleFromVertical < 160 && angleFromHorizontal > 20\r\n    };\r\n};\r\n\r\nconst areFingersTogether = (landmarks) => {\r\n    const tipIndices = [8, 12, 16, 20]; // Index, Middle, Ring, Pinky tips\r\n    let maxDistance = 0;\r\n    \r\n    for (let i = 0; i < tipIndices.length - 1; i++) {\r\n        const dist = distance(landmarks[tipIndices[i]], landmarks[tipIndices[i + 1]]);\r\n        maxDistance = Math.max(maxDistance, dist);\r\n    }\r\n    \r\n    return maxDistance < 0.1;\r\n};\r\n\r\nexport const recognizeKodalySign = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    // Calculate finger curls\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const handOrientation = getHandOrientation(landmarks);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n    const fingerDirection = getFingerDirection(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n\r\n    // Check finger states\r\n    const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\r\n    const fingersClosedExceptThumb = \r\n        curls.index > 0.7 && \r\n        curls.middle > 0.7 && \r\n        curls.ring > 0.7 && \r\n        curls.pinky > 0.7;\r\n    const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\r\n\r\n    // Debug information\r\n    const debug = {\r\n        curls,\r\n        handOrientation,\r\n        palmOrientation,\r\n        fingerDirection,\r\n        fingersTogether,\r\n        fingersExtended,\r\n        fingersClosedExceptThumb,\r\n        allFingersClosed\r\n    };\r\n\r\n    // Sign recognition with clear distinctions\r\n    \r\n    // Do - closed fist held horizontally\r\n    if (allFingersClosed && handOrientation.isHorizontal) {\r\n        return { sign: 'do', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Re - flat hand diagonal upward\r\n    if (fingersExtended && \r\n        fingersTogether && \r\n        handOrientation.isDiagonal && \r\n        handOrientation.angleFromVertical < 90) {\r\n        return { sign: 're', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Mi - flat hand horizontal, palm down\r\n    if (fingersExtended && \r\n        fingersTogether && \r\n        handOrientation.isHorizontal && \r\n        palmOrientation.isDownward) {\r\n        return { sign: 'mi', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Fa - fist with thumb extended downward\r\n    if (fingersClosedExceptThumb && \r\n        curls.thumb < 0.3 && \r\n        handOrientation.angleFromVertical > 120) {\r\n        return { sign: 'fa', confidence: 0.9, debug };\r\n    }\r\n\r\n    // Sol - flat hand forward, palm sideways\r\n    if (fingersExtended && \r\n        fingersTogether && \r\n        fingerDirection.isPointingForward && \r\n        palmOrientation.isSideways) {\r\n        return { sign: 'sol', confidence: 0.9, debug };\r\n    }\r\n\r\n    return { sign: null, debug };\r\n};\r\n\r\nexport const analyzeHand = (landmarks) => {\r\n    if (!landmarks || landmarks.length < 21) return null;\r\n\r\n    const curls = {\r\n        thumb: calculateFingerCurl(landmarks, fingerJointPairs.thumb),\r\n        index: calculateFingerCurl(landmarks, fingerJointPairs.index),\r\n        middle: calculateFingerCurl(landmarks, fingerJointPairs.middle),\r\n        ring: calculateFingerCurl(landmarks, fingerJointPairs.ring),\r\n        pinky: calculateFingerCurl(landmarks, fingerJointPairs.pinky)\r\n    };\r\n\r\n    const handOrientation = getHandOrientation(landmarks);\r\n    const palmOrientation = getPalmOrientation(landmarks);\r\n    const fingerDirection = getFingerDirection(landmarks);\r\n    const fingersTogether = areFingersTogether(landmarks);\r\n    \r\n    const fingersExtended = Object.values(curls).every(curl => curl < 0.3);\r\n    const fingersClosedExceptThumb = \r\n        curls.index > 0.7 && \r\n        curls.middle > 0.7 && \r\n        curls.ring > 0.7 && \r\n        curls.pinky > 0.7;\r\n    const allFingersClosed = fingersClosedExceptThumb && curls.thumb > 0.7;\r\n\r\n    return {\r\n        fingerCurls: curls,\r\n        handOrientation,\r\n        palmOrientation,\r\n        fingerDirection,\r\n        fingersTogether,\r\n        fingersExtended,\r\n        fingersClosedExceptThumb,\r\n        allFingersClosed,\r\n        possibleSigns: {\r\n            isDo: allFingersClosed && handOrientation.isHorizontal,\r\n            isRe: fingersExtended && fingersTogether && handOrientation.isDiagonal && handOrientation.angleFromVertical < 90,\r\n            isMi: fingersExtended && fingersTogether && handOrientation.isHorizontal && palmOrientation.isDownward,\r\n            isFa: fingersClosedExceptThumb && curls.thumb < 0.3 && handOrientation.angleFromVertical > 120,\r\n            isSol: fingersExtended && fingersTogether && fingerDirection.isPointingForward && palmOrientation.isSideways\r\n        }\r\n    };\r\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}